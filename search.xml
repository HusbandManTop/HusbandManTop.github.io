<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>旋转理解左手坐标系</title>
      <link href="/2018/08/22/%E9%80%9A%E8%BF%87%E6%97%8B%E8%BD%AC%E7%90%86%E8%A7%A3%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB/"/>
      <url>/2018/08/22/%E9%80%9A%E8%BF%87%E6%97%8B%E8%BD%AC%E7%90%86%E8%A7%A3%E5%B7%A6%E6%89%8B%E5%9D%90%E6%A0%87%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h3 id="旋转理解左手坐标系"><a href="#旋转理解左手坐标系" class="headerlink" title="旋转理解左手坐标系"></a>旋转理解左手坐标系</h3><p>transform.Rotate(Vector,space);</p><ul><li>Vector: 方向</li><li>space: 坐标系(Loacl,Global)</li></ul><hr><ul><li><p>1.左手握住,大拇指指向左边,旋转的方向即为握手的方向</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.Rotate(Vector3.left);</span><br></pre></td></tr></table></figure></li><li><p>2.左手握住,大拇指指向右边,旋转的方向即为握手的方向</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.Rotate(Vector3.right);</span><br></pre></td></tr></table></figure></li><li><p>3.左手握住,大拇指指向上方,旋转的方向即为握手的方向</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.Rotate(Vector3.up);</span><br></pre></td></tr></table></figure></li><li><p>4.左手握住,大拇指指向下方,旋转的方向即为握手的方向</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.Rotate(Vector3.down);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity基础</title>
      <link href="/2018/08/22/Unity%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/22/Unity%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h3 id="平行光"><a href="#平行光" class="headerlink" title="平行光"></a>平行光</h3><hr><ul><li><p>参数: Type: 灯光类型  </p></li><li><p>Intensity: 光线明亮程度  </p></li><li><p>Cookie: 使用贴图纹理的(Alpha)通道作为一个遮罩,使光线在不同的地方有不同的亮度  </p></li><li><p>Shadow Type: 设置灯光投射阴影类型  </p></li><li><p><font color="F111">Culling Mask</font>: 设置层中的游戏对象是否受到该灯光的影响</p></li></ul><h4 id="平行光详细参数"><a href="#平行光详细参数" class="headerlink" title="平行光详细参数:"></a>平行光详细参数:</h4><ul><li><p>阴影剔除优化算法:</p><ul><li><p>吐过吧Shadow Type的属性设置成软阴影(softShadow),使得灯光产生软阴影效果,你会注意到近处的阴影显示没有问题,但是远处的阴影却未显示出来</p></li><li><p>阴影剔除的距离可以通过菜单栏:Edit-&gt;Project Settings-&gt;Quality质量面板来设置</p></li></ul></li></ul><h4 id="平行光项目的质量设置面板"><a href="#平行光项目的质量设置面板" class="headerlink" title="平行光项目的质量设置面板"></a>平行光项目的质量设置面板</h4><ul><li><p><font color="F111">Texture Quality</font>: 质量贴图(质量越低,贴图显示越模糊,渲染速度越快)  </p></li><li><p><font color="F111">Anti Aliasing</font>: 抗锯齿类型  </p></li><li><p>Shadows: 阴影类型  </p></li><li><p>Shadow Resolution: 阴影分辨率  </p></li><li><p><font color="F111">Shadow Distance</font>: 阴影距离(摄像机的最大阴影可见距离,超出这个距离的阴影不会被渲染)</p></li></ul><hr><a id="more"></a><h3 id="点光源"><a href="#点光源" class="headerlink" title="点光源"></a>点光源</h3><hr><h4 id="点光源的三种渲染模式"><a href="#点光源的三种渲染模式" class="headerlink" title="点光源的三种渲染模式"></a>点光源的三种渲染模式</h4><ul><li><p><font color="F111">VertexLit 模式</font>(顶点光照模式): 采用顶点着色渲染,只对模型顶点进行光照计算,其渲染速度在三种中为最快,可是效果最差;  </p></li><li><p><font color="F111">Forward Rendering 模式</font>(前向渲染): <strong>默认渲染模式,渲染速度适中,但是在整个场景中只能一盏(平行光)生成阴影</strong></p></li><li><font color="F111">Deferred Lighting 模式</font>(延迟光照模式): <strong>渲染速度最慢,但是可以生成多灯光阴影</strong></li></ul><hr><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><hr><h4 id="音频的监听与音频源组件"><a href="#音频的监听与音频源组件" class="headerlink" title="音频的监听与音频源组件"></a>音频的监听与音频源组件</h4><p>Unity3d中目前支持的音频剪辑(Audio Clip)中有四种音乐格式</p><ul><li><p>MP3:  适合较长的音频,作为背景音乐;  </p></li><li><p>Ogg:  适合较长的音频,作为背景音乐;  </p></li><li><p>Wav:  适合较短的音频,作为环境音效(无压缩格式);  </p></li><li><p>Aiff: 适合较短的音频,作为环境音效</p></li></ul><p>制作反应速度快的音效,适合使用不压缩音频</p><hr><h4 id="音频剪辑属性"><a href="#音频剪辑属性" class="headerlink" title="音频剪辑属性:"></a>音频剪辑属性:</h4><ul><li>Force to Mono: 强制单声道</li><li>Load in Background: 在后台加载</li><li>Load Type(音频加载方式):<ul><li>1.Decompress on Load: 解压在加载</li><li><ol start="2"><li>Compressed in Memory: 压缩在内存中</li></ol></li><li>3.Streaming:  直接从磁盘读取,适用于较大且对速度不敏感的音频播放</li></ul></li><li>preload audio data: 预加载音频数据</li><li>compression format: 压缩格式</li><li>sample rate setting: 采样率设置</li></ul><hr><h4 id="音频监听与音频源组件详细参数"><a href="#音频监听与音频源组件详细参数" class="headerlink" title="音频监听与音频源组件详细参数:"></a>音频监听与音频源组件详细参数:</h4><ul><li><strong>音频监听组件与音频播放组件可以放在同一个游戏对象上,也可以放置在不同游戏对象上</strong></li><li>音频监听组件默认添加在了摄像机上,<strong>注意没有被激活的摄像机需要把Audio Listener关掉</strong></li><li>同一个场景中Audio Listener只能有一个起作用</li></ul><hr><h4 id="音频监听与音频源组件-Audio-Source组件"><a href="#音频监听与音频源组件-Audio-Source组件" class="headerlink" title="音频监听与音频源组件-Audio Source组件"></a>音频监听与音频源组件-Audio Source组件</h4><ul><li>Audio Clip:音频剪辑</li><li>Mute: 静音</li><li>Play On Awake: 自动播放</li><li>Priority: 确定场景中所以音频源之间的优先级.(0:最重要 256:最不重要),当资源不足时有限级最低的会被剔除</li><li>Min Distance: 在最小距离之内,声音会被保持最大</li><li>Max Distance: 声音的最大距离</li></ul><hr><h4 id="音频混响器组件"><a href="#音频混响器组件" class="headerlink" title="音频混响器组件"></a>音频混响器组件</h4><ul><li>添加混响器(Audio Reverb Zones)组件,可以在场景中的某个位置上添加混响失真效果;  <ul><li>例如隧道中赛车的声音与露天的不同,声音在露天与小房间内的不同,同样的声音在山谷,山洞,客厅中都不同</li></ul></li><li>组件属性;<ul><li>Min Distance: 最小距离</li><li>Max Distance: 最大距离</li><li>Reverb Preset: 混响预制</li></ul></li></ul><hr><h4 id="音频滤波器"><a href="#音频滤波器" class="headerlink" title="音频滤波器"></a>音频滤波器</h4><p>通过音频滤波器组件我们可以进行滤波处理,例如添加回声,低通滤波处理等;</p><h5 id="低通滤波器-Audio-Low-Pass-Filter"><a href="#低通滤波器-Audio-Low-Pass-Filter" class="headerlink" title="低通滤波器 Audio Low Pass Filter"></a>低通滤波器 Audio Low Pass Filter</h5><ul><li>用于抑制高频信号,通过低频<ul><li>例如: 雷声近处尖锐,远处低沉,隔门听声的效果<h5 id="高通滤波器-Audio-High-Pass-Filter"><a href="#高通滤波器-Audio-High-Pass-Filter" class="headerlink" title="高通滤波器 Audio High Pass Filter"></a>高通滤波器 Audio High Pass Filter</h5></li></ul></li><li>用于抑制低频,通过高频<ul><li>例如制作非常刺耳的声音<h5 id="回声滤波器-Audio-Echo-Filter"><a href="#回声滤波器-Audio-Echo-Filter" class="headerlink" title="回声滤波器 Audio Echo Filter"></a>回声滤波器 Audio Echo Filter</h5></li></ul></li><li>给音频添加延迟效果(回声效果)<h5 id="失真滤波器-Audio-Distortion-Filter"><a href="#失真滤波器-Audio-Distortion-Filter" class="headerlink" title="失真滤波器 Audio Distortion Filter"></a>失真滤波器 Audio Distortion Filter</h5></li><li>对音频的失真处理,例如模拟低质量的收音机<h5 id="混响滤波器-Audio-Reverb-Filter"><a href="#混响滤波器-Audio-Reverb-Filter" class="headerlink" title="混响滤波器 (Audio Reverb Filter)"></a>混响滤波器 (Audio Reverb Filter)</h5></li><li>对音频进行<strong>失真处理</strong>来产生混响效果<h5 id="合声滤波器-Audio-Chorus-Filter"><a href="#合声滤波器-Audio-Chorus-Filter" class="headerlink" title="合声滤波器(Audio Chorus Filter)"></a>合声滤波器(Audio Chorus Filter)</h5></li><li>合成由多个音频相同但略有不同的声音<ul><li>例如生活中的大合唱效果</li></ul></li></ul><hr><h4 id="音频管理器"><a href="#音频管理器" class="headerlink" title="音频管理器"></a>音频管理器</h4><p>Edit-&gt;Priject Setting-&gt;Audio来打开音频管理器</p><hr><h3 id="GUI概述"><a href="#GUI概述" class="headerlink" title="GUI概述"></a>GUI概述</h3><p>无法摄像机拍到的图像是怎么变的,GUI永远显示在屏幕上,不受变形,碰撞,光照的影响</p><h4 id="GUI基本控件"><a href="#GUI基本控件" class="headerlink" title="GUI基本控件"></a>GUI基本控件</h4><ul><li>方法OnGUI():GUI本分是<em>**每帧擦除重绘的</em>,只应该在OnGUI中绘制GUI;</li><li>典型基本控件:<ul><li>标签:  <pre><code>GUI.Label(Rect,GUIContent);</code></pre></li><li>文本输入框:<pre><code>GUI.TextField();</code></pre></li></ul></li><li>多行文本框:<pre><code>GUI.TextArea();</code></pre></li><li>密码框:<pre><code>GUI.PasswordField();</code></pre></li><li>按钮<pre><code>GUI.Button();//Button只有鼠标抬起才会返回true;RepeatButton会在按下期间一直返回true;</code></pre></li><li>Tab页<pre><code>GUI.Toolbar();//返回值为点击的按钮序号</code></pre></li><li>复选框:<pre><code>GUI.Toggle();</code></pre></li></ul><h4 id="GUILayout布局与OnGUI"><a href="#GUILayout布局与OnGUI" class="headerlink" title="GUILayout布局与OnGUI"></a>GUILayout布局与OnGUI</h4><ul><li><p>GUILayout布局默认会伸展控件的尺寸,Button等控件支持params GUILayoutOption[]options可变参数数组,可以通过GUILayout.Width()返回一个设置控件宽度的GUILayoutOption对象,Height(),MinWidth(),MinHeight()等同理,</p><ul><li>例如:GUILayout.Button(“test”,GUILayout.Width(500),GUILayout.Height(500));</li></ul></li><li><p>GUILayout采用线性布局,类似于StackPanel,默认是<strong>纵向布局</strong>通过GUILayout.BeiginHorizontal();开启和GUILa.EndHorizontal();结束一个横向排列区域,同意BeginVertical(),EndVercital()</p></li></ul><p>-如果嫌控件太挤,可以使用GUILayout.Space();增减指定像素的间隙</p><ul><li>区域Area: 相当于控件盒子,Area中的控件跟着Area移动,BeginArea()开始一个区域,参数制定区域的大小和坐标,EndArea()结束区域;区域是没有边框和标题的,页不可以拖放;<strong>注意: BeginArea()的参数中可以使用Screen类来进行相对定位</strong></li></ul><h4 id="GUI常用控件与贴图"><a href="#GUI常用控件与贴图" class="headerlink" title="GUI常用控件与贴图"></a>GUI常用控件与贴图</h4><ul><li>滑动条: 纵向<pre><code>GUILayout.VerticalSlider(value,min,max);返回值为当前值,HorizontalSlider()横向</code></pre></li><li><p>窗口Window:</p><pre><code>GUILayout.Windos(0,new Rec(),AddWindow1,&quot;string&quot;);第一个参数为窗口的编号第二个参数为窗口的大小第三个参数为Void WindosFunction(int Windowid)委托,用来绘制窗口内容第四个参数为窗口标题,返回当前所在区域</code></pre></li><li><p>给GUI贴图:</p><pre><code>public Texture2D texture;GUI.DrawTexture(new Rect(),texture);</code></pre></li></ul><h4 id="GUI-Skin-皮肤"><a href="#GUI-Skin-皮肤" class="headerlink" title="GUI Skin 皮肤"></a>GUI Skin 皮肤</h4><p> <a href="https://imgchr.com/i/Pg8vCD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/13/Pg8vCD.png" alt="Pg8vCD.png"></a></p><h4 id="控件字体"><a href="#控件字体" class="headerlink" title="控件字体"></a>控件字体</h4><p><a href="https://imgchr.com/i/PgGSvd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/13/PgGSvd.png" alt="PgGSvd.png"></a></p><hr><h3 id="静态模型的导出"><a href="#静态模型的导出" class="headerlink" title="静态模型的导出"></a>静态模型的导出</h3><ul><li><p>三维模型建议采用<strong>FBX</strong>格式导出,该格式可以更方便的对需要导出的信息进行筛选和设置,而且能够包含<strong>模型数据</strong>,<strong>贴图数据</strong>,<strong>动画数据</strong>,等3D游戏中经常使用到的数据;  </p></li><li><p>在Unity3d中,一个系统单位表示为1m,为了能够与最终的游戏场景匹配,需要在三维软件中设置它的系统单位  </p></li><li><p>Unity3d会把<strong>其他软件导入进来的模型会进行缩小100倍</strong>,把FBX模型文件导入Unity3d中需要在Inspertor中对”Scal Factor”进行设置</p></li><li><p>FBX Import面板中Model标签栏中的属性说明:</p><ul><li><p>1.Scal Factor:缩放因子. Unity3d默认空间单位中的1m等于导入的文件中的一个单位,如果第三方软件中使用不同大小的单位建模,在这里可以进行校正;  </p></li><li><p>2.Read/Write Enabled: 使模型可以被实时读写,这样可以在场景中修改模型数据,但它是在内存中复制一份副本作为代价的,所以会多一倍的内存空间<font color="F111">建议在游戏产品发布前去掉默认的选项</font>  </p></li><li><p>3.Generate Colloder: 如果勾选,模型在导入时自动加上Mesh Collider组件<font color="F111">建议不要对复杂的移动的物体使用这个选项,很耗费性能</font>  </p></li><li><p>如果但觉导入的对象尺寸有问题,可以创建一个基本的Cube,该立方体的尺寸是(1,1,1);</p></li></ul><p><a href="https://imgchr.com/i/PgI240" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/PgI240.png" alt="PgI240.png"></a></p></li></ul><hr><h3 id="物理学模拟"><a href="#物理学模拟" class="headerlink" title="物理学模拟"></a>物理学模拟</h3><ul><li>物理学模拟就是在虚拟的世界中运用物理算法对游戏的运动进行模拟,使得物理运动行为更加符合真实世界的物理定律,从而让游戏更加富有真是感</li><li>Unity3d内置NVIDIA公司的PhysX物理引擎,它采用硬件加速的方式对物理现象进行模拟运算,所以其速度比采用软件运算快的多</li></ul><h4 id="Rigibody属性"><a href="#Rigibody属性" class="headerlink" title="Rigibody属性"></a>Rigibody属性</h4><ul><li>Mass: 物体的质量</li><li>Drag: 空气阻力</li><li>Use Gravity: 使用重力</li><li><p>Is Kinematic: 若激活,则物体不受物理引擎的驱动,只能通过变换Transfrom操作,保留自身的物理属性,即<strong>忽略力对该刚体的作用</strong></p></li><li><p>碰撞的基本规则:</p><ul><li>如果需要两个对象发生碰撞的必要条件:<strong>必须一个为刚体,另一个为碰撞体</strong></li><li>如果需要两个游戏不但有碰撞现象,且存在力的相互作用<strong>必须两个对象都为刚体</strong></li></ul></li></ul><h4 id="物理材质的分类与用于"><a href="#物理材质的分类与用于" class="headerlink" title="物理材质的分类与用于"></a>物理材质的分类与用于</h4><ul><li><p>物理材质是控制游戏对象的<strong>摩擦力</strong>,<strong>反弹系数</strong>等属性的一种资源  </p></li><li><p>物理材质是资源而不是组件,且它是赋值给游戏对象上的碰撞盒属性中的Physics Material属性上的资源</p></li><li><p>物理材质中主要分为<strong>“反弹系数”</strong>,和<strong>“摩擦系数”</strong></p></li></ul><h4 id="物理材质属性"><a href="#物理材质属性" class="headerlink" title="物理材质属性"></a>物理材质属性</h4><ul><li>创建物理材质: 在Project-&gt;右键Create-&gt;Phystcs Materials</li><li>物理材质属性<ul><li>Dynamic Friction: 滑动摩擦力,值为0效果像冰,1则物体运行很快停止</li><li>Static Friction: 静摩擦力,值为0值为0时效果像冰</li><li>Bounciness: 表面的反弹力,值为0时不发生反弹,值为1时反弹,不损耗任何能量</li></ul></li></ul><p><strong>注: 如果一个游戏对象添加了刚体组件,建议采用为它添加作用力或者修改刚体速度的方式来操作,这样可以避免脚本控制的位置与物理引擎所计算的位置相冲突</strong></p><h4 id="脚本控制物体移动"><a href="#脚本控制物体移动" class="headerlink" title="脚本控制物体移动"></a>脚本控制物体移动</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transfrom.Translate();<span class="comment">//使用位移的方式,不具备惯性</span></span><br><span class="line">rigibody.velocity;<span class="comment">//使用速度控制刚体,惯性居中</span></span><br><span class="line">rigibody.constantForce.force;<span class="comment">//使用力控制刚体,具有很强的惯性</span></span><br><span class="line"><span class="comment">//此方式需要在被控制的对象上添加"constant Force"组件</span></span><br></pre></td></tr></table></figure><h4 id="碰撞盒和触发器"><a href="#碰撞盒和触发器" class="headerlink" title="碰撞盒和触发器"></a>碰撞盒和触发器</h4><h5 id="碰撞盒的分类与使用"><a href="#碰撞盒的分类与使用" class="headerlink" title="碰撞盒的分类与使用"></a>碰撞盒的分类与使用</h5><ul><li>基本碰撞盒与网格碰撞盒</li><li>模型比较复杂时建议不要使用网格碰撞盒,MeshCollider非常消耗计算资源</li><li><p>基本的碰撞盒有: BoxCollider ,SphereCollider….<br>-碰撞盒的最基本作用还是阻挡作用  </p></li><li><p>碰撞事件函数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OnCollisionStay(Collision collision);<span class="comment">//在碰撞体上停留(每帧调用)</span></span><br><span class="line">OnCollisionEnter(Collision collision);<span class="comment">//进入碰撞体调用一次</span></span><br><span class="line">OnCollisionExit(Collision collision);<span class="comment">//离开碰撞体调用一次</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="触发器的作用"><a href="#触发器的作用" class="headerlink" title="触发器的作用"></a>触发器的作用</h4><ul><li><p>如果我们需要在游戏中侦测特定游戏对象的存在与出现与否,则一般使用触发器,<strong>触发器就是取消了碰撞盒的阻挡作用,保留基于碰撞事件函数的功能</strong>  </p></li><li><p>触发事件函数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OnTriggerEnter(Colloder collision);<span class="comment">//进入触发器</span></span><br><span class="line">OnTriggerStay(Collision collision);<span class="comment">//在触发器上停留(每帧调用)</span></span><br><span class="line">OnTriggerExit(Collision collision);<span class="comment">//离开触发器调用一次</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Unity基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenGL基础</title>
      <link href="/2018/08/22/OpenGL%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/22/OpenGL%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h3 id="OpenGL基础"><a href="#OpenGL基础" class="headerlink" title="OpenGL基础"></a>OpenGL基础</h3><hr>]]></content>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity基础(二)</title>
      <link href="/2018/08/22/Unity%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
      <url>/2018/08/22/Unity%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h3 id="Unity基础-二"><a href="#Unity基础-二" class="headerlink" title="Unity基础(二)"></a>Unity基础(二)</h3><hr><h4 id="游戏引擎介绍"><a href="#游戏引擎介绍" class="headerlink" title="游戏引擎介绍"></a>游戏引擎介绍</h4><p>为什么需要游戏引擎</p><ul><li><p>所谓游戏引擎是指一些已经编写好可编辑电脑游戏系统或者一些交互式图像应用程序的核心组件,这些系统为游戏设计者提供制作游戏所需要的各种工具,其目的在于让游戏设计者能够容易和快速地做出游戏格式而不用从零开始,大部分游戏引擎都支持跨平台;  </p></li><li><p>通常<strong>游戏包含以下系统: 渲染引擎(即:”渲染器”,含二维图像引擎和三维图像引擎),物理引擎,碰撞检测系统,音效,脚本引擎,动画,人工智能,网络引擎及场景管理</strong>等  </p></li><li><p>简单来说:引擎就是用于控制所以游戏功能的主程序,从计算碰撞,物理系统和物体的相对位置,在接受玩家的输入,以及按照正确的音量输出声音等等  </p><p><a href="https://imgchr.com/i/P2FhuQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2FhuQ.png" alt="P2FhuQ.png"></a><br><a href="https://imgchr.com/i/P2F4Bj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/14/P2F4Bj.png" alt="P2F4Bj.png"></a></p></li></ul><hr><h4 id="3d图形学与核心类"><a href="#3d图形学与核心类" class="headerlink" title="3d图形学与核心类"></a>3d图形学与核心类</h4><h5 id="3d图形学"><a href="#3d图形学" class="headerlink" title="3d图形学"></a>3d图形学</h5><ul><li><p>局部坐标系与世界坐标系  </p><ul><li><p>在二维空间中,描述一个点可以使用二维的笛卡尔坐标系,在三维空间中,可以使用三维笛卡尔坐标系来表示某点的控件位置  </p></li><li><p>游戏开发中用的最多的是局部坐标系与世界坐标系</p></li></ul></li><li><p>父子物体  </p><ul><li><p>场景中所以得物体都在世界坐标系中有特定的位置(平移,旋转,缩放),每个物体都有自己的局部坐标系,假设现在有两个物体A和B,B是以A的局部坐标系作为参考坐标系,那么可以称B是A的子物体,而A是B的父物体  </p></li><li><p>目前流向的游戏引擎中,父子关系的运用非常广泛,假设B是A的子物体是,当A进行移动,旋转,或者缩放时,B也会跟随进行变换,这种效果可以用来制作简单的摄像机跟随物体运动的效果,被跟随的物体作为父物体,摄像机作为子物体</p></li></ul></li><li><p>多边形,边,顶点,面片</p><ul><li><p>在目前三维建模中,多边形建模是用的最多的一种建模方式,在第三方建模软件中使用多边形建模方式建成的3d模型,便可以盗图到unity中,在导入的过程中unity会把组成模型的面片(meshes)转换为三角面,每个三边面称为一个多边形(polygon),而这个三边面由三条边(edge)组成,而每天边是由两个顶点(vertice)组成  </p></li><li><p><strong>多边形的数量以及顶点的数量是影响游戏渲染速度的一个重要的因素之一</strong>,在3d游戏场景的建模中,应该在模型效果与模型顶点数量之间取得一个平衡</p></li><li><p>现在有很多技术可以提高模型数据的处理速度和容纳更多的多边形,例如LOD(层级细节),Occludion Culling(遮挡剔除)等</p></li></ul></li></ul><h5 id="Mesh网格系统组件"><a href="#Mesh网格系统组件" class="headerlink" title="Mesh网格系统组件"></a>Mesh网格系统组件</h5><ul><li><p>Mesh Fillter网格适配器</p><ul><li>网格适配器用于从你的资源中获取网格数据(Mesh)冰将其传递到用于将其渲染到屏幕的网格渲染器当中</li><li>网格过滤器与网格渲染器联合使用,使用模型显示到屏幕上,Unity中一般创建一个网格过滤器和一个网格渲染器.想要在场景中看到这个网格(Mesh),还需要为游戏对象添加一个网格渲染器(Mesh Render).它应该是自动被添加的,但是如果你将它从你的对象上一处.你必须手动重新添加它,如果网格渲染器(Mesh Render)不存在,这个网格扔将存在与你的场景中,但是它将不会被绘制</li></ul></li><li><p><strong>Mesh Render网格渲染器</strong></p><ul><li>网格渲染器从网格适配器获得几何形状,并且根据物体的TransForm组件的定义位置进行渲染</li></ul></li><li><p><strong>Skineed Mesh Render蒙皮网格渲染器</strong></p><ul><li>蒙皮网格渲染器是在网格渲染器的基础上,加入了对蒙皮网格的支持;</li></ul></li></ul><h4 id="贴图与材质"><a href="#贴图与材质" class="headerlink" title="贴图与材质"></a>贴图与材质</h4><h5 id="材质概述"><a href="#材质概述" class="headerlink" title="材质概述"></a>材质概述</h5><ul><li><p>物体呈现我们面前除了形体外,还包括了”固有颜色”与”质地”(质感与光学性质)  </p></li><li><p>固有颜色让物体的表面看起来是什么颜色,而质感决定了该物质是使用什么材质制成的  </p></li><li><p>在三维建模软件中,一般使用三维建模工具创作质感的形体,使用贴图表现物体的固有颜色,使用材质表现物质的”质感”</p></li><li><p>在unity中,所以得材质都是有着色语言写出来的,由着色器语言编写的程序成为着色器  </p></li><li><p>每个物质除了形体,都具备”固有颜色”,”质感”,”光学性质”,这三种属性决定了该物质在视觉上的自身物理外观,以及在光线下呈现出的各种质感  </p></li></ul><h5 id="二维贴图"><a href="#二维贴图" class="headerlink" title="二维贴图"></a>二维贴图</h5><ul><li><p>贴图一般可以分为:</p><ul><li>二维贴图</li><li>立方体贴图</li><li>视频贴图</li><li>渲染贴图</li><li>程序贴图</li></ul></li><li><p>Unity支持的图片格式: PSD,TIFF,JPG,TGA,PNG,BMP,IFF,PICT,我们一般使用PSD,TIFF,TGA等无压缩或者无损压缩的高质量高分辨率的图片文件格式来制作贴图</p></li><li><p>贴图尺寸:</p><ul><li>制作游戏模式时,建议贴图尺寸为2的n次幂,例如2,4,8,16,32,64,128,256,1024,2058等</li></ul></li><li><p>贴图属性:</p><ul><li>Texture: 普通贴图</li><li>Normal map: 法线贴图</li><li>GUI GUI贴图</li><li>Cursor 光标贴图</li><li>Reflection: 反射贴图又称为立方体贴图,一般制作反射效果</li><li>Cookie: 用于灯光遮罩贴图</li><li>Lightmap: 光照贴图</li><li>Advanced: 高级设置</li><li>Sprite: 精灵</li></ul><font size="3" color="F111">大家对Lod应该都有所了解，其原理是根据摄像机和模型之间不同距离（准确地讲，应该是模型所占摄像机视口的比例，距离越远比例越小，反之越大）而采用不同精细度（网格的顶点数和三角形数量不一样）的网格mesh，距离越远采用精细度越低的网格（即顶点数和三角形数越少的网格），以提高渲染效率。<strong>mipmap有些像lod，不同的是，它在贴图上面动了手脚，根据不同距离采用不同精细度（贴图的像素不一样）的贴图。</strong><br>应用lod和mipmap都可以不同程度上提高渲染效率，但是由于都需要在内存里面放着多个不同精细度的副本，所以，代价是需要消耗更多的内存。<br>对于ui贴图来说，我们不必应用mipmap，因为一般的ui都是“平铺”在正交摄像机视口的，和摄像机木有距离这一概念，所以我们大可以把ui贴图的mipmap选项去掉，以节省内存。</font></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FairyGUI</title>
      <link href="/2018/08/22/FairyGUI/"/>
      <url>/2018/08/22/FairyGUI/</url>
      <content type="html"><![CDATA[<h3 id="FairyGUI"><a href="#FairyGUI" class="headerlink" title="FairyGUI"></a>FairyGUI</h3><hr><p><strong><a href="http://fairygui.com/" target="_blank" rel="noopener">FairyGUI下载地址</a></strong><br>重新定义UI制作流程，全可视化，零代码，是一款同时适用于程序员，设计师和游戏策划的UI制作工具。</p><p>FairyGUI对比NGUI<br><a href="http://blog.csdn.net/andyqingliu/article/details/54706298" target="_blank" rel="noopener">http://blog.csdn.net/andyqingliu/article/details/54706298</a></p><p>FairyGUI对比UGUI<br><a href="http://blog.csdn.net/qq_39718162/article/details/78951162" target="_blank" rel="noopener">http://blog.csdn.net/qq_39718162/article/details/78951162</a>  </p><p>FairyGUI入门了解<br><a href="http://blog.csdn.net/qq_39718162/article/details/78951259" target="_blank" rel="noopener">http://blog.csdn.net/qq_39718162/article/details/78951259</a></p><hr>]]></content>
      
      
        <tags>
            
            <tag> FairyGUI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3d数学-向量</title>
      <link href="/2018/08/22/3D%E6%95%B0%E5%AD%A6_%E5%90%91%E9%87%8F/"/>
      <url>/2018/08/22/3D%E6%95%B0%E5%AD%A6_%E5%90%91%E9%87%8F/</url>
      <content type="html"><![CDATA[<h3 id="3d数学-向量"><a href="#3d数学-向量" class="headerlink" title="3d数学-向量"></a>3d数学-向量</h3><hr><h4 id="向量的数学定义"><a href="#向量的数学定义" class="headerlink" title="向量的数学定义"></a>向量的数学定义</h4><ul><li>向量就是一个数字列表,很多个数字组成的列表,也叫做数组</li><li>如果只有一个数叫做一维行/列向量,一维也叫做标量</li><li>向量的维数: 2维,3维,4维,<strong>标量是1维向量</strong></li><li><p>行向量,列向量</p><p>[1,2,3] 行向量  </p><p>|1| 列向量<br>|2|<br>|3|  </p></li></ul><h4 id="向量的几何定义"><a href="#向量的几何定义" class="headerlink" title="向量的几何定义"></a>向量的几何定义</h4><ul><li><p><strong>一个向量就是有大小和方向的有向线段,线的长度是向量的大小,线的方向是向量的方向</strong></p></li><li><p><strong>向量没有位置(向量的起点可以在任何位置),只有大小和方向</strong></p></li><li><p>我们用一个向量在几何学上来表示位移而不是表示位置,即有方向又有大小的量就叫做向量  </p><p><a href="https://imgchr.com/i/PhaNHU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/20/PhaNHU.png" alt="PhaNHU.png"></a></p></li><li><p>向量的表达,向量在每个维度上的有向位移<br><a href="https://imgchr.com/i/PhadN4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/20/PhadN4.png" alt="PhadN4.png"></a></p></li></ul><h4 id="向量和点的关系"><a href="#向量和点的关系" class="headerlink" title="向量和点的关系"></a>向量和点的关系</h4><ul><li><p>点有位置,但是没有实际的大小和厚度(厚度应该是指的是方向吧),向量有大小和方向,但是没有位置(位置可以在任何位置),所以使用”点”和”向量”的目的完全不同;”点”描述的是位置,”向量”描述的是位移,也包括相对位置;</p></li><li><p>向量和点在数学上是完全一致的,概念是等价的<br><img src="https://s1.ax1x.com/2018/08/22/Po0hxe.png" alt="Po0hxe.png"></p></li></ul><a id="more"></a><hr><h4 id="向量的运算"><a href="#向量的运算" class="headerlink" title="向量的运算"></a>向量的运算</h4><h5 id="零向量"><a href="#零向量" class="headerlink" title="零向量"></a>零向量</h5><ul><li><p>任何集合,都存在加性单元x,对集合中任意元素y,满足y+x=y;</p></li><li><p>n维向量集合的加性单元就是n维”零向量”,它的每一维都是零;</p></li><li><p>零向量非常特殊,因为它是唯一一个大小为零的向量,对于其他任意数m,存在无数多个大小(模)为m的向量,他们构成了一个圆</p></li><li><p>向量里面的每一个数都是0,<strong>零向量是唯一一个没有方向的向量</strong><br>[0,0,0]</p><p>|0|<br>|0|<br>|0|  </p></li></ul><h6 id="负向量"><a href="#负向量" class="headerlink" title="负向量"></a>负向量</h6><ul><li><p>对于任何集合,元素x的加性逆元为-x,其与x相加等于加性单位元,简单来说就是x+(-x)=0;</p></li><li><p>把一个向量取负,就是这个方向的负向量,一个向量加上它的负向量结果就是零向量</p><pre><code> V+-V = -V+V = 0-[x,y] = [-x,-y]</code></pre></li><li><p>一个向量和它的负向量是长度相等,方向相反</p><p><a href="https://imgchr.com/i/Phd2Mq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/20/Phd2Mq.png" alt="Phd2Mq.png"></a></p></li></ul><h5 id="向量的大小-长度-模"><a href="#向量的大小-长度-模" class="headerlink" title="向量的大小,长度,模"></a>向量的大小,长度,模</h5><ul><li><p><strong>向量的长度计算公式</strong>(也叫向量的大小,或者向量的模)<br><a href="https://imgchr.com/i/Phdoi4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/20/Phdoi4.png" alt="Phdoi4.png"></a></p></li><li><p><em>向量的大小就是向量各分量平方和的平方根,向量的大小是一个非负标量</em><br><a href="https://imgchr.com/i/PouLdA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PouLdA.png" alt="PouLdA.png"></a></p></li></ul><h5 id="标量与向量的乘法"><a href="#标量与向量的乘法" class="headerlink" title="标量与向量的乘法"></a>标量与向量的乘法</h5><ul><li><p><strong>虽然标量不能与向量相加,但是他们可以相乘,结果将得到一个向量,与原向量平行,但长度不同或方向相反</strong></p></li><li><p>标量与向量的乘法非常直接,将向量的每一个分量都与标量相乘即可,标量与向量乘的顺序并不重要,但经常把标量写在左边,向量也能除以非零标量,效果等同于乘以标量的倒数</p></li></ul><h6 id="标量与向量的乘法的几何意义"><a href="#标量与向量的乘法的几何意义" class="headerlink" title="标量与向量的乘法的几何意义:"></a>标量与向量的乘法的几何意义:</h6><ul><li>几何上,向量乘以标量k的效果是以因子|k|缩放向量的长度,例如,为了使向量的长度加倍,应使向量乘以2,如果k&lt;0,则该向量的方向被倒转<br><a href="https://imgchr.com/i/PoVyWD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoVyWD.png" alt="PoVyWD.png"></a>  </li></ul><h6 id="标量与向量的乘法的数学公式"><a href="#标量与向量的乘法的数学公式" class="headerlink" title="标量与向量的乘法的数学公式:"></a>标量与向量的乘法的数学公式:</h6><ul><li><a href="https://imgchr.com/i/PoVfeI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoVfeI.png" alt="PoVfeI.png"></a></li></ul><ul><li><strong>注意:</strong><ul><li><em>标量与向量相乘时,不需要写乘号,将两个向量挨着写即表示相乘(常将标量写在左边)</em></li><li><em>标量与向量的乘法和除法优先级高于加减法,例如:3a+b是(3a)+b,而不是3(a+b)</em></li><li><em>标量不能除以向量,并且向量不能除以另一个向量</em></li><li><em>负向量能被认为是乘法的特殊情况,乘以标量-1</em></li></ul></li></ul><h5 id="标准化向量"><a href="#标准化向量" class="headerlink" title="标准化向量"></a>标准化向量</h5><ul><li>对于许多向量,我们只关心它的方向而不关系其大小,如:”我面向的是什么方向”,在这种情况下,使用单位向量非常方便,<strong>单位向量就是大小为1的向量</strong>,单位向量经常被称作为<strong>标准化向量</strong>或者更简单的称为<strong>法线</strong></li></ul><h6 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则:"></a>运算法则:</h6><ul><li>对任意非零的向量v,都能计算出一个和v方向相同的单位向量v(norm).这个过程被称作为”标准化”,<strong>要标准化向量,将向量除以它的大小(模)即可</strong><pre><code>V(normlize) = V / ||V||,V != 0</code></pre><ul><li>零向量不能被标准化,数学上不允许,因为导致除0,几何上也没有任何意义,因为零向量没有方向</li></ul></li></ul><ul><li><p><strong>就是把一个向量(原来可能很长/或者很小的向量),把它的长度都变成单位长度(1),方向不改变;</strong></p></li><li><p>单位向量主要用于我们不关心向量的长度,只需要知道向量的方向的时候,使用单位向量;</p></li><li><strong>把一个普通的向量(不是单位向量的向量)变成单位化向量,就叫做标准化向量,标准化的结果就叫做单位向量</strong><br><a href="https://imgchr.com/i/PoVjwq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoVjwq.png" alt="PoVjwq.png"></a><br><a href="https://imgchr.com/i/PoVzkV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoVzkV.png" alt="PoVzkV.png"></a></li></ul><h5 id="向量的加法和减法"><a href="#向量的加法和减法" class="headerlink" title="向量的加法和减法"></a>向量的加法和减法</h5><h6 id="运算法则-1"><a href="#运算法则-1" class="headerlink" title="运算法则"></a>运算法则</h6><ul><li><p>两个向量相加就是向量对应的数相加(标量不能与向量相加)<br><a href="https://imgchr.com/i/PoZCpF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoZCpF.png" alt="PoZCpF.png"></a></p></li><li><p>向量的加法  </p><p><a href="https://imgchr.com/i/PoZek6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoZek6.png" alt="PoZek6.png"></a></p></li><li><p>向量的减法  </p><p><a href="https://imgchr.com/i/PoZmtK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoZmtK.png" alt="PoZmtK.png"></a></p></li><li><p><strong>注意:</strong></p><ul><li>向量不能与标量或者维度不同的向量相加减</li><li>和标量加法一样,向量加法满足交换律,但向量减法不满足交换律,永远有a+b=b+a,但a-b=-(b-a),仅当a=b时,a-b=b-a</li></ul></li></ul><h6 id="几何解释"><a href="#几何解释" class="headerlink" title="几何解释"></a>几何解释</h6><ul><li>向量ab相加的几何解释为:平移向量,使向量a的头连接向量b的尾,然后从a的尾向b的头画出一个向量,这就是向量加法的”三角形法则”</li><li>减法b-a代表了从a到b的向量,简单的求”两点之间”的向量是没有意义的,因为没有指明方向,求一个点到另一个点的向量才有实际意义</li></ul><h5 id="距离公式"><a href="#距离公式" class="headerlink" title="距离公式"></a>距离公式</h5><ul><li>我们可以利用向量的加减法运算来计算两个点之间的距离(主要是用减法运算)<br><a href="https://imgchr.com/i/PoZ3nA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoZ3nA.png" alt="PoZ3nA.png"></a><pre><code>计算两点之间的距离:d = b-a = |bx - ax|          |by - ay|          |bz - az|a到b的距离等于向量d的长度    距离(a,b) = ||d|| = √dx^2+dy^2+dz^2将d带入:    距离(a,b) = ||b-a|| = √(bx-ax)^2+(by-ay)^2+(bz-az)^2</code></pre></li></ul><h5 id="向量的点乘-内积"><a href="#向量的点乘-内积" class="headerlink" title="向量的点乘(内积)"></a>向量的点乘(内积)</h5><h6 id="运算法则-2"><a href="#运算法则-2" class="headerlink" title="运算法则"></a>运算法则</h6><ul><li><p>点乘a·b,与标量和向量的乘法相同,向量的点乘有优先级高于加法和减法,标量乘法和标量与向量的乘法经常可以省略乘号,但是在向量点乘中不能省略乘号</p></li><li><p><strong>向量点乘就是对应分量乘积的和,其结果是一个标量</strong></p><pre><code>|ax| |bx||ay| |by||az|·|bz| = axbx+ayby+azbz+..+anbn|..| |..||an| |bn|简写为:a·b = nΣi=1aibi</code></pre><p>应用到2d3d中为</p><pre><code>a·b = axbx+ayby (ab是2d向量)a·b = axbx+ayby+azbz (ab是3d向量)</code></pre></li><li>点乘满足交换律:a·b = b·a</li></ul><h6 id="几何解释-1"><a href="#几何解释-1" class="headerlink" title="几何解释"></a>几何解释</h6><ul><li><p>点乘结果描述了两个向量的”相似”程度,点乘结果越大,两向量越接近<br><a href="https://imgchr.com/i/PowB7t" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PowB7t.png" alt="PowB7t.png"></a></p></li><li><p>点乘等于向量大小与向量夹角cos值得积:</p><pre><code>a·b   = ||a|| ||b|| cosθ(3d中,两个向量的夹角是在包含两向量的平面中定义的)θ= arccos(a·b / ||a|| ||b||)</code></pre></li><li>用点乘计算两个向量之间的夹角<ul><li>如果两个向量ab是单位向量,就可以避免上面的除法运算,在这种情况下,上式中的分母是1;<pre><code>θ = arccos(a·b)  (ab是单位向量)</code></pre></li></ul></li><li>计算两个向量的夹角:<ul><li>如果不需要θ的确切值而只需要ab的夹角类型,就可以只取用点乘的结果的符号</li></ul></li></ul><table><thead><tr><th style="text-align:center">a·b</th><th style="text-align:center">θ</th><th style="text-align:center">角度</th><th style="text-align:center">a和b</th></tr></thead><tbody><tr><td style="text-align:center">&gt;0</td><td style="text-align:center">0度 &lt;= θ &lt;90度</td><td style="text-align:center"></td><td style="text-align:center">方向基本相同</td></tr><tr><td style="text-align:center">=0</td><td style="text-align:center">θ &lt;= 90度</td><td style="text-align:center"></td><td style="text-align:center">正交</td></tr><tr><td style="text-align:center">&lt;0</td><td style="text-align:center">90度 &lt; θ &lt;=108度</td><td style="text-align:center"></td><td style="text-align:center">方向基本相反</td></tr></tbody></table><ul><li>点乘的结果符号大致可以确定θ的类型<ul><li><strong>向量的大小并不影响点乘结果的符号,所以和ab大小无关,注意:如果ab中任意一个为0,那么a·b的结果也等于0.因此,点乘对零向量的解释是:零向量和任意其他向量都垂直</strong></li></ul></li></ul><h5 id="向量的投影"><a href="#向量的投影" class="headerlink" title="向量的投影"></a>向量的投影</h5><ul><li>给定两个向量v和n,能将v分解成两个向量:V|| 和V⊥.他们分别平行于和垂直于n,并满足v = V|| + V⊥.一般称平行分量V||为V在n上的投影<br><a href="https://imgchr.com/i/PofaPH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PofaPH.png" alt="PofaPH.png"></a></li><li>求V||:<ul><li>V|| = n(||(V||)|| / ||n||)</li><li>利用三角分解求||(V||)||<pre><code>Cosθ = ||(V||)|| / ||V||cosθ||V|| = ||(V||)||</code></pre></li></ul></li><li><p>将||( V|| )||带入:</p><pre><code>V|| = n(||V||cosθ / ||n||)    = n(||V|| ||n|| cosθ / ||n||^2)    = n(V·n / ||n||^2)</code></pre></li><li><p>如果n是单位向量:</p><pre><code>V⊥+V|| = ||V||V⊥     = ||V||-V||       = ||V|| - n(V·n / ||n||^2)</code></pre></li></ul><h5 id="向量的叉乘-差积"><a href="#向量的叉乘-差积" class="headerlink" title="向量的叉乘(差积)"></a>向量的叉乘(差积)</h5><ul><li>点乘得到的是一个标量并满足交换律,向量叉乘得到的是一个向量,并且不满足交换律<h6 id="运算法则-3"><a href="#运算法则-3" class="headerlink" title="运算法则"></a>运算法则</h6></li><li>叉乘axb,这里的x号不可以省略</li><li><p>叉乘公式:</p><pre><code>| x1 |   | x2 |   | x1z2 - z1y2 || y1 | x | y2 | = | z1x2 - x1z2 || z1 |   | z2 |   | x1y2 - y1x2 |</code></pre><p><a href="https://imgchr.com/i/PohtO0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PohtO0.png" alt="PohtO0.png"></a></p></li><li><p>叉乘的运算优先级和点乘一样,乘法在加减法之前计算,<strong>当点乘和叉乘在一起时,叉乘优先计算: a·b<em>c = a·(b</em>c).因为点乘返回的是一个标量,同时标量和向量之间不能叉乘,所以(a·b)* c没有定义</strong>.运算a·(b*c)称作三重积</p></li></ul><h6 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h6><ul><li>叉乘得到的向量垂直于原来的两个向量<br><a href="https://imgchr.com/i/PohT1A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PohT1A.png" alt="PohT1A.png"></a><ul><li>向量a和b在同一个平面上,向量axb指向该平面的正上方,垂直于a和b</li></ul></li><li>axb的长度等于向量的大小与向量夹角sin值得积:<pre><code>||axb|| = ||a|| ||b|| sinθ</code></pre></li><li>叉乘的长度与向量夹角的sin值有关,||axb||也等于a和b为两边的平行四边形的面积<br><a href="https://imgchr.com/i/Po5wRJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/Po5wRJ.png" alt="Po5wRJ.png"></a></li><li>由经典几何只是可以知道平行四边形的面积是bh,即底和高的乘积,通过把一段的三角形切下来移动到另一边,可以组成一个矩形</li><li><p>加入ab分别为a,b的长度,sinθ = h/a</p><pre><code>A = bh  = b(a sinθ)  = ||a|| ||b|| sinθ  = ||axb||</code></pre></li><li><p>如果a,b平行或者任意一个为0,则axb=0,叉乘对于零向量的解释: 它平行于任意其他向量,这点和点乘的解释不同,点乘的解释是和任意其他向量垂直(当然,定义零向量挥着垂直于任意向量都是不对的,因为零向量没有方向)</p></li></ul><p><a href="https://imgchr.com/i/PoIAW4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/22/PoIAW4.png" alt="PoIAW4.png"></a></p><ul><li>已经证明了axb垂直于a,b但是垂直a,b有两个方向,通过将a的头与b的尾相接,并检查从a到b是顺时针还是逆时针,能够确定axb的方向<ul><li>在左手坐标系中,如果a和b呈顺时针,那么axb指向你自己,如果呈逆时针axb远离你</li><li>在右手坐标系中,如果a和b呈顺时针恰好相反,如果a和b呈顺时针axb远离你,如果a和b呈逆时针,那么axb指向你</li></ul></li></ul><p><strong>注意:探测顺时针还是逆时针,必须让a的头与b的尾相接,a的尾跟b的尾相接是用来求向量之间的夹角,然而在决定顺时针还是逆时针,必须是头尾相接</strong></p><p>角度转弧度 π/180×角度<br>弧度变角度 180/π×弧度</p><h4 id="线性代数公式"><a href="#线性代数公式" class="headerlink" title="线性代数公式"></a>线性代数公式</h4><table><thead><tr><th style="text-align:center">公式</th><th style="text-align:center"></th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">a+b = b+a</td><td style="text-align:center"></td><td style="text-align:center">向量的加法交换律</td></tr><tr><td style="text-align:center">a-b = a+(-b)</td><td style="text-align:center"></td><td style="text-align:center">向量减法的定义</td></tr><tr><td style="text-align:center">(a+b)+c = a+(b+c)</td><td style="text-align:center"></td><td style="text-align:center">向量加法结合律</td></tr><tr><td style="text-align:center">s(ta) = (st)a</td><td style="text-align:center"></td><td style="text-align:center">标量乘法结合律</td></tr><tr><td style="text-align:center">k(a+b) = ka+kb</td><td style="text-align:center"></td><td style="text-align:center">标量乘法对向量加法分配律</td></tr><tr><td style="text-align:center">ka模 = k模a模</td><td style="text-align:center"></td><td style="text-align:center">向量乘以标量相当于以标量的绝对值为因子缩放向量</td></tr><tr><td style="text-align:center">a模 &gt;= 0</td><td style="text-align:center"></td><td style="text-align:center">向量的大小非负</td></tr><tr><td style="text-align:center">a模^2+b模^2 = (a+b)模^2</td><td style="text-align:center"></td><td style="text-align:center">勾股定理在向量加法中的应用</td></tr><tr><td style="text-align:center">a模+b模 &gt;= (a+b)模</td><td style="text-align:center"></td><td style="text-align:center">向量加法的三角形法则</td></tr><tr><td style="text-align:center">a·b = b·a</td><td style="text-align:center"></td><td style="text-align:center">点乘的交换律</td></tr><tr><td style="text-align:center">a模 = √a·a</td><td style="text-align:center"></td><td style="text-align:center">用点乘定义向量大小</td></tr><tr><td style="text-align:center">k(a·b) = (ka)·b = a·(kb)</td><td style="text-align:center"></td><td style="text-align:center">标量乘法对点乘的结合律</td></tr><tr><td style="text-align:center">a·(b+c) = a·b+a·c</td><td style="text-align:center"></td><td style="text-align:center">点乘对向量加减法的分配律</td></tr><tr><td style="text-align:center">axa = 0</td><td style="text-align:center"></td><td style="text-align:center">任意向量与自身的叉乘等于0向量</td></tr><tr><td style="text-align:center">axb = -(bxa)</td><td style="text-align:center"></td><td style="text-align:center">叉乘逆交换律</td></tr><tr><td style="text-align:center">axb = (-a)x(-b)</td><td style="text-align:center"></td><td style="text-align:center">叉乘的操作数同时变负得到相同的结果</td></tr><tr><td style="text-align:center">k(axb) = (ka)xb = ax(kb)</td><td style="text-align:center"></td><td style="text-align:center">标量乘法对叉乘的结合律</td></tr><tr><td style="text-align:center">ax(b+c) = axb+axc</td><td style="text-align:center"></td><td style="text-align:center">叉乘对向量加法的分配律</td></tr><tr><td style="text-align:center">a·(axb) = 0</td><td style="text-align:center"></td><td style="text-align:center">向量与另一向量的叉乘在点乘该向量本身等于0</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3d数学-矩阵</title>
      <link href="/2018/08/22/3d%E6%95%B0%E5%AD%A6_%E7%9F%A9%E9%98%B5/"/>
      <url>/2018/08/22/3d%E6%95%B0%E5%AD%A6_%E7%9F%A9%E9%98%B5/</url>
      <content type="html"><![CDATA[<h3 id="3d数学-矩阵"><a href="#3d数学-矩阵" class="headerlink" title="3d数学-矩阵"></a>3d数学-矩阵</h3><hr>]]></content>
      
      
        <tags>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity 鼠标类</title>
      <link href="/2018/08/12/Unity%E9%BC%A0%E6%A0%87/"/>
      <url>/2018/08/12/Unity%E9%BC%A0%E6%A0%87/</url>
      <content type="html"><![CDATA[<h3 id="Unity鼠标"><a href="#Unity鼠标" class="headerlink" title="Unity鼠标"></a>Unity鼠标</h3><hr><p>隐藏鼠标<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//隐藏光标</span></span><br><span class="line">  Cursor.visible = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//隐藏光标。当被限制时，光标的行为通常会被限制在视图中心。</span></span><br></pre></td></tr></table></figure></p><p>设置鼠标贴图<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Texture texture;</span><br><span class="line">Vector2 pos;</span><br><span class="line">Cursor.SetCursor(texture, pos, CursorMode.Auto);</span><br></pre></td></tr></table></figure></p><p>锁定鼠标<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//限制光标到游戏窗口。</span></span><br><span class="line">    Cursor.lockState = CursorLockMode.Confined;</span><br></pre></td></tr></table></figure></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CursorLockMode</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//     Cursor behavior is unmodified.</span></span><br><span class="line">      <span class="comment">//光标行为是未修改的。</span></span><br><span class="line">      None = <span class="number">0</span>,</span><br><span class="line">      <span class="comment">//     Lock cursor to the center of the game window.</span></span><br><span class="line">      <span class="comment">//锁定光标到游戏窗口的中心。</span></span><br><span class="line">      Locked = <span class="number">1</span>,</span><br><span class="line">      <span class="comment">//     Confine cursor to the game window.</span></span><br><span class="line">      <span class="comment">//限制光标到游戏窗口。</span></span><br><span class="line">      Confined = <span class="number">2</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity将bit转换为Class</title>
      <link href="/2018/08/12/Unity%E5%B0%86bit%E8%BD%AC%E6%8D%A2%E4%B8%BAClass/"/>
      <url>/2018/08/12/Unity%E5%B0%86bit%E8%BD%AC%E6%8D%A2%E4%B8%BAClass/</url>
      <content type="html"><![CDATA[<h3 id="转-Unity将bit转换为Class"><a href="#转-Unity将bit转换为Class" class="headerlink" title="(转)Unity将bit转换为Class"></a>(转)Unity将bit转换为Class</h3><p>原文链接: <a href="https://blog.csdn.net/Htlas/article/details/79714611尊重作者原创" target="_blank" rel="noopener">https://blog.csdn.net/Htlas/article/details/79714611尊重作者原创</a></p><hr><p><a href="https://imgchr.com/i/P6ixVP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6ixVP.png" alt="P6ixVP.png"></a></p><p><a href="https://imgchr.com/i/P6izUf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6izUf.png" alt="P6izUf.png"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Girl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//基本固定属性</span></span><br><span class="line">    <span class="keyword">byte</span> age;   <span class="comment">//1byte</span></span><br><span class="line">    <span class="keyword">byte</span> sex;   <span class="comment">//1byte</span></span><br><span class="line">    <span class="keyword">float</span> height;<span class="comment">//4byte</span></span><br><span class="line">    <span class="keyword">int</span> weight; <span class="comment">//4byte</span></span><br><span class="line">    <span class="keyword">short</span> threeD;<span class="comment">//2btye ——》基本长度共12Byte</span></span><br><span class="line">    <span class="comment">//长度不定属性</span></span><br><span class="line">    <span class="keyword">string</span> name;    <span class="comment">//Byte长度不定</span></span><br><span class="line">    <span class="comment">//第二个不定属性</span></span><br><span class="line">    <span class="keyword">string</span> address;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 将Gril这个类 变成一个Byte字节流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">GetNetBytes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//基本属性字节流</span></span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">12</span>];</span><br><span class="line">        <span class="comment">//自定义协议</span></span><br><span class="line">        result[<span class="number">0</span>] = <span class="keyword">this</span>.age;</span><br><span class="line">        result[<span class="number">1</span>] = <span class="keyword">this</span>.sex;</span><br><span class="line">        <span class="comment">//如何将float转换为Byte数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] heightBytes = BitConverter.GetBytes(<span class="keyword">this</span>.height);</span><br><span class="line">        Buffer.BlockCopy(heightBytes, <span class="number">0</span>, result, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] weightBytes = BitConverter.GetBytes(<span class="keyword">this</span>.weight);</span><br><span class="line">        Buffer.BlockCopy(weightBytes, <span class="number">0</span>, result, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] threeDBytes = BitConverter.GetBytes(<span class="keyword">this</span>.threeD);</span><br><span class="line">        Buffer.BlockCopy(threeDBytes, <span class="number">0</span>, result, <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 变长的string类型加入字节流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">GetNetBytesNameAddr</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//不定长string</span></span><br><span class="line">        <span class="keyword">byte</span>[] nameBytes = System.Text.Encoding.Default.GetBytes(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">byte</span>[] addrBytes = System.Text.Encoding.Default.GetBytes(<span class="keyword">this</span>.address);</span><br><span class="line">        <span class="comment">//字节流容量 = 定长+2+不定长长度</span></span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">14</span>+nameBytes.Length+addrBytes.Length];</span><br><span class="line">        <span class="comment">//获取之前12长度的字节流</span></span><br><span class="line">        <span class="keyword">byte</span>[] tmpResult = GetNetBytes();</span><br><span class="line">        <span class="comment">//将之前12长度字节流存入当前字节流</span></span><br><span class="line">        Buffer.BlockCopy(tmpResult, <span class="number">0</span>, result, <span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span> nameLength = (<span class="keyword">byte</span>)nameBytes.Length;</span><br><span class="line">        result[<span class="number">12</span>] = nameLength;</span><br><span class="line">        Buffer.BlockCopy(nameBytes, <span class="number">0</span>, result, <span class="number">13</span>, nameBytes.Length);</span><br><span class="line">        <span class="keyword">int</span> tmpLength = <span class="number">13</span> + nameBytes.Length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span> addrLength = (<span class="keyword">byte</span>)addrBytes.Length;</span><br><span class="line">        result[tmpLength] = addrLength;</span><br><span class="line">        Buffer.BlockCopy(addrBytes, <span class="number">0</span>, result, tmpLength + <span class="number">1</span>, addrBytes.Length);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 将一个字节流转换成一个Class</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetFromNet</span>(<span class="params"><span class="keyword">byte</span>[] result</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = result[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.sex = result[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.height = BitConverter.ToSingle(result, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">this</span>.weight = BitConverter.ToInt32(result, <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">this</span>.threeD = BitConverter.ToInt16(result, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = Encoding.Default.GetString(result, <span class="number">12</span>, result.Length - <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 带有string的反解析</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetFromNtAddress</span>(<span class="params"><span class="keyword">byte</span>[]result</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = result[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.sex = result[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.height = BitConverter.ToSingle(result, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">this</span>.weight = BitConverter.ToInt32(result, <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">this</span>.threeD = BitConverter.ToInt16(result, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = Encoding.Default.GetString(result, <span class="number">12</span>, result.Length - <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//name长度</span></span><br><span class="line">        <span class="keyword">byte</span> nameLength = result[<span class="number">12</span>];</span><br><span class="line">        <span class="keyword">this</span>.name = Encoding.Default.GetString(result, <span class="number">13</span>, result.Length);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">byte</span> addrLength = result[<span class="number">13</span> + nameLength];</span><br><span class="line">        <span class="keyword">this</span>.address = Encoding.Default.GetString(result, <span class="number">13</span> + <span class="number">1</span> + nameLength, addrLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity3D 运用GL屏幕画图(阴阳师画符)</title>
      <link href="/2018/08/12/GL%E5%B1%8F%E5%B9%95%E7%94%BB%E7%BA%BF%E4%BF%9D%E5%AD%98/"/>
      <url>/2018/08/12/GL%E5%B1%8F%E5%B9%95%E7%94%BB%E7%BA%BF%E4%BF%9D%E5%AD%98/</url>
      <content type="html"><![CDATA[<h3 id="转-Unity3D-运用GL屏幕画图-阴阳师画符"><a href="#转-Unity3D-运用GL屏幕画图-阴阳师画符" class="headerlink" title="(转)Unity3D 运用GL屏幕画图(阴阳师画符)"></a>(转)Unity3D 运用GL屏幕画图(阴阳师画符)</h3><p>原文链接: <a href="https://blog.csdn.net/Htlas/article/details/79759951尊重作者原创" target="_blank" rel="noopener">https://blog.csdn.net/Htlas/article/details/79759951尊重作者原创</a></p><hr><p>阴阳师火了之后，市面上很多游戏又多了一个模块——画符抽卡，可以通过使用Unity自带GL类来实现这个功能，上面一篇博客Unity研究 GL中有关于GL类的初步解析。今天直接来分析需求 看看阴阳师画符抽卡是怎么实现的：</p><font size="5">1，绘图——鼠标按下进行拖拽，在屏幕中留下鼠标轨迹。</font><br><font size="5">2，存图——松开鼠标，绘制的图片按比例映射到Texture上。</font><p>Unity的GL是通过两点之间连线来构成图像的。</p><ul><li><p>1，通过一个集合List<vector3> allPoints存储鼠标在屏幕上经过的轨迹（视图坐标系）</vector3></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 tmpView = Camera.main.ScreenToViewportPoint(Input.mousePosition);</span><br><span class="line">            allPoints.Add(tmpView);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>2，遍历集合，将集合中具有前后关系的点连接起来（点动成线）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 使用GL画线的回调</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnRenderObject</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//创建材质球</span></span><br><span class="line">        CreateLineMaterial();</span><br><span class="line">        <span class="comment">//激活第一个着色器通过（在本例中，我们知道它是唯一的通过）</span></span><br><span class="line">        lineMaterial.SetPass(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//设置正交投影</span></span><br><span class="line">        GL.LoadOrtho();</span><br><span class="line">        <span class="comment">// 开始画线  在Begin——End之间写画线方式</span></span><br><span class="line">        GL.Begin(GL.LINES);</span><br><span class="line">        GL.Color(Color.red);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; allPoints.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 tmpFront = allPoints[i - <span class="number">1</span>];</span><br><span class="line">            Vector3 tmpBack = allPoints[i];</span><br><span class="line">            GL.Vertex(tmpFront);</span><br><span class="line">            GL.Vertex(tmpBack);</span><br><span class="line">        &#125;</span><br><span class="line">        GL.End();</span><br><span class="line">        <span class="comment">//渲染出栈</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p>3，按照比例映射到图片上<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Texture</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">//像素根据比例映射图片</span></span><br><span class="line">      paintText = <span class="keyword">new</span> Texture2D(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; allPoints.Count; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          Vector3 tmpFront = allPoints[i<span class="number">-1</span>];</span><br><span class="line">          Vector3 tmpBack = allPoints[i];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">float</span> frontX = paintText.width * tmpFront.x;</span><br><span class="line">          <span class="keyword">float</span> frontY = paintText.height * tmpFront.y;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">float</span> backX = paintText.width * tmpBack.x;</span><br><span class="line">          <span class="keyword">float</span> backY = paintText.height * tmpBack.y;</span><br><span class="line">          <span class="comment">//两点之间的缝隙用插值连起来</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">int</span> tmpX =(<span class="keyword">int</span>)Mathf.Lerp(frontX, backX, j / <span class="number">100.0</span>f);</span><br><span class="line">              <span class="keyword">int</span> tmpY =(<span class="keyword">int</span>)Mathf.Lerp(frontY, backY, j / <span class="number">100.0</span>f);</span><br><span class="line">              paintText.SetPixel(tmpX, tmpY, Color.red);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//paintText.SetPixel(xx, yy, Color.red);</span></span><br><span class="line">      &#125;</span><br><span class="line">      paintText.Apply();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity计算屏幕宽高比</title>
      <link href="/2018/08/12/Unity%E8%AE%A1%E7%AE%97%E5%B1%8F%E5%B9%95%E5%AE%BD%E9%AB%98%E6%AF%94/"/>
      <url>/2018/08/12/Unity%E8%AE%A1%E7%AE%97%E5%B1%8F%E5%B9%95%E5%AE%BD%E9%AB%98%E6%AF%94/</url>
      <content type="html"><![CDATA[<h3 id="Unity计算屏幕宽高比"><a href="#Unity计算屏幕宽高比" class="headerlink" title="Unity计算屏幕宽高比"></a>Unity计算屏幕宽高比</h3><p>2d camera, unit坐标，单位换算</p><p>2d游戏可以使用平行投影的camera，这种camera需要设置size (orthographicSize)，size的含义为屏幕高度的一半，不过单位不是像素而是unit坐标，即通过pixels to units换算的坐标。例如：屏幕高度为640，pixels to units为100的情况下，orthographic size为640/2/100 = 3.2</p><p>unit坐标我理解就是一个统一化的坐标，不用担心他的实际含义，只是提供一个统一的坐标给游戏各个组成部分使用。相应的sprite的尺寸也可通过pixels to units换算成unit 坐标，并且每个sprite都可以单独设置，这等于给资源多加了一个调整的参数</p><p>设置camrea的size实际上控制了显示区域的大小，size越大，能看到的世界越大，当然世界里面的sprite会相应缩小，因为实际的屏幕就那么大。当然由于移动设备的屏幕尺寸多样，如何设置这个size就是多分辨率适配的策略了，比如设定size为某个值不变，这相当于fix height模式，由于不同屏幕宽高比不同，这会导致显示的宽度不一样，这就需要根据宽度调整显示的内容了（不过适配问题基本都是UI问题，而Unity的GUI自带了自适应的策略所以基本不是问题了，当然仍然要考虑非GUI部分的适应，比如不能让原计划一屏内显示的游戏关卡出屏被切）。再如设定一个固定的设计分辨率的宽度，然后通过宽高比来计算出camera size，这就属于fix width模式，这比较适合竖屏游戏。</p><hr><p>用于计算camera的unit单位尺寸的代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">new</span> Camera camera;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> orthographicSize;</span><br><span class="line"><span class="keyword">private</span> aspectRatio ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetResolution</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//基于iPhone4比例的单位高度</span></span><br><span class="line">    <span class="keyword">float</span> devHeight = <span class="number">9.6</span>f;</span><br><span class="line">   <span class="comment">//基于iPhone4比例的单位宽度</span></span><br><span class="line">   <span class="keyword">float</span> devWidth = <span class="number">6.4</span>f;</span><br><span class="line"></span><br><span class="line">  camera = Camera.main;</span><br><span class="line">  <span class="comment">//摄像机的尺寸</span></span><br><span class="line">  orthographic = camera.orthographicSize;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  把Projection改成Orthographic 也就是正交摄像机。 然后要说的就是size = 3.2。这个3.2是怎么来的呢？想想我们的分辨率的高是多少？</span></span><br><span class="line"><span class="comment">  高是640.  640/2/100 ＝ 3.2. 除以2就是屏幕高的一半，除//以100就是上面我们设置的 pixels to units ＝100 .</span></span><br><span class="line"><span class="comment">  再举个例子如果你开发时的分辨率是1280X720 那么此时你的高就是720了。 720/2/100 = 3.6 那么此时摄像机的size 就应该写成3.6了。。</span></span><br><span class="line"><span class="comment">  再唠叨一句，手游的分辨率自适应基本都是这样修改摄像机的size来实现的了</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//宽高比</span></span><br><span class="line">  aspectRatio = Screen.width * <span class="number">1.0</span>f / Screen.height;</span><br><span class="line"> <span class="comment">//摄像机的单位宽度</span></span><br><span class="line">  <span class="keyword">float</span> cameraHeight = orthographicSize * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">float</span> cameraWidth = cameraHeight * aspectRatio;</span><br><span class="line">  Debug.Log (<span class="string">"camera size in unit="</span> + cameraWidth + <span class="string">":"</span> + cameraHeight);<span class="comment">//宽高比</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果设备的宽度大于摄像机的宽度的时候  调整摄像机的orthographicSize</span></span><br><span class="line">    <span class="keyword">if</span> (cameraWidth &lt; devWidth)</span><br><span class="line">    &#123;</span><br><span class="line">        orthographicSize = devWidth / (<span class="number">2</span> * aspectRatio);</span><br><span class="line">        Debug.Log(<span class="string">"new orthographicSize = "</span> + orthographicSize);</span><br><span class="line">        <span class="keyword">this</span>.GetComponent&lt;Camera&gt;().orthographicSize = orthographicSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetResolution</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">float</span> heightScal = <span class="number">20</span>f;</span><br><span class="line">     <span class="keyword">float</span> widthScal = <span class="number">98</span>f;</span><br><span class="line">     <span class="keyword">int</span> screenWidth = Screen.currentResolution.width;</span><br><span class="line">     <span class="keyword">int</span> screenHeight = Screen.currentResolution.height;</span><br><span class="line">     <span class="keyword">int</span> width = Screen.width;</span><br><span class="line">     <span class="keyword">int</span> height = Screen.height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (((widthScal * height) / heightScal) &gt; screenWidth)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">int</span> h = (<span class="keyword">int</span>)((heightScal * screenWidth) / widthScal);</span><br><span class="line">         <span class="keyword">int</span> w = (<span class="keyword">int</span>)((widthScal * h) / heightScal);</span><br><span class="line">         Screen.SetResolution(w, h, <span class="literal">true</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">int</span> w = (<span class="keyword">int</span>)((widthScal * screenHeight) / heightScal);</span><br><span class="line">         <span class="keyword">int</span> h = (<span class="keyword">int</span>)((heightScal * screenWidth) / widthScal);</span><br><span class="line">         Screen.SetResolution(w, h, <span class="literal">true</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p>刘海屏幕适配参考:<br><a href="https://blog.csdn.net/xj1009420846/article/details/80731855" target="_blank" rel="noopener">https://blog.csdn.net/xj1009420846/article/details/80731855</a><br><a href="https://blog.csdn.net/xiangzhihong8/article/details/80317682" target="_blank" rel="noopener">https://blog.csdn.net/xiangzhihong8/article/details/80317682</a></p><hr><p><a href="https://blog.csdn.net/lezhi_/article/details/78827549" target="_blank" rel="noopener">https://blog.csdn.net/lezhi_/article/details/78827549</a><br><a href="https://blog.csdn.net/yy763496668/article/details/77824413" target="_blank" rel="noopener">https://blog.csdn.net/yy763496668/article/details/77824413</a><br><a href="https://blog.csdn.net/poda_/article/details/49888635" target="_blank" rel="noopener">https://blog.csdn.net/poda_/article/details/49888635</a></p><p><a href="https://blog.csdn.net/midashao/article/details/8232341" target="_blank" rel="noopener">https://blog.csdn.net/midashao/article/details/8232341</a></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity自带GL讲解</title>
      <link href="/2018/08/12/Unity%E8%87%AA%E5%B8%A6GL%E8%AE%B2%E8%A7%A3/"/>
      <url>/2018/08/12/Unity%E8%87%AA%E5%B8%A6GL%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="转-Unity自带GL讲解"><a href="#转-Unity自带GL讲解" class="headerlink" title="(转)Unity自带GL讲解"></a>(转)Unity自带GL讲解</h3><p>原文链接:<a href="http://blog.sina.com.cn/s/blog_471132920101gxzf.html尊重作者原创" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_471132920101gxzf.html尊重作者原创</a></p><hr><p>GL即Graphics Library。Low-Level Graphics Library。计算matrices，发出类似OpenGL的immediate模式的渲染指令，和其它低级图像任务。Graphic.DrawMesh()比GL更高效。</p><p>GL立即绘制函数，只用当前material的设置，除非你显示指定mat。否则mat可以是任何材质。并且GL可能会改变材质。</p><p>GL立即执行的，如果你在Update()里调用，它们将在相机渲染前执行，相机渲染将会清空屏幕，GL效果将无法看到。</p><p>通常GL用法是，在camera上贴脚本，并在OnPostRender()里执行。</p><p><strong>注意：</strong></p><ul><li><p>1、<strong>GL的线等基本图元并没有UV，所以没有贴图纹理映射的，shader里仅仅做的是单色计算或者对之前的影像加以处理。</strong></p></li><li><p>2、<strong>GL所使用的shader里必须有cull off指令，否则显示会变成如下。（如何？？？）</strong></p></li><li><p>3、<strong>如果是线，颜色是GL.Color( new Color(1,1,1,0.5f)设置颜色。如果是GL.TRIANGLES或者GL.QUADS，则颜色是shader里的颜色。</strong></p></li></ul><hr><p>方法说明：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、GL.PushMatrix()：保存Matrices至matrix stack上</span><br><span class="line"></span><br><span class="line">GL.PopMatrix()/从matrix stack上读取matrices。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、GL.LoadPixeMatrix()：改变MVP矩阵，使得transform里的xy直接对应像素，（<span class="number">0</span>，<span class="number">0</span>）表示屏幕ViewPort的左下角，z的范围是（<span class="number">-1</span>，<span class="number">1</span>），该函数改变camera的参数，所以需要GL.PushMatrix()保存和GL.PopMatrix()读取。</span><br><span class="line"></span><br><span class="line">GL.Vertex3()的取值范围从左下角的(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)到右上角的(Screen.width，Screen.height, <span class="number">0</span>)。</span><br><span class="line">使用GL.LoadPixeMatrix时，Vertex3的xy值不需要除上Screen.width和Screen.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、GL.LoadOrtho()：设置ortho perspective，即水平视角。GL.Vertex3()取值范围从左下角的(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)到右上角的(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>）即需要除上Screen.width和Screen.height。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、OnPostRender()：只有物体上有激活的相机时，才会调用该函数。当摄像机完成渲染场景后，绘制了所有物体再调用该方法。OnPostRender可以使用coroutine，加<span class="keyword">yield</span>使用</span><br><span class="line"></span><br><span class="line">WaitForEndOfFrame()：等待至所有绘制之后，在展示frame到屏幕之前，可以做截图。可以在任务物体上使用该函数。</span><br></pre></td></tr></table></figure></p><a id="more"></a><hr><h5 id="屏幕划线"><a href="#屏幕划线" class="headerlink" title="屏幕划线"></a>屏幕划线</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;  </span><br><span class="line"><span class="keyword">using</span> System.Collections;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Line</span> : <span class="title">MonoBehaviour</span>  </span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">float</span> z;</span><br><span class="line"><span class="keyword">private</span> Material mat;</span><br><span class="line"><span class="keyword">private</span> Vector3 vBeg;</span><br><span class="line"><span class="keyword">private</span> Vector3 vEnd;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IList&lt;Vector3&gt; _posList = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> _isReady = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> isReady</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">set</span>&#123; _isReady = <span class="keyword">value</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">mat = <span class="keyword">new</span> Material(<span class="string">"Shader \"Lines/Colored Blended\" &#123;"</span> +  </span><br><span class="line">                       <span class="string">"SubShader &#123; Pass &#123; "</span> +  </span><br><span class="line">                       <span class="string">"    Blend SrcAlpha OneMinusSrcAlpha "</span> +  </span><br><span class="line">                       <span class="string">"    ZWrite Off Cull Off Fog &#123; Mode Off &#125; "</span> +  </span><br><span class="line">                       <span class="string">"    BindChannels &#123;"</span> +  </span><br><span class="line">                       <span class="string">"      Bind \"vertex\", vertex Bind \"color\", color &#125;"</span> +  </span><br><span class="line">                       <span class="string">"&#125; &#125; &#125;"</span>);<span class="comment">//生成画线的材质  </span></span><br><span class="line">mat.hideFlags = HideFlags.HideAndDontSave;  </span><br><span class="line">mat.color = Color.green;</span><br><span class="line">mat.shader.hideFlags = HideFlags.HideAndDontSave;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPosList</span>(<span class="params"> <span class="keyword">ref</span> IList&lt;Vector3&gt; posList </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>( _isReady )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">_posList = posList;</span><br><span class="line"><span class="keyword">if</span>( _posList.Count &gt; <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">_isReady = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">if</span>( _isReady )  </span><br><span class="line">&#123;  </span><br><span class="line">vBeg = camera.WorldToScreenPoint( panelFullMap.instance.mainPlayer.position );</span><br><span class="line">vEnd = camera.WorldToScreenPoint( _posList[<span class="number">0</span>] );</span><br><span class="line">GL.PushMatrix(); <span class="comment">//保存当前Matirx</span></span><br><span class="line">mat.SetPass(<span class="number">0</span>); <span class="comment">//刷新当前材质</span></span><br><span class="line">GL.LoadOrtho();<span class="comment">//设置pixelMatrix</span></span><br><span class="line">GL.Color(Color.yellow);</span><br><span class="line">GL.Begin(GL.LINES);</span><br><span class="line">GL.Vertex3( vBeg.x/Screen.width, vBeg.y/Screen.height, z );  </span><br><span class="line">GL.Vertex3( vEnd.x/Screen.width, vEnd.y/Screen.height, z );</span><br><span class="line">GL.End();</span><br><span class="line">GL.PopMatrix();<span class="comment">//读取之前的Matrix</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _posList.Count - <span class="number">1</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">vBeg = camera.WorldToScreenPoint( _posList[i] );</span><br><span class="line">vEnd = camera.WorldToScreenPoint( _posList[i+<span class="number">1</span>] );</span><br><span class="line">GL.PushMatrix();  </span><br><span class="line">mat.SetPass(<span class="number">0</span>);  </span><br><span class="line">GL.LoadOrtho();  </span><br><span class="line"><span class="comment">//GL.LoadPixelMatrix();</span></span><br><span class="line">GL.Begin(GL.LINES);  </span><br><span class="line">GL.Color(Color.green);  </span><br><span class="line"></span><br><span class="line">GL.Vertex3( vBeg.x/Screen.width, vBeg.y/Screen.height, z );  </span><br><span class="line">GL.Vertex3( vEnd.x/Screen.width, vEnd.y/Screen.height, z );</span><br><span class="line"><span class="comment">//GL.Vertex3( vBeg.x, vBeg.y, 0 );  </span></span><br><span class="line"><span class="comment">//GL.Vertex3( vEnd.x, vEnd.y, 0 );  </span></span><br><span class="line"></span><br><span class="line">GL.End();  </span><br><span class="line">GL.PopMatrix();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScreenShot</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StartCoroutine(UploadPNG() );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IEnumerator <span class="title">UploadPNG</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForEndOfFrame</span>(<span class="params"></span>)</span>;</span><br><span class="line">print (<span class="string">"yuuuuu"</span>);</span><br><span class="line"><span class="keyword">int</span> width = Screen.width;</span><br><span class="line"><span class="keyword">int</span> height = Screen.height;</span><br><span class="line">Texture2D tex = <span class="keyword">new</span> Texture2D(width, height, TextureFormat.RGB24, <span class="literal">false</span>);</span><br><span class="line">tex.ReadPixels(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, height), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">tex.Apply();</span><br><span class="line"><span class="keyword">byte</span>[] bytes = tex.EncodeToPNG();</span><br><span class="line">File.WriteAllBytes(Application.dataPath+<span class="string">"/ss.png"</span>,bytes);</span><br><span class="line">UnityEditor.AssetDatabase.Refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="展示Alpha"><a href="#展示Alpha" class="headerlink" title="展示Alpha"></a>展示Alpha</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GLTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> Shader shader;</span><br><span class="line"><span class="keyword">public</span> Texture2D t2d;</span><br><span class="line"><span class="keyword">private</span> Material mat;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mat = <span class="keyword">new</span> Material(shader);</span><br><span class="line">mat.mainTexture = t2d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!mat)</span><br><span class="line">&#123;</span><br><span class="line">Debug.LogError(<span class="string">"Please Assign a material on the inspector"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">GL.PushMatrix();</span><br><span class="line">mat.SetPass(<span class="number">0</span>);</span><br><span class="line">GL.LoadOrtho();</span><br><span class="line">GL.Begin(GL.QUADS);</span><br><span class="line">GL.Vertex3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>F);</span><br><span class="line">GL.Vertex3(<span class="number">1</span>f, <span class="number">0</span>, <span class="number">0.1</span>F);</span><br><span class="line">GL.Vertex3(<span class="number">1</span>f, <span class="number">1</span>, <span class="number">0.1</span>F);</span><br><span class="line">GL.Vertex3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.1</span>F);</span><br><span class="line">GL.End();</span><br><span class="line">GL.PopMatrix();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Shader <span class="string">"Custom/GLDrawLine"</span></span><br><span class="line">&#123;</span><br><span class="line">Properties &#123;</span><br><span class="line">_MainTex (<span class="string">"Base (RGB)"</span>, <span class="number">2</span>D) = <span class="string">"white"</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">SubShader</span><br><span class="line">&#123;</span><br><span class="line">Pass</span><br><span class="line">&#123;</span><br><span class="line">Cull off</span><br><span class="line">Blend DstAlpha zero</span><br><span class="line">Color(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GL图像库</title>
      <link href="/2018/08/12/GL%E5%BA%93/"/>
      <url>/2018/08/12/GL%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="转-GL图像库"><a href="#转-GL图像库" class="headerlink" title="(转)GL图像库"></a>(转)GL图像库</h3><p>原文链接: <a href="http://pepe.cnblogs.com/尊重作者原创" target="_blank" rel="noopener">http://pepe.cnblogs.com/尊重作者原创</a></p><hr><ul><li><p>1、绘制2D图像的时需要使用GL.LoadOrtho()方法来将图形映射到平面中。</p></li><li><p>2、所有绘制相关的内容都要写在OnPostRender()方法中。</p></li><li><p>3、有关GL图像库的脚本需要绑定到Hierarchy视图中Camera上，否则无法显示绘制的图像。</p></li><li><p>4、在GL图像库的平面坐标系中，每个点的横坐标和纵坐标都应当是0与1之间的浮点数，而真实的像素坐标需要根据这个浮点数来计算</p></li></ul><hr><h4 id="一-绘制线"><a href="#一-绘制线" class="headerlink" title="一.绘制线"></a>一.绘制线</h4><p>别忘了添加物理材质public Material material;<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> GL 图像库</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 1、GL图像库是底层的图像库，主要功能是使用程序来绘制常见的2D与3D几何图形。这些图形</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 具有一定的特殊性，它们不属于3D网格图形，只会以面的形式渲染</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 2、绘制2D图像时，需要使用GL.LoadOrtho()方法来将图形映射在平面中，绘制的是3D图形，就无须使用此方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 3、使用GL图像库时，需要将所有绘制相关的内容写在OnPostRender()方法中</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">public class _7_5 : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 绘制线段的材质</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Material material;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!material)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">"请给材质资源赋值"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        material.SetPass(<span class="number">0</span>);<span class="comment">//设置该材质通道，0为默认值</span></span><br><span class="line">        GL.LoadOrtho();<span class="comment">//设置绘制2D图像</span></span><br><span class="line">        GL.Begin(GL.LINES);<span class="comment">//表示开始绘制，绘制类型为线段</span></span><br><span class="line">        DrawLine(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">100</span>);<span class="comment">//绘制线段0</span></span><br><span class="line">        DrawLine(<span class="number">0</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>);<span class="comment">//绘制线段1</span></span><br><span class="line">        DrawLine(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);<span class="comment">//绘制线段2</span></span><br><span class="line">        GL.End();<span class="comment">//结束绘制</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawLine</span>(<span class="params"><span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//绘制线段，需要将屏幕中某个点的像素坐标除以屏幕宽或高</span></span><br><span class="line">        GL.Vertex(<span class="keyword">new</span> Vector3(x1 / Screen.width, y1 / Screen.height, <span class="number">0</span>));<span class="comment">// ['vɜ:teks] n. 最高点；顶点；&lt;数&gt;（三角形、圆锥体等与底相对的）顶；</span></span><br><span class="line">        GL.Vertex(<span class="keyword">new</span> Vector3(x2 / Screen.width, y2 / Screen.height, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><hr><h4 id="二、绘制曲线"><a href="#二、绘制曲线" class="headerlink" title="二、绘制曲线"></a>二、绘制曲线</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绘制曲线</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">public class _7_5_1 : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 绘制线段材质</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Material material;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Vector3&gt; lineInfo;</span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//初始化鼠标线段链表</span></span><br><span class="line">        lineInfo = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//将每次鼠标改变的位置存储进链表</span></span><br><span class="line">        lineInfo.Add(Input.mousePosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GUILayout.Label(<span class="string">"当前鼠标x轴位置"</span> + Input.mousePosition.x);</span><br><span class="line">        GUILayout.Label(<span class="string">"当前鼠标y轴位置"</span> + Input.mousePosition.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!material)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"请给材质资源赋值"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        material.SetPass(<span class="number">0</span>);<span class="comment">//设置该材质通道，0为默认值</span></span><br><span class="line">        GL.LoadOrtho();<span class="comment">//设置绘制2D图像</span></span><br><span class="line">        GL.Begin(GL.LINES);<span class="comment">//表示开始绘制，绘制类型为线段</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineInfo.Count - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 start = lineInfo[i];</span><br><span class="line">            Vector3 end = lineInfo[i + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//绘制线段</span></span><br><span class="line">            DrawLine(start.x, start.y, end.x, end.y);</span><br><span class="line">        &#125;</span><br><span class="line">        GL.End();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 绘制线段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x1"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y1"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x2"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y2"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawLine</span>(<span class="params"><span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//绘制线段，需要将屏幕中某个点的像素坐标点除以屏幕宽或高</span></span><br><span class="line">        GL.Vertex(<span class="keyword">new</span> Vector3(x1 / Screen.width, y1 / Screen.height, <span class="number">0</span>));<span class="comment">// [ˈvɜ:ˌteks] 最高点；顶点</span></span><br><span class="line">        GL.Vertex(<span class="keyword">new</span> Vector3(x2 / Screen.width, y2 / Screen.height, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="三、绘制四边形"><a href="#三、绘制四边形" class="headerlink" title="三、绘制四边形"></a>三、绘制四边形</h4><p>绘制四边形，需要使用GL.Begin(GL.QUADS)方法<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line">public class _7_5_3 : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 可用材质0</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Material material0;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 可用材质1</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Material material1;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 可用材质2</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Material material2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//绘制正四边形</span></span><br><span class="line">        DrawRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, material0);</span><br><span class="line">        DrawRect(<span class="number">250</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, material1);</span><br><span class="line">        <span class="comment">//绘制无规则四边形</span></span><br><span class="line">        DrawQuads(<span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">110</span>, <span class="number">90</span>, <span class="number">10</span>, material2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 绘制正四边形</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x"&gt;</span>x轴起始坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y"&gt;</span>y轴起始坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="width"&gt;</span>正四边形的宽<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="height"&gt;</span>正四边形的高<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="material"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawRect</span>(<span class="params"><span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> width, <span class="keyword">float</span> height, Material material</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GL.PushMatrix();   <span class="comment">// [ˈmeɪtrɪks]n. &lt;数&gt;矩阵；模型；基质；母体，子宫</span></span><br><span class="line">        material.SetPass(<span class="number">0</span>);</span><br><span class="line">        GL.LoadOrtho();</span><br><span class="line">        GL.Begin(GL.QUADS);<span class="comment">//绘制类型为四边形</span></span><br><span class="line">        GL.Vertex3(x / Screen.width, y / Screen.height, <span class="number">0</span>);<span class="comment">//['vɜ:teks] n. 最高点；顶点</span></span><br><span class="line">        GL.Vertex3(x / Screen.width, (y + height) / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3((x + width) / Screen.width, (y + height) / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3((x + width) / Screen.width, y / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.End();</span><br><span class="line">        GL.PopMatrix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 绘制无规则的四边形</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x1"&gt;</span>起始点1的横坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y1"&gt;</span>起始点1的纵坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x2"&gt;</span>起始点2的横坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y2"&gt;</span>起始点2的纵坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x3"&gt;</span>起始点3的横坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y3"&gt;</span>起始点3的纵坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x3"&gt;</span>起始点4的横坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y3"&gt;</span>起始点4的纵坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="material"&gt;</span>material<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawQuads</span>(<span class="params"><span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2, <span class="keyword">float</span> x3, <span class="keyword">float</span> y3, <span class="keyword">float</span> x4, <span class="keyword">float</span> y4, Material material</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GL.PushMatrix();</span><br><span class="line">        material.SetPass(<span class="number">0</span>);</span><br><span class="line">        GL.LoadOrtho();</span><br><span class="line">        GL.Begin(GL.QUADS);<span class="comment">//绘制类型为四边形</span></span><br><span class="line">        GL.Vertex3(x1 / Screen.width, y1 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x2 / Screen.width, y2 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x3 / Screen.width, y3 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x4 / Screen.width, y4 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.End();</span><br><span class="line">        GL.PopMatrix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="四、绘制三角形"><a href="#四、绘制三角形" class="headerlink" title="四、绘制三角形"></a>四、绘制三角形</h4><p>使用GL.Begin(GL.TRIANGLE)方法,参数为三角形的类型。[‘traɪæŋɡl]n. 三角形；三人一组；三角铁；三角板<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绘制三角形</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 使用GL.Vertex3()方法确定三角形三个顶点的位置，并将绘制三角形</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>的所有方法封装在DrawTriangle()方法中，最后使用GL.End()方法将三角形显示在屏幕中。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>需要说明的是，在调用DrawTriangle()方法时，需要将三个点的坐标与材质传入该方法。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">public class _7_5_4 : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 材质</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Material material;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//绘制三角形</span></span><br><span class="line">        DrawTriangle(<span class="number">100</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, material);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>绘制三角形</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>Triangle n. 三角形；三人一组['traɪæŋɡl]</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawTriangle</span>(<span class="params"><span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2, <span class="keyword">float</span> x3, <span class="keyword">float</span> y3, Material material</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        material.SetPass(<span class="number">0</span>);</span><br><span class="line">        GL.LoadOrtho();</span><br><span class="line">        GL.Begin(GL.TRIANGLES);<span class="comment">//绘制三角形</span></span><br><span class="line">        GL.Vertex3(x1 / Screen.width, y1 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x2 / Screen.width, y2 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x3 / Screen.width, y3 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.End();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="五、绘制3D几何图形"><a href="#五、绘制3D几何图形" class="headerlink" title="五、绘制3D几何图形"></a>五、绘制3D几何图形</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绘制 3D几何图形</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">public class _7_5_5 : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 材质</span></span><br><span class="line">    <span class="keyword">public</span> Material material0;</span><br><span class="line">    <span class="keyword">public</span> Material material1;</span><br><span class="line">    <span class="keyword">public</span> Material material2;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//绘制正四边形</span></span><br><span class="line">        DrawRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, material0);</span><br><span class="line">        DrawRect(<span class="number">250</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, material1);</span><br><span class="line">        <span class="comment">//绘制无规则四边形</span></span><br><span class="line">        DrawQuads(<span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">110</span>, <span class="number">90</span>, <span class="number">10</span>, material2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 绘制正四边形</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x"&gt;</span>x轴起始坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y"&gt;</span>y轴起始坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="width"&gt;</span>正四边形的宽<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="height"&gt;</span>正四边形的高<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="material"&gt;</span>material<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawRect</span>(<span class="params"><span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> width, <span class="keyword">float</span> height, Material material</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GL.PushMatrix();</span><br><span class="line">        material.SetPass(<span class="number">0</span>);</span><br><span class="line">        GL.Begin(GL.QUADS);<span class="comment">//四边形</span></span><br><span class="line">        GL.Vertex3(x / Screen.width, y / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x / Screen.width, (y + height) / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3((x + width) / Screen.width, (y + height) / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x / Screen.width, (y + height) / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.End();</span><br><span class="line">        GL.PopMatrix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 绘制无规则四边形</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x1"&gt;</span>起始点1的横坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y1"&gt;</span>起始点1的纵坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x2"&gt;</span>起始点2的横坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y2"&gt;</span>起始点2的纵坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x3"&gt;</span>起始点3的横坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y3"&gt;</span>起始点3的纵坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="x4"&gt;</span>起始点4的横坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="y4"&gt;</span>起始点4的纵坐标<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="material"&gt;</span>material<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawQuads</span>(<span class="params"><span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2, <span class="keyword">float</span> x3, <span class="keyword">float</span> y3, <span class="keyword">float</span> x4, <span class="keyword">float</span> y4,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Material material</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GL.PushMatrix();<span class="comment">//[ˈmeɪtrɪks] n. &lt;数&gt;矩阵；模型；基质；母体，子宫</span></span><br><span class="line">        material.SetPass(<span class="number">0</span>);</span><br><span class="line">        GL.Begin(GL.QUADS);</span><br><span class="line">        GL.Vertex3(x1 / Screen.width, y1 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x2 / Screen.width, y2 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x3 / Screen.width, y3 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(x4 / Screen.width, y4 / Screen.height, <span class="number">0</span>);</span><br><span class="line">        GL.End();</span><br><span class="line">        GL.PopMatrix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="六、绘制线"><a href="#六、绘制线" class="headerlink" title="六、绘制线"></a>六、绘制线</h4><p>　任何一个模型都由若干网格面组成，而每一个面又由若干个三角形组成，也就是说，模型是由若干个三角形面组成的<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line">public class _7_5_7 : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 构成三角形1的三个顶点位置</span></span><br><span class="line">    Vector3 v0 = <span class="keyword">new</span> Vector3(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    Vector3 v1 = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    Vector3 v2 = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">    <span class="comment">//构成三角形2的三个顶点位置</span></span><br><span class="line">    Vector3 v3 = <span class="keyword">new</span> Vector3(<span class="number">-5</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    Vector3 v4 = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">-5</span>, <span class="number">0</span>);</span><br><span class="line">    Vector3 v5 = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-5</span>);</span><br><span class="line">    <span class="comment">//构成三角形1的贴图比例</span></span><br><span class="line">    Vector2 u0 = <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    Vector2 u1 = <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    Vector2 u2 = <span class="keyword">new</span> Vector2(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//构成三角形2的贴图比例</span></span><br><span class="line">    Vector2 u3 = <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    Vector2 u4 = <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    Vector2 u5 = <span class="keyword">new</span> Vector2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//得到网格渲染器对象</span></span><br><span class="line">        MeshFilter meshFilter = (MeshFilter)GameObject.Find(<span class="string">"face"</span>).GetComponent(<span class="keyword">typeof</span>(MeshFilter));</span><br><span class="line">        Mesh mesh = meshFilter.mesh; <span class="comment">//通过渲染器对象得到网格对象</span></span><br><span class="line">        mesh.vertices = <span class="keyword">new</span> Vector3[] &#123; v0, v1, v2, v3, v4, v5 &#125;;<span class="comment">// n. 至高点，头顶；最高点( vertex的名词复数 )；[ˈvə:tisi:z]</span></span><br><span class="line">        mesh.uv = <span class="keyword">new</span> Vector2[] &#123; v0, v1, v2, v3, v4, v5 &#125;;<span class="comment">//设置三角形面上的贴图比例</span></span><br><span class="line">        mesh.triangles = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;<span class="comment">//[t'raɪæŋɡlz] n. 三角形( triangle的名词复数 )；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于unity3D的GL图像库的使用</title>
      <link href="/2018/08/12/%E5%85%B3%E4%BA%8Eunity3D%E7%9A%84GL%E5%9B%BE%E5%83%8F%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/12/%E5%85%B3%E4%BA%8Eunity3D%E7%9A%84GL%E5%9B%BE%E5%83%8F%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="转-关于unity3D的GL图像库的使用"><a href="#转-关于unity3D的GL图像库的使用" class="headerlink" title="(转)关于unity3D的GL图像库的使用"></a>(转)关于unity3D的GL图像库的使用</h3><p>原文链接: <a href="https://www.cnblogs.com/JLZT1223/p/6094404.html尊重作者原创" target="_blank" rel="noopener">https://www.cnblogs.com/JLZT1223/p/6094404.html尊重作者原创</a></p><hr><h4 id="GL图象库"><a href="#GL图象库" class="headerlink" title="GL图象库"></a>GL图象库</h4><p>GL图象库是底层的图象库，主要功能是使用程序来绘制常见的2D与3D几何图形。这些图形具有一定的特殊性，他们不属于3D网格图形，<br>只会以面的形式渲染。使用GL图象库，可在屏幕中绘制2D几何图形，并且该几何图形将永远显示在屏幕当中，不会因为摄象机的移动而<br>改变。2D图形的呈现方式和前面章节介绍的GUI有点类似，值得注意的是，绘制2D图像时，需要使用GL.LoadOrtho()方法将图形映射在<br>平面中；如果绘制的是3D图形，就无须使用此方法。  </p><p>使用GL图象库时，需要将所有绘制相关的内容写在OnPostRender()方法中。此方法由系统自身调用，无法手动调用。此外，有关GL图象<br>库的脚本需要绑定在Hierarchy视图中的摄象机对象当中，否则将无法显示绘制的图形<br>绘制线   </p><p>在了解如何绘制线之前，先熟悉Unity中GL图象库的平面坐标系。按照箭头所指的方向，平面坐标系的原点（0，0）位于左下脚。<br>值得注意的是，GL图象库的平面坐标和普通坐标是有区别的，GL图象库的x轴的最大值是1，y轴的最大值也为1，而不是按照像素<br>来计算的，因此，在GL图象库的平面坐标系中，每个点的横坐标和纵坐标都应当是0与1之间的浮点数，而真实的像素坐标需要根据这<br>个浮点数来计算。  </p><p>比如当前游戏屏幕的像素宽高是500<em>500，在GL图象库平面上选择一个点(0.5f,0.5f),那么这个点的真实像素的横坐标和纵坐标应<br>当是：500（屏幕宽） </em> 0.5（x坐标） = 250<br>500（屏幕高）* 0.5（x坐标） = 250</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Script</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//绘制线段材质</span></span><br><span class="line"><span class="keyword">public</span> Material material;</span><br><span class="line"><span class="comment">//此绘制方法由系统调用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!material)</span><br><span class="line">&#123;</span><br><span class="line">Debug.LogError(“请给材质资源赋值”);</span><br><span class="line">Return;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置该材质通道，0为默认值</span></span><br><span class="line">Material.SetPass(<span class="number">0</span>);</span><br><span class="line">GL.LoadOrtho();</span><br><span class="line"><span class="comment">//表示开始绘制，绘制类型为线段</span></span><br><span class="line">GL.Begin(GL.LINES);</span><br><span class="line"><span class="comment">//绘制线段</span></span><br><span class="line">DrawLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">DrawLine(<span class="number">0</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">DrawLine(<span class="number">0</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">GL.End();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawLine</span>(<span class="params"><span class="keyword">float</span> x1,<span class="keyword">float</span> y1;<span class="keyword">float</span> x2,<span class="keyword">float</span> y2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绘制线段，需要将屏幕中某个点的像素坐标点除以屏幕完成宽或高</span></span><br><span class="line">GL.Vetex(<span class="keyword">new</span> Vector3(x1/Screen.width,y1/Screen.height,<span class="number">0</span>));</span><br><span class="line">GL.Vetex(<span class="keyword">new</span> Vector3(x2/Screen.width,y2/Screen.height,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h4 id="实例—-绘制曲线-228"><a href="#实例—-绘制曲线-228" class="headerlink" title="实例—-绘制曲线(228)"></a>实例—-绘制曲线(228)</h4><p>本例通过GL图象库记录鼠标移动的轨迹并且将其以曲线的形式显示在屏幕当中，如图所示，具体实现原理是：记录鼠标在Game视图中移动<br>时每一点的坐标,然后将鼠标移动的坐标存储在链表中使用绘制方法OnPostRender()遍历链表中记录的鼠标坐标点，最后通过GL图象库<br>绘制线段的方法将这些点两两连成一条线段<br>当前鼠标x轴位置：835<br>当前鼠标y轴位置：894</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Script</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//绘制线段材质</span></span><br><span class="line"><span class="keyword">public</span> Material material;</span><br><span class="line">Private List&lt;Vector&gt; lineInfo;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化鼠标线段链表</span></span><br><span class="line">lineInfo = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//将每次鼠标改变的位置存储进链表</span></span><br><span class="line">lineInfo.Add(Input.mousePosition);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GUILayout.Label(“当前鼠标x轴位置：” +Input.mousePosition.x)</span><br><span class="line">GUILayout.Label(“当前鼠标y轴位置：”+Input.mousePosition.y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此绘制方法又系统调用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!material)</span><br><span class="line">&#123;</span><br><span class="line">Debug.LogError(“请给材质资源赋值”);</span><br><span class="line">Return;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置该材质通道，0为默认值</span></span><br><span class="line">material.SetPass(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置绘制2D图象</span></span><br><span class="line">GL.LoadOrtho();</span><br><span class="line"><span class="comment">//表示开始绘制，绘制类型为线段</span></span><br><span class="line">GL.Begin(GL.LINES);</span><br><span class="line"><span class="comment">//得到鼠标信息的总数量</span></span><br><span class="line"><span class="keyword">int</span> size=lineInfo.Count;</span><br><span class="line"><span class="comment">//遍历鼠标点的链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">Vector3 start = lineInfo[i];</span><br><span class="line">Vector3 end = lineInfo[i+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//绘制线段</span></span><br><span class="line">DrawLine(start.x,start.y,end.x,end.y);</span><br><span class="line"><span class="comment">//结束绘制</span></span><br><span class="line">GL.End();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawLine</span>(<span class="params"><span class="keyword">float</span> x1,<span class="keyword">float</span> y1;<span class="keyword">float</span> x2,<span class="keyword">float</span> y2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绘制线段，需要将屏幕中某个点的像素坐标点除以屏幕完成宽或高</span></span><br><span class="line">GL.Vetex(<span class="keyword">new</span> Vector(x1/Screen.width,y1/Screen.height,<span class="number">0</span>));</span><br><span class="line">GL.Vetex(<span class="keyword">new</span> Vector(x2/Screen.width,y2/Screen.height,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们通过Update()方法获取当前鼠标的位置，将每帧的鼠标位置存储在lineInfo链表中，然后在OnPostRender()中遍历<br>这个链表，将链表中记录的鼠标坐标点连接起来绘制在屏幕当中。<br>绘制四边形  </p><p>在平面内，由不在同一条直线的四条线段首尾顺序相接组成的图形就是四边形。要确定平面中的一个四边形，就需要知道4个点，然后将<br>这4个点连接起来即可。在GL中绘制四边形，需要使用GL.Begin(GL.QUADS)方法，该方法中参数表示需要绘制的图形为四边形。如果设置<br>的4个点在一条直线上，或者只设置了其中3个点，或者两个点重叠，无法让这4个点构成一个四边形，程序就无法绘制该图形，这里需要<br>读者注意.</p><hr><p>本例共绘制了三组几何图形——两个正四边形和一个无规则四边形<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Script</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> Material mat0;</span><br><span class="line"><span class="keyword">public</span> Material mat1;</span><br><span class="line"><span class="keyword">public</span> Material mat3;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绘制正四边形</span></span><br><span class="line">DrawRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,mat0);</span><br><span class="line">DrawRect(<span class="number">250</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,mat1);</span><br><span class="line"><span class="comment">//绘制无规则四边形</span></span><br><span class="line">DrawQiads(<span class="number">15</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">110</span>,<span class="number">90</span>,<span class="number">10</span>,mat3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">绘制正四边形</span></span><br><span class="line"><span class="comment">float x:x轴起始坐标</span></span><br><span class="line"><span class="comment">float y:y轴起始坐标</span></span><br><span class="line"><span class="comment">float width:正四边形的宽</span></span><br><span class="line"><span class="comment">float height:正四边形的高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawRect</span>(<span class="params"><span class="keyword">float</span> x,<span class="keyword">float</span> y,<span class="keyword">float</span> width,<span class="keyword">float</span> height,Material mat</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GL.PushMatrix();</span><br><span class="line">mat.SetPass(<span class="number">0</span>);</span><br><span class="line">GL.LoadOrtho();</span><br><span class="line"><span class="comment">//绘制类型为四边形</span></span><br><span class="line">GL.Begin(GL.QUADS);</span><br><span class="line">GL.Vertex3(x/Screen.width,y/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x/Screen.width,(y+height)/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x+width)/Screen.width,(y+height)/Screen.height,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">GL.End();</span><br><span class="line">GL.PopMatrix();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">绘制无规则的四边形</span></span><br><span class="line"><span class="comment">float x1:起始点1的横坐标</span></span><br><span class="line"><span class="comment">float y1:起始点1的横坐标</span></span><br><span class="line"><span class="comment">float x2:起始点2的横坐标</span></span><br><span class="line"><span class="comment">float y2:起始点2的横坐标</span></span><br><span class="line"><span class="comment">float x3:起始点3的横坐标</span></span><br><span class="line"><span class="comment">float y3:起始点3的横坐标</span></span><br><span class="line"><span class="comment">float x4:起始点4的横坐标</span></span><br><span class="line"><span class="comment">float y4:起始点4的横坐标</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawQuads</span>(<span class="params"><span class="keyword">float</span> x1,<span class="keyword">float</span> y1,<span class="keyword">float</span> x2,<span class="keyword">float</span> y2,<span class="keyword">float</span> x3,<span class="keyword">float</span> y3,<span class="keyword">float</span> x4,<span class="keyword">float</span> y4,Material mat</span>)</span></span><br><span class="line"><span class="function"></span>&#123;GL.PushMatrix();</span><br><span class="line">mat.SetPass(<span class="number">0</span>);</span><br><span class="line">GL.LoadOrtho();</span><br><span class="line"><span class="comment">//绘制类型为四边形</span></span><br><span class="line">GL.Begin(GL.QUADS);</span><br><span class="line">GL.Vertex3(x1/Screen.width,y1/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x2/Screen.width,y2/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x3/Screen.width,y3/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x4/Screen.width,y4/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.End();</span><br><span class="line">GL.PopMatrix();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>为了说明正四边形和无规则四边形之间的区别,本例将它们封装成两个不同的方法,其中DrawRect()方法用于绘制无规则四边形。    </p><p>在上述代码的最后，我们使用GL.End()方法绘制的四边形显示在屏幕中。</p><hr><h4 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h4><p>绘制三角形之前，需要确定平面中的3个点，并且保证这3个点能构成一个三角形，然后将3个点首尾连接起来即可。绘制三角形时，<br>可以使用GL.Begin(GL.TRIANGLE)方法,该方法的参数为三角形的类型.本例在屏幕中央绘制了一个正三角形,具体代码如代码清单<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Script</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//材质</span></span><br><span class="line"><span class="keyword">public</span> Material mat;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绘制三角形</span></span><br><span class="line">DrawTriangle(<span class="number">100</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,mat);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawTriangle</span>(<span class="params"><span class="keyword">float</span> x1,<span class="keyword">float</span> y1,<span class="keyword">float</span> x2,<span class="keyword">float</span> y2,<span class="keyword">float</span> x3,<span class="keyword">float</span> y3,Material mat</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mat.SetPass(<span class="number">0</span>);</span><br><span class="line">GL.LoadOrtho();</span><br><span class="line"><span class="comment">//绘制三角形</span></span><br><span class="line">GL.Begin(GL.TRAINGLES);</span><br><span class="line">GL.Vertex3(x1/Screen.width,y1/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x2/Screen.width,y2/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x3/Screen.width,y3/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.End();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>在上述代码中，我们使用 GL.Vertex3() 方法确定三角形三个顶点的位置,并将绘制三角形的所有方法封装在 DrawTriangle() 方法中，最后使用GL.End()方法将三角形显示在屏幕中。需要说明的是，在调用DrawTriangle()方法时，需要将三个点的坐标与材质传入该方法。    </p><p>绘制3D几何图形<br>GL图形库不仅支持绘制2D几何图形，还支持绘制3D几何图形，而本例将在3D世界中绘制三个平面四边形，如图7-17所示，<br>为了让读者更方便看出立体效果，我们在Game视图中添加了一个立方体组件作为视图的参照物。通过随时移动鼠标来修改摄像机朝向<br>的位置，可以观察它们之间的区别。圆圈内就是使用GL绘制的图形，它会随着摄像机的位置改变而发生移动，<br>具体的代码如代码清单7-19所示</p><p>####立方图形<br>代码7-19<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Script</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> Material mat0;</span><br><span class="line"><span class="keyword">public</span> Material mat1;</span><br><span class="line"><span class="keyword">public</span> Material mat3;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//绘制正四边形</span></span><br><span class="line">DrawRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,mat0);</span><br><span class="line">DrawRect(<span class="number">250</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,mat1);</span><br><span class="line"><span class="comment">//绘制无规则四边形</span></span><br><span class="line">DrawQuads(<span class="number">15</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">110</span>,<span class="number">90</span>,<span class="number">10</span>,mat3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">绘制正四边形</span></span><br><span class="line"><span class="comment">float x:x轴起始坐标</span></span><br><span class="line"><span class="comment">float y:y轴起始坐标</span></span><br><span class="line"><span class="comment">float width:正四边形的宽</span></span><br><span class="line"><span class="comment">float height:正四边形的高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawRect</span>(<span class="params"><span class="keyword">float</span> x,<span class="keyword">float</span> y,<span class="keyword">float</span> width,<span class="keyword">float</span> height,Material mat</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GL.PushMatrix();</span><br><span class="line">mat.SetPass(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//绘制类型为四边形</span></span><br><span class="line">GL.Begin(GL.QUADS);</span><br><span class="line">GL.Vertex3(x/Screen.width,y/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x/Screen.width,(y+height)/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x+width)/Screen.width,(y+height)/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x+width)/Screen.width, y/Screen.height,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">GL.End();</span><br><span class="line">GL.PopMatrix();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">绘制无规则的四边形</span></span><br><span class="line"><span class="comment">float x1:起始点1的横坐标</span></span><br><span class="line"><span class="comment">float y1:起始点1的横坐标</span></span><br><span class="line"><span class="comment">float x2:起始点2的横坐标</span></span><br><span class="line"><span class="comment">float y2:起始点2的横坐标</span></span><br><span class="line"><span class="comment">float x3:起始点3的横坐标</span></span><br><span class="line"><span class="comment">float y3:起始点3的横坐标</span></span><br><span class="line"><span class="comment">float x4:起始点4的横坐标</span></span><br><span class="line"><span class="comment">float y4:起始点4的横坐标</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawQuads</span>(<span class="params"><span class="keyword">float</span> x1,<span class="keyword">float</span> y1,<span class="keyword">float</span> x2,<span class="keyword">float</span> y2,<span class="keyword">float</span> x3,<span class="keyword">float</span> y3,<span class="keyword">float</span> x4,<span class="keyword">float</span> y4,Material mat</span>)</span></span><br><span class="line"><span class="function"></span>&#123;GL.PushMatrix();</span><br><span class="line">mat.SetPass(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//绘制类型为四边形</span></span><br><span class="line">GL.Begin(GL.QUADS);</span><br><span class="line">GL.Vertex3(x1/Screen.width,y1/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x2/Screen.width,y2/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x3/Screen.width,y3/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.Vertex3(x4/Screen.width,y4/Screen.height,<span class="number">0</span>);</span><br><span class="line">GL.End();</span><br><span class="line">GL.PopMatrix();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>在绘制四边形时，首先需要使用GL.Begin(GL.QUADS)方法设定渲染模型的类型为四边形，然后使用GL.Vertex3()设置<br>四边形每个点的坐标，最后使用GL.Eng() 方法将四边形渲染在屏幕当中移动摄像机的代码.<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">MoveCamera.cs</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoveCamera</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//摄像机参照的模型</span></span><br><span class="line"><span class="keyword">public</span> Transform target;</span><br><span class="line"><span class="comment">//摄像机距离模型的默认距离</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> distance = <span class="number">2.0</span>f;</span><br><span class="line"><span class="comment">//鼠标在x轴和y轴方向移动的角度</span></span><br><span class="line"><span class="keyword">float</span> x;</span><br><span class="line"><span class="keyword">float</span> y;</span><br><span class="line"><span class="comment">//限制旋转角度的最小值与最大值</span></span><br><span class="line"><span class="keyword">float</span> yMinLimit=<span class="number">-20.0</span>f</span><br><span class="line"><span class="keyword">float</span> yMaxLimit=<span class="number">80.</span>f</span><br><span class="line"><span class="comment">//x和y轴方向的移动速度</span></span><br><span class="line"><span class="keyword">float</span> xSpeed = <span class="number">250.0</span>f;</span><br><span class="line"><span class="keyword">float</span> ySpeed = <span class="number">120.0</span>f;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//初始化和y轴角度等于参照模型的角度</span></span><br><span class="line">Vector2 angles =transform.eulerAngles;</span><br><span class="line">x=angles.y;</span><br><span class="line">y=angles.x;</span><br><span class="line"><span class="keyword">if</span>(rigidbody)</span><br><span class="line">&#123;</span><br><span class="line">rigidbody.freezeRotation = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根据鼠标的移动修改摄像机的角度</span></span><br><span class="line">x+=Input.GetAxis(<span class="string">"Mouse X"</span>)*xSpeed*<span class="number">0.02</span>f;</span><br><span class="line">y-=Input.GetAxis(<span class="string">"Mouse Y"</span>)*ySpeed*<span class="number">0.02</span>f;</span><br><span class="line">y = ClampAngle(y,yMinLimit,yMaxLimit);</span><br><span class="line">Quaternion rotation =Quaternion.Euler(y,x,<span class="number">0</span>);</span><br><span class="line">Vector3 position = rotation*<span class="keyword">new</span> Vector3(<span class="number">0.0</span>f,<span class="number">0.0</span>f,(-distance))+target.position;</span><br><span class="line"><span class="comment">//设置模型的位置与旋转</span></span><br><span class="line">transform.rotation =rotation;</span><br><span class="line">transform.position =position;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">ClampAngle</span>(<span class="params"><span class="keyword">float</span> angle,<span class="keyword">float</span> min,<span class="keyword">float</span> max</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在LateUpdate()方法中通过鼠标的移动来观察模型，该模型的对象包寻在target变量当中。</p><hr><h4 id="线渲染器"><a href="#线渲染器" class="headerlink" title="线渲染器"></a>线渲染器</h4><p>线渲染器主要用于在3D世界中渲染线段，与GL图象库渲染相比，它更加专业，可以控制线段的组细程度<br>以及线段的数量，并且以网格对象的形式出现在3D世界中。使用线渲染器绘制线段时，必须先确定这条线段两个<br>端点的位置。需要说明的是，这两个点不是平面中的点而是3D世界中的点<br>线渲染器以组件的形式出现Unity当中，所以需要将它绑定在某个游戏对象中。这里我们在Unity导航中选择<br>“GameObject”—&gt;”CreateEmpty”菜单项创建一个空的游戏对象，然后杂Hierarchy视图中选择该对象后，继续在<br>Unity导航菜单中选择”Component”–&gt;”Line Render”菜单项，即可将线渲染器组件添加至游戏对象中，接着是设置<br>参数。<br>本例中绘制了3条相连的线段，它是以4个顶点确定的3条线段，并且它们首尾相接成一条线。这个线段以立体的形式<br>出现在3D世界中<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Script</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//线段对象</span></span><br><span class="line"><span class="keyword">private</span> CameObject LineRenderGameObject;</span><br><span class="line"><span class="comment">//线段渲染器</span></span><br><span class="line"><span class="keyword">private</span> LineRenderer lineRenderer;</span><br><span class="line"><span class="comment">//设置线段的顶点数，4个点确定3条直线</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> lineLength = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//记录4个点，连接一条线段</span></span><br><span class="line"><span class="keyword">private</span> Vector3 v0 = <span class="keyword">new</span> Vector3(<span class="number">1.0</span>f,<span class="number">0.0</span>f,<span class="number">0.0</span>f);</span><br><span class="line"><span class="keyword">private</span> Vector3 v1 = <span class="keyword">new</span> Vector3(<span class="number">2.0</span>f,<span class="number">0.0</span>f,<span class="number">0.0</span>f);</span><br><span class="line"><span class="keyword">private</span> Vector3 v2 = <span class="keyword">new</span> Vector3(<span class="number">3.0</span>f,<span class="number">0.0</span>f,<span class="number">0.0</span>f);</span><br><span class="line"><span class="keyword">private</span> Vector3 v3 = <span class="keyword">new</span> Vector3(<span class="number">4.0</span>f,<span class="number">0.0</span>f,<span class="number">0.0</span>f);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获得游戏对象</span></span><br><span class="line">LineRenderGameObject = GameObject.Find(<span class="string">"ObjLine"</span>);</span><br><span class="line"><span class="comment">//获得线渲染器组件</span></span><br><span class="line">lineRenderer = (LineRendererGameObject.GetComponent(<span class="string">"LineRenderer"</span>);</span><br><span class="line"><span class="comment">//设置线的顶点数</span></span><br><span class="line">lineRenderer.SetVertexCount(lineLength);</span><br><span class="line"><span class="comment">//设置线的宽度</span></span><br><span class="line">lineRenderer.SetWidth(<span class="number">0.1</span>f,<span class="number">0.1</span>f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//使用4个顶点渲染3条线段</span></span><br><span class="line">lineRender.SetPosition(<span class="number">0</span>,v0);</span><br><span class="line">lineRender.SetPosition(<span class="number">1</span>,v1);</span><br><span class="line">lineRender.SetPosition(<span class="number">2</span>,v2);</span><br><span class="line">lineRender.SetPosition(<span class="number">3</span>,v3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上述代码，我们首先获取了线渲染器组件对象，然后设置顶点的数量，最后调用SetPosition()方法将线段显示在屏幕中。<br>SetPosition()方法的第一个参数表示每个点的ID，让它保持唯一性，第一个参数表示该顶点的3D的位置.</p><hr><h4 id="网格渲染"><a href="#网格渲染" class="headerlink" title="网格渲染"></a>网格渲染</h4><p>“Component”?Mesh?”Mesh Filter”菜单项与”Mesh Renderer”菜单项，即可将组件添加至游戏对象本身。<br>本例在屏幕中渲染了两个网格面对象。因为网格面又三角形网格顶点的位置，三角形由3个顶点组成，所以它们的规律是:<br>一个三角形数组长度就是3，两个三角形数组长度就是6，依次类推该数组的长度只可能是3的倍数。最后绘制网格时使用triangles数组，<br>数组中的ID和Vertices(网格顶点)的顶点ID一一对应。<br>分5等份填充<br>完全填充<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">script</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//构成三角形1的位置</span></span><br><span class="line">Vector3 v0 = <span class="keyword">new</span> Vector3(<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">Vector3 v1 = <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">Vector3 v2 = <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//构成三角形2的位置</span></span><br><span class="line">Vector3 v3 = <span class="keyword">new</span> Vector3(<span class="number">-5</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">Vector3 v4 = <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">-5</span>,<span class="number">0</span>);</span><br><span class="line">Vector3 v5 = <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">-5</span>);</span><br><span class="line"><span class="comment">//构成三角形1的贴图比例</span></span><br><span class="line">Vector2 u0 = <span class="keyword">new</span> Vector2(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">Vector2 u1 = <span class="keyword">new</span> Vector2(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">Vector2 u2 = <span class="keyword">new</span> Vector2(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//构成三角形2的贴图比例</span></span><br><span class="line">Vector2 u3 = <span class="keyword">new</span> Vector2(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">Vector2 u4 = <span class="keyword">new</span> Vector2(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">Vector2 u5 = <span class="keyword">new</span> Vector2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//得到网格渲染器对象</span></span><br><span class="line">MeshFilter meshFilter =(MeshFilter)GameObject.Find(<span class="string">"face"</span>).GetComponent(<span class="keyword">typeof</span>(MeshFilter));</span><br><span class="line"><span class="comment">//通过渲染器对象得到网格对象</span></span><br><span class="line">Mesh mesh = meshFilter.mesh;</span><br><span class="line"><span class="comment">//设置三角形顶点的数组，6个点表示设置了两个三角形</span></span><br><span class="line">mesh.Vertices = <span class="keyword">new</span> Vector3[]&#123;v0,v1,v2,v3,v4,v5&#125;;</span><br><span class="line"><span class="comment">//设置三角形面上的贴图比例</span></span><br><span class="line">mesh.uv = <span class="keyword">new</span> Vector2[] &#123;u0,u1,u2,u3,u4,u5&#125;;</span><br><span class="line"><span class="comment">//设置三角形索引，绘制三角形</span></span><br><span class="line">mesh.triangles = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>代码最后的mesh.triangles表示设定三角形的索引数组，该数组中的ID表示相对顶点数组中的坐标。目前这个数组中的元素是0、1、2、3、4和5，<br>对应顶点数组中6个顶点坐标。因为3个点确定一个三角形面，所以这里使用定点数组中0，1，2确定了一个三角形，3，4，5又确定了一个<br>三角形。</p><p>游戏实例—控制人物移动<br>为了让读者更清晰地了解如何控制主角移动与播放骨骼动画，下面我们将角色控制器组件的人物动画拆开，使用代码自行实现他的行走动画。运行游戏后，按键盘键上的<br>“W”,”S”,”A”,”D”来移动主角。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Script</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//人物行走的方向状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> HERO_UP=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> HERO_RIGHT=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> HERO_DOWN=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> HERO_LEFT=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//人物当前的行走方向</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//人物移动速度</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> moveSpeed =<span class="number">10</span>;</span><br><span class="line"><span class="comment">//初始化人物的默认位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">state =HERO_DOWN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取控制的方向数据</span></span><br><span class="line"><span class="keyword">float</span> KeyVertical =Input.GetAxis(<span class="string">"Vertical"</span>);</span><br><span class="line"><span class="keyword">float</span> KeyHorizontal = Input.GetAxis(<span class="string">"Horzontal"</span>);</span><br><span class="line"><span class="keyword">if</span>(KeyVertical ==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">setHeroState(HERO_LEFT);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(KeyVertical ==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//设置人物动画往右行走</span></span><br><span class="line">setHeroState(HERO_RIGHT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KeyHorizontal ==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">setHeroState(HERO_DOWN);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(KeyHorzontal ==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">setHeroState(HERO_UP);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KeyVertical ==<span class="number">0</span> &amp;&amp;KeyHorizontal ==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">animation.Play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeroState</span>(<span class="params"><span class="keyword">int</span> newState</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//根据当前人物方向与上一次备份方向计算出模型旋转的角度</span></span><br><span class="line"><span class="keyword">int</span> rotateValue =(newState-state)*<span class="number">90</span>;</span><br><span class="line">Vector3 transformValue =<span class="keyword">new</span> Vector3();</span><br><span class="line"><span class="comment">//播放行走动画</span></span><br><span class="line">animation.Play(<span class="string">"walk"</span>);</span><br><span class="line"><span class="comment">//模型移动的位移的数值</span></span><br><span class="line"><span class="keyword">switch</span>(newState)&#123;</span><br><span class="line"><span class="keyword">case</span> HERO_UP:</span><br><span class="line">transformValue = Vector3.forward*Time.deltaTime;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HERO_DOWN:</span><br><span class="line">transformValue =(-Vector3.forward).Time.deltaTime;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HERO_LEFT:</span><br><span class="line">transformValue = Vector3.left*Time.deltaTime;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> HERO_RIGHT:</span><br><span class="line">transformValue = (-Vector3.left)*Time.deltaTime;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模型旋转</span></span><br><span class="line">transform.Rotate(Vector3.up,rotateValue);</span><br><span class="line"><span class="comment">//移动人物</span></span><br><span class="line">transform.Translate(transformValue *moveSpeed,Space.World);</span><br><span class="line">state = newState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本例使用游戏状态机将主角的行走分为4个状态：向前行走，向后行走，向左行走，向右行走。按下不同的方向键后，<br>使用animation.Play()方法播放行走动画，该方法的参数为动画名称，最后根据当前的行走状态计算模型的旋转角度，<br>使其按照正确的方向行走。<br>本章首先介绍了如何处理键盘与鼠标输入事件，比如按下事件，抬起事件和长按事件等，接着介绍了自定义按键事件、<br>模型与动画，然后介绍了如何使用GL图像库绘制2D与3D的线段与网络模型，以及线渲染器与网格渲染器的绘制方法，<br>最后以一个实例的形式向读者介绍如何使用键盘控制主角移动并且播放骨骼动画。</p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity3D研究 GL详解</title>
      <link href="/2018/08/12/GL/"/>
      <url>/2018/08/12/GL/</url>
      <content type="html"><![CDATA[<h3 id="转-Unity3D研究-GL详解"><a href="#转-Unity3D研究-GL详解" class="headerlink" title="(转)Unity3D研究 GL详解"></a>(转)Unity3D研究 GL详解</h3><p>原文链接:<a href="https://blog.csdn.net/Htlas/article/details/79748512尊重作者原创" target="_blank" rel="noopener">https://blog.csdn.net/Htlas/article/details/79748512尊重作者原创</a></p><hr><p>Unity内置了GL类  封装了OpenGL，可以通过GL类来实现一些简单的画图操作，<br>根据Unity官方API来研究一下。<br>将官方GL的实例代码考到Unity执行后是这个效果</p><p><a href="https://imgchr.com/i/P6PT6s" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6PT6s.png" alt="P6PT6s.png"></a></p><p>代码中有这样一个回调是属于屏幕渲染的，需要在API里了解一下<br> public void OnRenderObject()<br>Unity的生命周期执行顺序中，屏幕渲染会在GameLogic后会执行<br>其中有几个屏幕渲染回调API来了解一下</p><p><a href="https://imgchr.com/i/P6Pbmq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6Pbmq.png" alt="P6Pbmq.png"></a></p><p><a href="https://imgchr.com/i/P6PXkT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6PXkT.png" alt="P6PXkT.png"></a></p><p>官方的GL示例代码 我翻译了一下便于大家理解<br>其中需要注意的是：</p><p><strong>GL.Push  和  GL.Pop  之间写GL代码</strong></p><p><strong>GL.Begin 和 GL.End  之间写画线逻辑Begin和End 之间的两个Vector3表示起点和终点</strong></p><p><a href="https://imgchr.com/i/P6iPn1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6iPn1.png" alt="P6iPn1.png"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//划线的数量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> lineCount = <span class="number">100</span>;</span><br><span class="line">  <span class="comment">//每条线的长度</span></span><br><span class="line">  <span class="keyword">private</span>  <span class="keyword">float</span> radius = <span class="number">3.0</span>f;</span><br><span class="line">  <span class="comment">//划线使用的材质球</span></span><br><span class="line">  <span class="keyword">static</span> Material lineMaterial;</span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 创建一个材质球</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateLineMaterial</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">//如果材质球不存在</span></span><br><span class="line">      <span class="keyword">if</span> (!lineMaterial)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//用代码的方式实例一个材质球</span></span><br><span class="line">          Shader shader = Shader.Find(<span class="string">"Hidden/Internal-Colored"</span>);</span><br><span class="line">          lineMaterial = <span class="keyword">new</span> Material(shader);</span><br><span class="line">          lineMaterial.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line">          <span class="comment">//设置参数</span></span><br><span class="line">          lineMaterial.SetInt(<span class="string">"_SrcBlend"</span>, (<span class="keyword">int</span>)UnityEngine.Rendering.BlendMode.SrcAlpha);</span><br><span class="line">          lineMaterial.SetInt(<span class="string">"_DstBlend"</span>, (<span class="keyword">int</span>)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);</span><br><span class="line">          <span class="comment">//设置参数</span></span><br><span class="line">          lineMaterial.SetInt(<span class="string">"_Cull"</span>, (<span class="keyword">int</span>)UnityEngine.Rendering.CullMode.Off);</span><br><span class="line">          <span class="comment">//设置参数</span></span><br><span class="line">          lineMaterial.SetInt(<span class="string">"_ZWrite"</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 使用GL画线的回调</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnRenderObject</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">//创建材质球</span></span><br><span class="line">      CreateLineMaterial();</span><br><span class="line">      <span class="comment">//激活第一个着色器通过（在本例中，我们知道它是唯一的通过）</span></span><br><span class="line">      lineMaterial.SetPass(<span class="number">0</span>);</span><br><span class="line">      <span class="comment">//渲染入栈  在Push——Pop之间写GL代码</span></span><br><span class="line">      GL.PushMatrix();</span><br><span class="line">      <span class="comment">//矩阵相乘，将物体坐标转化为世界坐标</span></span><br><span class="line">      GL.MultMatrix(transform.localToWorldMatrix);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 开始画线  在Begin——End之间写画线方式</span></span><br><span class="line">      <span class="comment">//GL.LINES 画线</span></span><br><span class="line">      GL.Begin(GL.LINES);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineCount; ++i)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">float</span> a = i / (<span class="keyword">float</span>)lineCount;</span><br><span class="line">          <span class="keyword">float</span> angle = a * Mathf.PI * <span class="number">2</span>;</span><br><span class="line">          <span class="comment">// 设置颜色</span></span><br><span class="line">          GL.Color(<span class="keyword">new</span> Color(a, <span class="number">1</span> - a, <span class="number">0</span>, <span class="number">0.8</span>F));</span><br><span class="line">          <span class="comment">//画线起始点</span></span><br><span class="line">          GL.Vertex3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">          <span class="comment">// 划线重点</span></span><br><span class="line">          GL.Vertex3(Mathf.Cos(angle) * radius, Mathf.Sin(angle) * radius, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      GL.End();</span><br><span class="line">      <span class="comment">//渲染出栈</span></span><br><span class="line">      GL.PopMatrix();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>将官方API简单注释一下, 大部分是用不到的,常用的有:<br><strong>Begin,Clear,Color,End,LoadOrtho,Vertex3</strong></p><p><strong>Static Functions</strong><br><a href="https://imgchr.com/i/P6im1H" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6im1H.png" alt="P6im1H.png"></a><br><a href="https://imgchr.com/i/P6iujA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6iujA.png" alt="P6iujA.png"></a></p>]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity播放GIF</title>
      <link href="/2018/08/12/Unity%E6%92%AD%E6%94%BEGIF/"/>
      <url>/2018/08/12/Unity%E6%92%AD%E6%94%BEGIF/</url>
      <content type="html"><![CDATA[<h3 id="转-Unity——在游戏中播放Gif动图"><a href="#转-Unity——在游戏中播放Gif动图" class="headerlink" title="(转)Unity——在游戏中播放Gif动图"></a>(转)Unity——在游戏中播放Gif动图</h3><p>原文地址: <a href="https://blog.csdn.net/Htlas/article/details/79657474尊重作者原创" target="_blank" rel="noopener">https://blog.csdn.net/Htlas/article/details/79657474尊重作者原创</a></p><hr><p>Project里面需要这些<br>Resources：Material  </p><p>StreamingAssets：Gif图  </p><p>在自己的UnityEditor里面找到System.Drawing放到Unity的Asset中  </p><p>一个C#脚本 一个ShaderLab脚本<br><a href="https://imgchr.com/i/P6i5E6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6i5E6.png" alt="P6i5E6.png"></a></p><p>Shader脚本<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">Shader <span class="string">"Hidden/BiaoQing"</span></span><br><span class="line">&#123;</span><br><span class="line">Properties</span><br><span class="line">&#123;</span><br><span class="line">_MainTex (<span class="string">"Texture"</span>, <span class="number">2</span>D) = <span class="string">"white"</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">SubShader</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// No culling or depth</span></span><br><span class="line">Cull Off ZWrite Off ZTest Less</span><br><span class="line"></span><br><span class="line">Pass</span><br><span class="line">&#123;</span><br><span class="line">SetTexture [_MainTex] &#123;</span><br><span class="line"> combine Texture</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">```CS</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Drawing.Imaging;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BiaoQing</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    UnityEngine.UI.Image image;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> Mytime = <span class="number">0.05</span>f;</span><br><span class="line">    List&lt;Texture2D&gt; zhen;</span><br><span class="line">    Sprite sprite;</span><br><span class="line">    <span class="keyword">int</span> dex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        image = GetComponent&lt;UnityEngine.UI.Image&gt;();</span><br><span class="line">        <span class="keyword">string</span> path = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (Application.platform == RuntimePlatform.WindowsEditor || Application.platform == RuntimePlatform.WindowsPlayer || Application.platform == RuntimePlatform.OSXEditor)</span><br><span class="line">        &#123;</span><br><span class="line">            path = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;/StreamingAssets/"</span>, Application.dataPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Application.platform == RuntimePlatform.Android)</span><br><span class="line">        &#123;</span><br><span class="line">            path = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;!/assets/"</span>, Application.dataPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Application.platform == RuntimePlatform.IPhonePlayer)</span><br><span class="line">        &#123;</span><br><span class="line">            path = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;/Raw/"</span>, Application.dataPath);</span><br><span class="line">        &#125;</span><br><span class="line">        zhen = GifToTextureByCS(System.Drawing.Image.FromFile(path + <span class="string">"/BiaoQing.gif"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//sprite = Sprite.Create(zhen[dex], new Rect(0, 0, 256, 256), Vector2.zero);</span></span><br><span class="line">         Resources.Load&lt;Material&gt;(<span class="string">"BiaoQing"</span>).mainTexture = zhen[dex];</span><br><span class="line">        <span class="comment">//image.sprite = sprite;</span></span><br><span class="line">        time += Time.deltaTime;</span><br><span class="line">        <span class="keyword">if</span> (time &gt; Mytime)</span><br><span class="line">        &#123;</span><br><span class="line">            dex++;</span><br><span class="line">            <span class="keyword">if</span> (dex == zhen.Count) dex = <span class="number">0</span>;</span><br><span class="line">            time = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> gif转换图片</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="image"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">List&lt;Texture2D&gt; <span class="title">GifToTextureByCS</span>(<span class="params">System.Drawing.Image image</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;Texture2D&gt; texture2D = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != image)</span><br><span class="line">        &#123;</span><br><span class="line">            texture2D = <span class="keyword">new</span> List&lt;Texture2D&gt;();</span><br><span class="line">            <span class="comment">//Debug.LogError(image.FrameDimensionsList.Length);</span></span><br><span class="line">            <span class="comment">//image.FrameDimensionsList.Length = 1;</span></span><br><span class="line">            <span class="comment">//根据指定的唯一标识创建一个提供获取图形框架维度信息的实例;</span></span><br><span class="line">            FrameDimension frameDimension = <span class="keyword">new</span> FrameDimension(image.FrameDimensionsList[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//获取指定维度的帧数;</span></span><br><span class="line">            <span class="keyword">int</span> framCount = image.GetFrameCount(frameDimension);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; framCount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//选择由维度和索引指定的帧;</span></span><br><span class="line">                image.SelectActiveFrame(frameDimension, i);</span><br><span class="line">                <span class="keyword">var</span> framBitmap = <span class="keyword">new</span> Bitmap(image.Width, image.Height);</span><br><span class="line">                <span class="comment">//从指定的Image 创建新的Graphics,并在指定的位置使用原始物理大小绘制指定的 Image;</span></span><br><span class="line">                <span class="comment">//将当前激活帧的图形绘制到framBitmap上;</span></span><br><span class="line">                System.Drawing.Graphics.FromImage(framBitmap).DrawImage(image, Point.Empty);</span><br><span class="line">                <span class="keyword">var</span> frameTexture2D = <span class="keyword">new</span> Texture2D(framBitmap.Width, framBitmap.Height);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; framBitmap.Width; x++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; framBitmap.Height; y++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//获取当前帧图片像素的颜色信息;</span></span><br><span class="line">                        System.Drawing.Color sourceColor = framBitmap.GetPixel(x, y);</span><br><span class="line">                        <span class="comment">//设置Texture2D上对应像素的颜色信息;</span></span><br><span class="line">                        frameTexture2D.SetPixel(x, framBitmap.Height - <span class="number">1</span> - y, <span class="keyword">new</span> Color32(sourceColor.R, sourceColor.G, sourceColor.B, sourceColor.A));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                frameTexture2D.Apply();</span><br><span class="line">                texture2D.Add(frameTexture2D);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> texture2D;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity——Bit编程，可用于计算技能解锁装备购买并初步加密，降低内存占有量并提高安全性</title>
      <link href="/2018/08/12/UnityBit%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/08/12/UnityBit%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="转-Unity——Bit编程，可用于计算技能解锁装备购买并初步加密，降低内存占有量并提高安全性"><a href="#转-Unity——Bit编程，可用于计算技能解锁装备购买并初步加密，降低内存占有量并提高安全性" class="headerlink" title="(转)Unity——Bit编程，可用于计算技能解锁装备购买并初步加密，降低内存占有量并提高安全性"></a>(转)Unity——Bit编程，可用于计算技能解锁装备购买并初步加密，降低内存占有量并提高安全性</h3><p>原文链接<a href="https://blog.csdn.net/Htlas/article/details/79717990尊重作者原创" target="_blank" rel="noopener">https://blog.csdn.net/Htlas/article/details/79717990尊重作者原创</a></p><hr><p>在游戏开发中，有时候我们通过进行Bit级别的编程，可以实现技能解锁\装备购买等存储，并实现初步加密，降低内存所占空间，并极大提高数据安全性！</p><p>假设当前角色共有8个技能，我用一个Byte来存储这些信息。</p><p>0000  0000 表示当前我没有学习任何技能</p><p>0000  0001 表示为当前我学习了第一个技能。</p><p>这样大家可以初步看出我是通过Bit是否为true来判断仅能是否已经学习，0就是没有学习过，1就是已经学习过。</p><p>我们通过&amp;、|、！运算，位移运算符&lt;&lt;  &gt;&gt;操作Byte实现Bit级别的编程</p><h4 id="解锁技能表达式推导"><a href="#解锁技能表达式推导" class="headerlink" title="解锁技能表达式推导"></a>解锁技能表达式推导</h4><p>当前byte tmpByte = 0 即 0000  0000<br>解锁第一个技能：对tmpbyte进行I操作  </p><p>0000  0000    –》当前技能<br>      |操作<br>0000  0001    –》解锁技能——要解锁1技能，1左移0<br>—————<br>0000  0001    –》解锁后技能<br>解锁第二个技能<br>0000  0001    –》当前技能<br>      |操作<br>0000  0010    –》解锁技能——要解锁2技能，1左移1<br>—————<br>0000  0011    –》解锁后技能  </p><p>|的数值可以看出来是:  1&lt;&lt;n-1   </p><p><strong>解锁技能的表达式：tmpByte | 1&lt;&lt;(n-1)</strong></p><h4 id="判断技能是否解锁表达式推导"><a href="#判断技能是否解锁表达式推导" class="headerlink" title="判断技能是否解锁表达式推导"></a>判断技能是否解锁表达式推导</h4><p>判断第一个技能<br>0000  0011    –》当前技能<br>      &amp;操作<br>0000  0010    –》判断技能——要判断技能，1左移0<br>—————<br>0000  0011    –》运算后是否等于本身  </p><p>解锁第二个技能<br>0000  0011    –》当前技能<br>      |操作<br>0000  0010    –》判断技能——要判断2技能，1左移1<br>—————<br>0000  0011    –》运算后是否等于本身  </p><p>&amp;的数值可以看出来是：1&lt;&lt;n-1  </p><a id="more"></a><p><strong>判断技能的表达式：tmpByte&amp;1&lt;&lt;(n-1) == (1&lt;&lt;(n-1))</strong></p><h4 id="取消技能激活表达式推导"><a href="#取消技能激活表达式推导" class="headerlink" title="取消技能激活表达式推导"></a>取消技能激活表达式推导</h4><p>卖出/取消第一个技能<br>0000  0011    –》当前技能<br>    &amp;运算<br>1111  1110    –》取消技能激活<br>—————<br>0000  0010    –》取消1技能保留2技能  </p><p>&amp;的数值可以看出来是：~(1&lt;&lt;(n-1))  </p><p>也可以通过一个8次的for循环得到  </p><p>for (int i = 0; i &lt; 8; i++)<br>        {<br>            if(i!=n)<br>            1&lt;&lt;i ||tmpBytes<br>        }  </p><p><strong>上代码</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestSkill</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span> skillByte;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解锁技能</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="skill"&gt;</span>从数据库取出的最终值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="index"&gt;</span>解锁第几个技能<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BuySkill</span>(<span class="params"><span class="keyword">byte</span> skill, <span class="keyword">int</span> index</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> tmpIndex = (<span class="keyword">byte</span>)(index - <span class="number">1</span>);</span><br><span class="line">        skill =(<span class="keyword">byte</span>) (skill | (<span class="number">1</span> &lt;&lt; tmpIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 判断是否解锁技能</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="skill"&gt;</span>从数据库里取出的最终值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="index"&gt;</span>表示第几件装备<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">IsBuying</span>(<span class="params"><span class="keyword">byte</span> skill,<span class="keyword">int</span> index</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> tmpByte = (<span class="keyword">byte</span>)(<span class="number">1</span> &lt;&lt; (index - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> ((skill &amp; tmpByte) == tmpByte)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 取消技能激活/卖出</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="skill"&gt;</span>从数据库去除的最终值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="index"&gt;</span>第几件装备<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">SaleSkill</span>(<span class="params"><span class="keyword">byte</span> skill,<span class="keyword">int</span> index</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> tmpByte = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != (index - <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                tmpByte = (<span class="keyword">byte</span>)(tmpByte | (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        skill = (<span class="keyword">byte</span>)(tmpByte &amp; skill);</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">SaleSkillTwo</span>(<span class="params"><span class="keyword">byte</span> skill,<span class="keyword">int</span> index</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> tmpByte = <span class="number">0</span>;</span><br><span class="line">        tmpByte = (<span class="keyword">byte</span>)(<span class="number">1</span> &lt;&lt; (index - <span class="number">1</span>));</span><br><span class="line">        <span class="comment">//取反操作</span></span><br><span class="line">        tmpByte = (<span class="keyword">byte</span>)(~tmpByte);</span><br><span class="line">        skill = (<span class="keyword">byte</span>)(tmpByte &amp; skill);</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity3D 小地图以角色为中心点等比例映射地图</title>
      <link href="/2018/08/12/UnityUnity3D%E4%BB%A5%E8%A7%92%E8%89%B2%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%82%B9%E7%AD%89%E6%AF%94%E4%BE%8B%E6%98%A0%E5%B0%84%E5%9C%B0%E5%9B%BE/"/>
      <url>/2018/08/12/UnityUnity3D%E4%BB%A5%E8%A7%92%E8%89%B2%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%82%B9%E7%AD%89%E6%AF%94%E4%BE%8B%E6%98%A0%E5%B0%84%E5%9C%B0%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h3 id="转-Unity3D-小地图以角色为中心点等比例映射地图"><a href="#转-Unity3D-小地图以角色为中心点等比例映射地图" class="headerlink" title="(转)Unity3D 小地图以角色为中心点等比例映射地图"></a>(转)Unity3D 小地图以角色为中心点等比例映射地图</h3><p>原文链接: <a href="https://blog.csdn.net/Htlas/article/details/79770771" target="_blank" rel="noopener">https://blog.csdn.net/Htlas/article/details/79770771</a> 尊重作者原创</p><hr><p><a href="https://imgchr.com/i/P6F9PS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6F9PS.png" alt="P6F9PS.png"></a></p><p><strong>一个简单的Demo演示，在很多大型RPG，FPS游戏中，地图是以人物为中心点等比例映射的，很多人在做游戏的时候，是通过另一个摄像机渲染图片，实时同步在小地图上的，这种做法十分消耗性能且功能拓展性很差。</strong></p><p>像GIF图中当角色在边界的时候会露出下方的背景这个问题也很好解决，在正式游戏开发中，可活动地形都是远小于世界地形的。</p><p>根据需求进行分析：<br>1.获取角色在地形上的相对位置坐标。</p><pre><code>角色相对地形位置=角色世界坐标-地形世界坐标</code></pre><p>2.获取角色在地形上的比例位置，以Vector2（x，z)的形式存储。</p><pre><code>角色在地形上的比例 = 相对地形位置/地形长宽</code></pre><p>3.比例同步到小地图上，设置地图的RectTransform</p><pre><code>小地图位置 = 小地图长宽*比例</code></pre><p><strong>但是有一点要注意：</strong><br><a href="https://imgchr.com/i/P6Fivj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/10/P6Fivj.png" alt="P6Fivj.png"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MipMap</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="comment">//小地图场景图</span></span><br><span class="line">    Transform mipMapImage;</span><br><span class="line">    <span class="comment">//场景中人物的位置</span></span><br><span class="line">    Transform playerTrans;</span><br><span class="line">    <span class="comment">//地形</span></span><br><span class="line">    Terrain terrain;</span><br><span class="line">    <span class="comment">//小地图的尺寸</span></span><br><span class="line">    Vector2 mipMapSize;</span><br><span class="line">    <span class="comment">//等比例映射后角色在小地图的位置</span></span><br><span class="line">    Vector2 position;</span><br><span class="line">    <span class="comment">//人物相对于地形的坐标</span></span><br><span class="line">    Vector3 localPos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> rateX, rateY, posX, posY;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        mipMapImage = GameObject.Find(<span class="string">"BackGround"</span>).transform;</span><br><span class="line">        playerTrans = GameObject.Find(<span class="string">"Cube"</span>).transform;</span><br><span class="line">        terrain = GameObject.Find(<span class="string">"Terrain"</span>).GetComponent&lt;Terrain&gt;();</span><br><span class="line">        mipMapSize = mipMapImage.GetComponent&lt;RectTransform&gt;().sizeDelta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        PlayerRate();</span><br><span class="line">        MipMapWave();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//角色在地形上的比例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerRate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        localPos = playerTrans.position - terrain.transform.position;</span><br><span class="line">        <span class="comment">//Debug.Log("角色在地图上的坐标== " + localPos);</span></span><br><span class="line">        rateX = localPos.x / terrain.terrainData.size.x;</span><br><span class="line">       <span class="comment">// Debug.Log("角色在地图上的X比例== " + rateX);</span></span><br><span class="line">        rateY = localPos.z / terrain.terrainData.size.z;</span><br><span class="line">        <span class="comment">//Debug.Log("角色在地图上的Z比例== " + rateY);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MipMapWave</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        posX = mipMapSize.x * rateX;</span><br><span class="line">        posY = mipMapSize.y * rateY;</span><br><span class="line">        position.x = -posX;</span><br><span class="line">        position.y = -posY;</span><br><span class="line">        mipMapImage.localPosition = position;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>获取AnimatorClip动画的时间长度</title>
      <link href="/2018/08/08/%E8%8E%B7%E5%8F%96AnimatorClip%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E9%95%BF%E5%BA%A6/"/>
      <url>/2018/08/08/%E8%8E%B7%E5%8F%96AnimatorClip%E5%8A%A8%E7%94%BB%E7%9A%84%E6%97%B6%E9%97%B4%E9%95%BF%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h3 id="获取AnimatorClip"><a href="#获取AnimatorClip" class="headerlink" title="获取AnimatorClip"></a>获取AnimatorClip</h3><hr><h4 id="获取帧动画的动画长度"><a href="#获取帧动画的动画长度" class="headerlink" title="获取帧动画的动画长度"></a>获取帧动画的动画长度</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Animator anim;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  anim = Getcomponent&lt;Animator&gt;();</span><br><span class="line">  RuntimeAnimatorController rn = anim.runtimeAnimatorController;</span><br><span class="line">  print(rn.name);</span><br><span class="line">  AnimationClip[] clip = rn.animationClips;</span><br><span class="line">  print(clip[<span class="number">0</span>].leng);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="判断动画是否播放完毕"><a href="#判断动画是否播放完毕" class="headerlink" title="判断动画是否播放完毕"></a>判断动画是否播放完毕</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AnimatorStateInfo stateinfo = anim.GetCurrentAnimatorStateInfo(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (stateinfo.normalizedTime &gt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    animIsPlaying = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Sprite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Sprite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>unity 使用程序生成Texture2D并创建Sprite，制作渐变背景的效果</title>
      <link href="/2018/08/08/%E4%BD%BF%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90Texture2D%E5%B9%B6%E5%88%9B%E5%BB%BASprite/"/>
      <url>/2018/08/08/%E4%BD%BF%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%94%9F%E6%88%90Texture2D%E5%B9%B6%E5%88%9B%E5%BB%BASprite/</url>
      <content type="html"><![CDATA[<h3 id="转-unity-使用程序生成Texture2D并创建Sprite，制作渐变背景的效果"><a href="#转-unity-使用程序生成Texture2D并创建Sprite，制作渐变背景的效果" class="headerlink" title="(转)unity 使用程序生成Texture2D并创建Sprite，制作渐变背景的效果"></a>(转)unity 使用程序生成Texture2D并创建Sprite，制作渐变背景的效果</h3><p>原贴地址:<a href="https://blog.csdn.net/zgjllf1011/article/details/79261491尊重作者原创" target="_blank" rel="noopener">https://blog.csdn.net/zgjllf1011/article/details/79261491尊重作者原创</a></p><hr><p>首先创建脚本，命名为ScriptTexture.</p><p>声明一个引用:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpriteRenderer sr;</span><br></pre></td></tr></table></figure></p><p>然后在初始化中创建我们需要的物体:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        GameObject obj = <span class="keyword">new</span> GameObject(<span class="string">"spriet"</span>);</span><br><span class="line"></span><br><span class="line">        sr = obj.AddComponent&lt;SpriteRenderer&gt;();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里首先创意一个gameobject，然后给这个物体添加一个SpriteRenderer脚本并保存到我们之前的全局变量中。<br>接下来生成纹理:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateSprite</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Texture2D t = <span class="keyword">new</span> Texture2D(<span class="number">256</span>, <span class="number">512</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; width; w++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; height; h ++)&#123;</span><br><span class="line">            t.SetPixel(w,h,Color.yellow);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t.Apply();</span><br><span class="line"></span><br><span class="line">    Sprite pic = Sprite.Create(t, <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, height), <span class="keyword">new</span> Vector2(<span class="number">0.5</span>f, <span class="number">0.5</span>f));</span><br><span class="line">    sr.sprite = pic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们首先创建一个Texture2D，并指定宽高，接下来遍历Texture2D的每一像素点并赋值。</p><p>然后使用Texture2D生成一个Sprite并赋值给之前创建的SpriteRenderer。</p><p>最后在start中调用此方法，再把脚本挂到游戏摄像机上，运行场景看下效果:<br><a href="http://pd4nt2xc8.bkt.clouddn.com/1.png" target="_blank" rel="noopener">http://pd4nt2xc8.bkt.clouddn.com/1.png</a></p><p>场景中出现了我们的sprite，接下来我们按照之前讲的shader中同样的方法来给精灵添加一个渐变的效果，直接给出修改后的完整代码:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScriptTexture</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">public</span> Color color1 = Color.green;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Color color2 = Color.blue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> width = <span class="number">640</span>, height = <span class="number">960</span>;</span><br><span class="line"></span><br><span class="line">    SpriteRenderer sr;</span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GameObject obj = <span class="keyword">new</span> GameObject(<span class="string">"spriet"</span>);</span><br><span class="line"></span><br><span class="line">        sr = obj.AddComponent&lt;SpriteRenderer&gt;();</span><br><span class="line"></span><br><span class="line">        GenerateSprite();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GenerateSprite</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Texture2D t = <span class="keyword">new</span> Texture2D(width, height);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; width; w++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; height; h++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">float</span> wrate = (<span class="keyword">float</span>)w / (<span class="keyword">float</span>)width;</span><br><span class="line">                <span class="keyword">float</span> hrate = (<span class="keyword">float</span>)h / (<span class="keyword">float</span>)height;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">float</span> bezieratVal = GetBezierat(<span class="number">0</span>, <span class="number">0.5</span>f, <span class="number">0.5</span>f, <span class="number">1</span>, hrate);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">float</span> dis = Vector2.Distance(<span class="keyword">new</span> Vector2(<span class="number">0.5</span>f, <span class="number">0.5</span>f),<span class="keyword">new</span> Vector2(wrate,hrate));</span><br><span class="line">                dis = <span class="number">1</span> - GetBezierat(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, dis) * <span class="number">0.6</span>f;  </span><br><span class="line"></span><br><span class="line">                Color c = <span class="keyword">new</span> Color();</span><br><span class="line">                c.r = Mathf.Lerp(color1.r, color2.r, bezieratVal) * dis;</span><br><span class="line">                c.g = Mathf.Lerp(color1.g, color2.g, bezieratVal) * dis;</span><br><span class="line">                c.b = Mathf.Lerp(color1.b, color2.b, bezieratVal) * dis;</span><br><span class="line">                c.a = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line">                t.SetPixel(w, h,c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.Apply();</span><br><span class="line"></span><br><span class="line">        Sprite pic = Sprite.Create(t, <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, height), <span class="keyword">new</span> Vector2(<span class="number">0.5</span>f, <span class="number">0.5</span>f));</span><br><span class="line">        sr.sprite = pic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">GetBezierat</span>(<span class="params"><span class="keyword">float</span> a, <span class="keyword">float</span> b, <span class="keyword">float</span> c, <span class="keyword">float</span> d, <span class="keyword">float</span> t</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Mathf.Pow(<span class="number">1</span> - t, <span class="number">3</span>) * a +</span><br><span class="line">                <span class="number">3</span> * t * (Mathf.Pow(<span class="number">1</span> - t, <span class="number">2</span>)) * b +</span><br><span class="line">                <span class="number">3</span> * Mathf.Pow(t, <span class="number">2</span>) * (<span class="number">1</span> - t) * c +</span><br><span class="line">                Mathf.Pow(t, <span class="number">3</span>) * d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下最终效果:<br><a href="http://pd4nt2xc8.bkt.clouddn.com/1.png" target="_blank" rel="noopener">http://pd4nt2xc8.bkt.clouddn.com/1.png</a></p>]]></content>
      
      <categories>
          
          <category> Sprite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Sprite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之状态模式</title>
      <link href="/2018/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="设计模式与游戏开发之状态模式-State"><a href="#设计模式与游戏开发之状态模式-State" class="headerlink" title="设计模式与游戏开发之状态模式(State)"></a>设计模式与游戏开发之状态模式(State)</h3><hr>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity2D之精灵Sprite与屏幕之间的关系</title>
      <link href="/2018/08/05/Unity2D%E7%A0%94%E7%A9%B6%E9%99%A2%E4%B9%8B%E7%B2%BE%E7%81%B5Sprite%E4%B8%8E%E5%B1%8F%E5%B9%95%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2018/08/05/Unity2D%E7%A0%94%E7%A9%B6%E9%99%A2%E4%B9%8B%E7%B2%BE%E7%81%B5Sprite%E4%B8%8E%E5%B1%8F%E5%B9%95%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h3 id="转-Unity2D研究院之精灵Sprite与屏幕之间的关系"><a href="#转-Unity2D研究院之精灵Sprite与屏幕之间的关系" class="headerlink" title="(转)Unity2D研究院之精灵Sprite与屏幕之间的关系"></a>(转)Unity2D研究院之精灵Sprite与屏幕之间的关系</h3><p>原文链接:<a href="http://www.xuanyusong.com/archives/3254" target="_blank" rel="noopener">http://www.xuanyusong.com/archives/3254</a> 尊重作者原创</p><hr><p>屏幕整体的坐标是左上角是00点。X轴向右递增，Y轴向下递增。所有的image也是这个原理。只是unity的触摸屏坐标不是左上角，而是左下角。 所以这里我把精灵的锚点也设置成了左下角，注意上图中的pixels to units 请设置成100。   </p><p>触摸屏坐标：就是用Input.mousePosition 获取用户触摸屏幕手指 或者 鼠标的位置。  </p><p>实际坐标：unity的实际坐标是笛卡尔坐标系，00点是在正中心，X轴向右是正，向左是负。Y轴向上是正，向下是负。  </p><p>这样问题也就来了，我怎么把触摸屏的坐标换算到实际坐标系上？解决这个问题之前我们要先解决一个更重要的问题–摄像机的参数。  </p><p><strong>把Projection改成Orthographic 也就是正交摄像机。 然后要说的就是size = 3.2。这个3.2是怎么来的呢？想想我们的分辨率的高是多少？高是640.  640/2/100 ＝ 3.2. 除以2就是屏幕高的一半，除以100就是上面我们设置的 pixels to units ＝100 . 再举个例子如果你开发时的分辨率是1280X720 那么此时你的高就是720了。 720/2/100 = 3.6 那么此时摄像机的size 就应该写成3.6了。。 再唠叨一句，手游的分辨率自适应基本都是这样修改摄像机的size来实现的了。</strong></p><p>摄像机的参数搞清楚了，我们在来看看之前提出的问题？我怎么把触摸屏的坐标换算到实际坐标系上？ 把如下代码挂在一个Sprite对象上。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FishCommon</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> camHalfHeight;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> camHalfWidth;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.camHalfHeight = Camera.main.orthographicSize;</span><br><span class="line"><span class="keyword">this</span>.camHalfWidth = Camera.main.aspect * camHalfHeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//手指 或者 鼠标的坐标传进去</span></span><br><span class="line">Move(Input.mousePosition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>(<span class="params">Vector2 postions</span>)</span>&#123;</span><br><span class="line">Move(<span class="keyword">new</span> Vector3(postions.x,postions.y,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>(<span class="params">Vector3 postions</span>)</span>&#123;</span><br><span class="line"><span class="comment">//在这里进行坐标的换算</span></span><br><span class="line">transform.position =ScreenToWorld(postions);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Vector3 <span class="title">ScreenToWorld</span>(<span class="params">Vector3 postion</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Camera.main.ScreenToWorldPoint(postion);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Sprite </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Sprite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity移动</title>
      <link href="/2018/08/04/Unity%E7%A7%BB%E5%8A%A8/"/>
      <url>/2018/08/04/Unity%E7%A7%BB%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h3 id="Unity-移动"><a href="#Unity-移动" class="headerlink" title="Unity 移动"></a>Unity 移动</h3><hr><p>在Unity3d中,有很多方式可以改变物体的坐标,实现移动的目的,其本质是每一帧修改物体的Position;</p><h4 id="1-通过Transfrom组件移动物体"><a href="#1-通过Transfrom组件移动物体" class="headerlink" title="1.通过Transfrom组件移动物体"></a>1.通过Transfrom组件移动物体</h4><p>  Transfrom组件用于描述物体在空间中的状态,它包括 位置(Position),旋转(Rotation)和缩放(Scale).</p><h5 id="Transfrom-Translate"><a href="#Transfrom-Translate" class="headerlink" title="Transfrom.Translate"></a>Transfrom.Translate</h5><p>该方法可以移动物体从当前位置,移动到指定位置,并且可以选择参照的坐标系. 当需要进行坐标系转换时,可以考虑使用<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Translate</span>(<span class="params">Vector <span class="number">3</span> translation,Space relativeTo = Space.Self</span>)</span>;</span><br></pre></td></tr></table></figure></p><p>描述:</p><ul><li>移动变换的方向和距离translation。如果relativeTo被忽略或设置为Space.Self，则运动将相对于变换的局部坐标轴应用。（在场景视图中选择对象时显示的x，y和z轴。）如果relativeTo是Space.World，则相对于世界坐标系应用该运动.<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        transform.Translate(Vector3.forward * Time.deltaTime);</span><br><span class="line">        transform.Translate(Vector3.up * Time.deltaTime, Space.World);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Translate（<span class="keyword">float</span> x，<span class="keyword">float</span> y，<span class="keyword">float</span> z， Space relativeTo = Space.Self;</span><br></pre></td></tr></table></figure><p>描述:</p><ul><li>x沿着x轴，y沿着y轴和z沿着z轴移动变换。如果relativeTo被忽略或设置为Space.Self，则运动将相对于变换的局部坐标轴应用。（在场景视图中选择对象时显示的x，y和z轴。）如果relativeTo是Space.World，则相对于世界坐标系应用该运动。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        transform.Translate(<span class="number">0</span>, <span class="number">0</span>, Time.deltaTime);</span><br><span class="line">        transform.Translate(<span class="number">0</span>, Time.deltaTime, <span class="number">0</span>, Space.World);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Translate（Vector3 translation， Transform relativeTo）;</span><br></pre></td></tr></table></figure><p>描述:</p><ul><li>移动变换的方向和距离translation。该运动是相对于relativeTo本地坐标系应用的。如果relativeTo为null，则运动相对于世界坐标系应用。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        transform.Translate(Vector3.right * Time.deltaTime, Camera.main.transform);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Translate（<span class="keyword">float</span> x，<span class="keyword">float</span> y，<span class="keyword">float</span> z， Transform relativeTo）;</span><br></pre></td></tr></table></figure><p>描述:</p><ul><li>x沿着x轴，y沿着y轴和z沿着z轴移动变换。该运动是相对于relativeTo本地坐标系应用的。如果relativeTo为null，则运动相对于世界坐标系应用。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        transform.Translate(Time.deltaTime, <span class="number">0</span>, <span class="number">0</span>, Camera.main.transform);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Vector3"><a href="#Vector3" class="headerlink" title="Vector3"></a>Vector3</h4><h5 id="Vector3-Lerp-Vector3-Slerp-Vector3-MoveTowards"><a href="#Vector3-Lerp-Vector3-Slerp-Vector3-MoveTowards" class="headerlink" title="Vector3.Lerp, Vector3.Slerp, Vector3.MoveTowards"></a>Vector3.Lerp, Vector3.Slerp, Vector3.MoveTowards</h5><p>既可以表示三维空间中的一个点,也可以表示一个向量,这三个方法均为插值方法,Lerp为线性插值,Slerp为球形插值,MoveTowards在Lerp的基础上增加了限制最大速度的功能,当需要从指定A点移动到B点时,可以考虑使用这些方法;<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 Lerp（Vector3 a， Vector3 b，<span class="keyword">float</span> t）</span><br></pre></td></tr></table></figure></p><p>描述:</p><ul><li>在两个向量之间进行线性插值。在矢量a和插值之间b进行插值t。该参数t被钳位到范围[0，1]。这通常用于沿着两个端点之间的线找出点的一小部分（例如，在这些点之间逐渐移动一个对象）。<br>当t= 0返回时a。当t= 1时返回b。当t= 0.5时返回中间点a和b。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Transform startMarker;</span><br><span class="line">    <span class="keyword">public</span> Transform endMarker;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> speed = <span class="number">1.0</span>F;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> journeyLength;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        startTime = Time.time;</span><br><span class="line">        journeyLength = Vector3.Distance(startMarker.position, endMarker.position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> distCovered = (Time.time - startTime) * speed;</span><br><span class="line">        <span class="keyword">float</span> fracJourney = distCovered / journeyLength;</span><br><span class="line">        transform.position = Vector3.Lerp(startMarker.position, endMarker.position, fracJourney);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 Slerp（Vector3 a， Vector3 b，<span class="keyword">float</span> t）;</span><br></pre></td></tr></table></figure><p>描述:</p><ul><li>在两个向量之间进行球形插值。在数量a和b数量之间进行插值t。这与线性插值（又名“lerp”）之间的区别在于矢量被视为方向而不是空间中的点。返回的矢量的方向是由内插的角度和它的 大小是的大小之间内插from和to。<br>该参数t被钳位到范围[0，1]。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Transform sunrise;</span><br><span class="line">    <span class="keyword">public</span> Transform sunset;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> journeyTime = <span class="number">1.0</span>F;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startTime;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        startTime = Time.time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Vector3 center = (sunrise.position + sunset.position) * <span class="number">0.5</span>F;</span><br><span class="line">        center -= <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        Vector3 riseRelCenter = sunrise.position - center;</span><br><span class="line">        Vector3 setRelCenter = sunset.position - center;</span><br><span class="line">        <span class="keyword">float</span> fracComplete = (Time.time - startTime) / journeyTime;</span><br><span class="line">        transform.position = Vector3.Slerp(riseRelCenter, setRelCenter, fracComplete);</span><br><span class="line">        transform.position += center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 MoveTowards（Vector3 current， Vector3 target，<span class="keyword">float</span> maxDistanceDelta）;</span><br></pre></td></tr></table></figure><p>描述:</p><ul><li>current向一个target点移动一条直线。该函数返回的值是maxDistanceDelta更接近于和target/ 之间的一个点的点单位。如果目标距离较近， 则返回的值将等于目标值（即，该移动不会超过目标）。可以使用负值来将点从目标推开。currenttargetmaxDistanceDelta/maxDistanceDelta<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Transform target;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> speed;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> step = speed * Time.deltaTime;</span><br><span class="line">        transform.position = Vector3.MoveTowards(transform.position, target.position, step);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="Vector3-SmoothDamp"><a href="#Vector3-SmoothDamp" class="headerlink" title="Vector3.SmoothDamp"></a>Vector3.SmoothDamp</h5><p>该方法是可以平滑的从A逐渐移动到B点，并且可以控制速度，最常见的用法是相机跟随目标。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 SmoothDamp（Vector3 current， Vector3 target，<span class="keyword">ref</span> Vector3 currentVelocity，<span class="keyword">float</span> smoothTime，<span class="keyword">float</span> maxSpeed = Mathf.Infinity，<span class="keyword">float</span> deltaTime = Time.deltaTime）;</span><br></pre></td></tr></table></figure></p><ul><li>current: 当前位置</li><li>target: 需要达到的目标位置</li><li>currentVelocity: 当前的速度,每次调用该函数值都会被该函数修改</li><li>smoothTime: 到达目标位置需要的时间,较小的值将更快到达目标位置</li><li>maxSpeed: 选择性的允许限制最大虚度</li><li>deltaTime: 帧间隔时间<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Transform target;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> smoothTime = <span class="number">0.3</span>F;</span><br><span class="line">    <span class="keyword">private</span> Vector3 velocity = Vector3.zero;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Vector3 targetPosition = target.TransformPoint(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">5</span>, <span class="number">-10</span>));</span><br><span class="line">        transform.position = Vector3.SmoothDamp(transform.position, targetPosition, <span class="keyword">ref</span> velocity, smoothTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h4><h5 id="Transform-position"><a href="#Transform-position" class="headerlink" title="Transform.position"></a>Transform.position</h5><p>世界空间变换的位置</p><p>下面的例子通过更新位置使一个附加的球体反弹。这种反弹慢慢地结束了。这个位置也可以用来确定三维空间中的变换。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use Transform.position to bounce a sphere.</span></span><br><span class="line"><span class="comment">// The sphere and a quad are colored using materials.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleScript</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    Vector3 velocity     = <span class="keyword">new</span> Vector3(<span class="number">0.0</span>f, <span class="number">1.0</span>f, <span class="number">0.0</span>f);</span><br><span class="line">    <span class="keyword">float</span> floorHeight    = <span class="number">0.0</span>f;</span><br><span class="line">    <span class="keyword">float</span> sleepThreshold = <span class="number">0.05</span>f;</span><br><span class="line">    <span class="keyword">float</span> gravity        = <span class="number">-9.8</span>f;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        transform.position = <span class="keyword">new</span> Vector3(<span class="number">0.0</span>f, <span class="number">1.5</span>f, <span class="number">0.0</span>f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (velocity.magnitude &gt; sleepThreshold || transform.position.y &gt; floorHeight)</span><br><span class="line">        &#123;</span><br><span class="line">            velocity += <span class="keyword">new</span> Vector3(<span class="number">0.0</span>f, gravity * Time.fixedDeltaTime, <span class="number">0.0</span>f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        transform.position += velocity * Time.fixedDeltaTime;</span><br><span class="line">        <span class="keyword">if</span> (transform.position.y &lt;= floorHeight)</span><br><span class="line">        &#123;</span><br><span class="line">            transform.position = <span class="keyword">new</span> Vector3(<span class="number">0.0</span>f, floorHeight, <span class="number">0.0</span>f);</span><br><span class="line">            velocity.y = -velocity.y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="通过Rigidbody组件移动物体"><a href="#通过Rigidbody组件移动物体" class="headerlink" title="通过Rigidbody组件移动物体"></a>通过Rigidbody组件移动物体</h4><p>Rigidbody组件用于模拟物体的物理状态，比如物体受重力影响，物体被碰撞后的击飞等等。<br><strong>Rigidbody组件用于模拟物体的物理状态，比如物体受重力影响，物体被碰撞后的击飞等等。<br>注意：关于Rigidbody的调用均应放在FixedUpdate方法中，该方法会在每一次执行物理模拟前被调用。Unity5更改：是rigidbody变量未定义为Rigidbody类型，所以提示rigidbody无法访问velocity。Rigidbody都要定义一个变量(Rigidbody rigidbody;)，然后让该变量指向Rigidbody组件才能访问 rigidbody =GetComponent ();</strong></p><hr><hr><h5 id="Rigidbody-velocity"><a href="#Rigidbody-velocity" class="headerlink" title="Rigidbody.velocity"></a>Rigidbody.velocity</h5><ul><li>设置刚体速度可以让物体运动并且忽略静摩擦力，这会让物体快速从静止状态进入运动状态。</li><li>在大多数情况下，不应该直接修改速度，因为这会导致不切实际的行为。不要在每个物理步骤设置对象的速度，这会导致不切实际的物理模拟<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Rigidbody rb;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetButtonDown(<span class="string">"Jump"</span>))</span><br><span class="line">            rb.velocity = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="Rigidbody-AddForce"><a href="#Rigidbody-AddForce" class="headerlink" title="Rigidbody.AddForce"></a>Rigidbody.AddForce</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> AddForce（Vector3 force， ForceMode mode = ForceMode.Force）;</span><br></pre></td></tr></table></figure><p><strong>给Rigidbody增加一个力量。</strong></p><ul><li>沿force矢量方向连续施加力。指定ForceMode mode可以将力的类型更改为加速度，脉冲或速度变化。力量只能应用于活动的刚体。如果GameObject处于非活动状态，则AddForce不起作用。<br>默认情况下，一旦施加力，刚体的状态就设置为醒来，除非力是Vector3.zero。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> thrust;</span><br><span class="line">    <span class="keyword">public</span> Rigidbody rb;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rb.AddForce(transform.forward * thrust);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="Rigidbody-MovePosition"><a href="#Rigidbody-MovePosition" class="headerlink" title="Rigidbody.MovePosition"></a>Rigidbody.MovePosition</h5><p>刚体受到物理约束的情况下，移动到指定点<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> MovePosition（Vector3 position）;</span><br></pre></td></tr></table></figure></p><p>移动刚体position。<br>使用Rigidbody.MovePosition移动刚体，符合刚体的插值设置。<br>如果在Rigidbody上启用了Rigidbody插值，调用Rigidbody.MovePosition会导致渲染的任何中间帧中两个位置之间的平滑过渡。如果要在每个FixedUpdate中连续移动刚体，则应该使用此选项<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector3 teleportPoint;</span><br><span class="line">    <span class="keyword">public</span> Rigidbody rb;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        rb.MovePosition(transform.position + transform.forward * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="通过CharacterController组件移动物体"><a href="#通过CharacterController组件移动物体" class="headerlink" title="通过CharacterController组件移动物体"></a>通过CharacterController组件移动物体</h4><p>CharacterController用于控制第一人称或第三人称角色的运动，使用这种方式可以模拟人的一些行为，比如限制角色爬坡的最大斜度,步伐的高度等。</p><hr><h5 id="CharacterController-SimpleMove"><a href="#CharacterController-SimpleMove" class="headerlink" title="CharacterController.SimpleMove"></a>CharacterController.SimpleMove</h5><p>用于模拟简单运动，并且自动应用重力，返回值表示角色当前是否着地。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span> SimpleMove（Vector3 speed）;</span><br></pre></td></tr></table></figure></p><p>移动角色speed。<br>沿y轴的速度被忽略。速度以米/秒为单位。重力是自动应用的。如果角色接地，则返回。建议您每帧仅对Move或SimpleMove进行一次调用。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line">[<span class="meta">RequireComponent(typeof(CharacterController))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> speed = <span class="number">3.0</span>F;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> rotateSpeed = <span class="number">3.0</span>F;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        CharacterController controller = GetComponent&lt;CharacterController&gt;();</span><br><span class="line">        transform.Rotate(<span class="number">0</span>, Input.GetAxis(<span class="string">"Horizontal"</span>) * rotateSpeed, <span class="number">0</span>);</span><br><span class="line">        Vector3 forward = transform.TransformDirection(Vector3.forward);</span><br><span class="line">        <span class="keyword">float</span> curSpeed = speed * Input.GetAxis(<span class="string">"Vertical"</span>);</span><br><span class="line">        controller.SimpleMove(forward * curSpeed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h5 id="CharacterController-Move"><a href="#CharacterController-Move" class="headerlink" title="CharacterController.Move"></a>CharacterController.Move</h5><p>模拟更复杂的运动,重力需要通过代码实现，返回值表示角色与周围的碰撞信息。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CollisionFlags <span class="title">Move</span>(<span class="params">Vector3 motion</span>)</span>;</span><br></pre></td></tr></table></figure></p><p>一个更复杂的移动功能，采取绝对移动增量。<br>试图通过移动控制器motion，运动只会受到碰撞的限制。它会沿着对撞机滑动。 CollisionFlags是移动过程中发生的碰撞汇总。此功能不适用于任何重力<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> speed = <span class="number">6.0</span>F;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> jumpSpeed = <span class="number">8.0</span>F;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> gravity = <span class="number">20.0</span>F;</span><br><span class="line">    <span class="keyword">private</span> Vector3 moveDirection = Vector3.zero;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        CharacterController controller = GetComponent&lt;CharacterController&gt;();</span><br><span class="line">        <span class="keyword">if</span> (controller.isGrounded) &#123;</span><br><span class="line">            moveDirection = <span class="keyword">new</span> Vector3(Input.GetAxis(<span class="string">"Horizontal"</span>), <span class="number">0</span>, Input.GetAxis(<span class="string">"Vertical"</span>));</span><br><span class="line">            moveDirection = transform.TransformDirection(moveDirection);</span><br><span class="line">            moveDirection *= speed;</span><br><span class="line">            <span class="keyword">if</span> (Input.GetButton(<span class="string">"Jump"</span>))</span><br><span class="line">                moveDirection.y = jumpSpeed;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        moveDirection.y -= gravity * Time.deltaTime;</span><br><span class="line">        controller.Move(moveDirection * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GoogleAdMob广告接入</title>
      <link href="/2018/08/04/GoogleAdMob%E5%B9%BF%E5%91%8A%E6%8E%A5%E5%85%A5/"/>
      <url>/2018/08/04/GoogleAdMob%E5%B9%BF%E5%91%8A%E6%8E%A5%E5%85%A5/</url>
      <content type="html"><![CDATA[<h3 id="Google-AdMob接入"><a href="#Google-AdMob接入" class="headerlink" title="Google AdMob接入"></a>Google AdMob接入</h3><hr><h4 id="添加Google-AdMob步骤"><a href="#添加Google-AdMob步骤" class="headerlink" title="添加Google AdMob步骤"></a>添加Google AdMob步骤</h4><ul><li><a href="https://www.google.com/admob/" target="_blank" rel="noopener">注册长号(要越枪)</a></li><li>登录</li><li>进入Monetize</li><li>创建App</li><li>创建Ad unit(注意Ad unit ID)</li><li><a href="https://github.com/googleads/googleads-mobile-unity/releases/tag/v3.12.0" target="_blank" rel="noopener">下载Unity插件导入</a></li><li>在代码中调试广告</li></ul><hr><a id="more"></a><h4 id="创建广告ID及SDK下载"><a href="#创建广告ID及SDK下载" class="headerlink" title="创建广告ID及SDK下载"></a>创建广告ID及SDK下载</h4><p><a href="https://imgchr.com/i/PBBYv9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBYv9.png" alt="PBBYv9.png"></a></p><p><a href="https://imgchr.com/i/PBBuBq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBuBq.png" alt="PBBuBq.png"></a></p><p><a href="https://imgchr.com/i/PBB8CF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBB8CF.png" alt="PBB8CF.png"></a></p><p><a href="https://imgchr.com/i/PBBQEV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBQEV.png" alt="PBBQEV.png"></a></p><p><a href="https://imgchr.com/i/PBBKH0" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBKH0.png" alt="PBBKH0.png"></a></p><p><a href="https://imgchr.com/i/PBBlNT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBlNT.png" alt="PBBlNT.png"></a></p><p><a href="https://imgchr.com/i/PBB14U" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBB14U.png" alt="PBB14U.png"></a></p><p><a href="https://imgchr.com/i/PBBG34" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBG34.png" alt="PBBG34.png"></a></p><p><a href="https://imgchr.com/i/PBBJgJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBJgJ.png" alt="PBBJgJ.png"></a></p><hr><h4 id="初始化MobileAds"><a href="#初始化MobileAds" class="headerlink" title="初始化MobileAds"></a>初始化MobileAds</h4><p>官方文档给出的说法:</p><ul><li>在加载广告之前，让您的应用程序通过MobileAds.Initialize()使用您的AdMob 应用程序ID进行调用来初始化Mobile Ads SDK 。这只需要完成一次，理想情况下应用程序启动。您可以在AdMob用户界面中找到您应用的应用ID。<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">using</span> GoogleMobileAds.Api;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoogleMobileAdsDemoScript</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">if</span> UNITY_ANDROID</span></span><br><span class="line">            <span class="keyword">string</span> appId = <span class="string">"ca-app-pub-3940256099942544~3347511713"</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">elif</span> UNITY_IPHONE</span></span><br><span class="line">            <span class="keyword">string</span> appId = <span class="string">"ca-app-pub-3940256099942544~1458002511"</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">string</span> appId = <span class="string">"unexpected_platform"</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize the Google Mobile Ads SDK.</span></span><br><span class="line">        MobileAds.Initialize(appId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="创建横幅式广告"><a href="#创建横幅式广告" class="headerlink" title="创建横幅式广告"></a>创建横幅式广告</h5><p>横幅广告是矩形图片或文字广告，占据屏幕上的一个点。当用户与应用程序进行交互时，它们会保持在屏幕上，并且可以在一段时间后自动刷新<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">using</span> GoogleMobileAds.Api;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoogleMobileAdsDemoScript</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> BannerView bannerView;</span><br><span class="line">    …</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.RequestBanner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RequestBanner</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">if</span> UNITY_ANDROID</span></span><br><span class="line">            <span class="keyword">string</span> adUnitId = <span class="string">"ca-app-pub-3940256099942544/6300978111"</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">elif</span> UNITY_IPHONE</span></span><br><span class="line">            <span class="keyword">string</span> adUnitId = <span class="string">"ca-app-pub-3940256099942544/2934735716"</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">string</span> adUnitId = <span class="string">"unexpected_platform"</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a 320x50 banner at the top of the screen.</span></span><br><span class="line">        bannerView = <span class="keyword">new</span> BannerView(adUnitId, AdSize.Banner, AdPosition.Top);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BannerView构造函数参数:</p><ul><li>adUnitId- BannerView应从中加载广告的AdMob广告单元ID 。</li><li>AdSize- 您要使用的AdMob广告尺寸（详情请参阅横幅尺寸）。</li><li>AdPosition - 横幅广告应放置的位置。该 AdPosition枚举列出了有效的广告位置值<br>其他方式请参考:<a href="https://developers.google.com/admob/unity/start?hl=zh-CN" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AssetBundle基础篇</title>
      <link href="/2018/08/04/AssetBundle%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2018/08/04/AssetBundle%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="AssetsBundle基础篇-一"><a href="#AssetsBundle基础篇-一" class="headerlink" title="AssetsBundle基础篇(一)"></a>AssetsBundle基础篇(一)</h3><hr><h4 id="Unity-之-AssetsBundle"><a href="#Unity-之-AssetsBundle" class="headerlink" title="Unity 之 AssetsBundle"></a>Unity 之 AssetsBundle</h4><p><a href="https://docs.unity3d.com/2017.4/Documentation/Manual/AssetBundlesIntro.html" target="_blank" rel="noopener">官方文档</a></p><hr><h4 id="AssetsBundle的定义和作用"><a href="#AssetsBundle的定义和作用" class="headerlink" title="AssetsBundle的定义和作用"></a>AssetsBundle的定义和作用</h4><ul><li>AssetsBundle是一个压缩包,包含模型/贴图/预制体/声音/甚至整个场景,可以在游戏运行的时候被加载;</li><li>AssetsBundle自身保存着相互依赖的关系;</li><li>压缩包可以使用LZMA和LZ4压缩算法,减少包大小,更快的进行网络传输;<ul><li>LZMA:</li><li>LZ4:</li></ul></li><li>把一些可以下载的内容放在AssetsBundle里面,可以减少安装包的大小;<br>什么是AssetsBundle</li><li>它是一个存在于硬盘上的文件,可以称为压缩包,这个压缩包可以认为是一个文件夹,里面包含了很多个文件,这些文件可以分为两类:<ul><li>serialized file(序列化文件)<ul><li>serialized file:资源被打碎放在一个对象中,最后统一被写进一个单独的文件(只有一个)</li></ul></li><li>resource file(源文件)<ul><li>resource file:某些二进制资源(图片,声音)被单独保存,方便快速加载</li></ul></li></ul></li><li>它是一个AssetsBundle对象,我们可以通过代码从一个特定的压缩包加载出来的对象,这个对象包含了所有我们当初添加到这个压缩包里面的内容,我们可以通过这个对象加载出来使用</li></ul><hr><h4 id="AssetsBundle使用流程"><a href="#AssetsBundle使用流程" class="headerlink" title="AssetsBundle使用流程"></a>AssetsBundle使用流程</h4><ul><li><p>指定资源的AssetsBundle属性</p><ul><li>指定要打包的物品的AssetsBundle名字和后缀(<font color="1F89">在指定AB包名字的时候可以直接自定义目录AssetScene/AssetsBundle</font>)当AssetsBundle包多的时候可以进行目录结构的划分<br><a href="https://imgchr.com/i/PBBUD1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBUD1.png" alt="PBBUD1.png"></a></li></ul></li><li><p>构建AB包(打包AssetsBundle包)</p><ul><li>构建AB包的脚本一般都是在Editor模式下运行;<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> [<span class="meta">MenuItem(<span class="meta-string">"MyTools/BuildBundles"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BuildBundles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> buildPath = Application.dataPath + <span class="string">"/AssetsBundles"</span>;</span><br><span class="line">    <span class="keyword">if</span>(Directory.Exists(buildPath) == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Directory.CreateDirectory(buildPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构建AB包</span></span><br><span class="line">    BuildPipeline.BuildAssetBundles(buildPath, BuildAssetBundleOptions.None, BuildTarget.Android);</span><br><span class="line">    AssetDatabase.Refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><a id="more"></a><ul><li>上传AB包(把AssetsBundle包上传到服务器)</li><li>加载AB包里面的资源<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      loadPath = Application.dataPath + <span class="string">"/AssetsBundles/scene/cube.unityasset"</span>;</span><br><span class="line">      LoadAsset();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadAsset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//加载AssetsBundle包</span></span><br><span class="line">    AssetBundle ab =  AssetBundle.LoadFromFile(loadPath);</span><br><span class="line">    <span class="comment">//从AssetsBundle包取得资源</span></span><br><span class="line">    GameObject cube = ab.LoadAsset&lt;GameObject&gt;(<span class="string">"Cube"</span>);</span><br><span class="line">    Instantiate(cube);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="AssetsBundle的打包参考分组策略"><a href="#AssetsBundle的打包参考分组策略" class="headerlink" title="AssetsBundle的打包参考分组策略"></a>AssetsBundle的打包参考分组策略</h4><ul><li>逻辑实体分组<ul><li>一个UI界面或者所以得UI界面打成一个包(这个界面里面的贴图和布局信息一个包)</li><li>一个角色或者所有角色一个包(这个角色里面的模型/动画一个包)</li><li>所有场景所共享的部分打成打一个包(包括贴图和模型)</li></ul></li><li>按照类型分组<ul><li>所有声音资源打成一个包,所有Shader打成一个包,所有模型打成一个包,所有材质打成一个包</li></ul></li><li>按照使用分组<ul><li>把某一时间内使用的所有资源打成一个包.可以按照关卡分,一个关卡所需要的所有资源包括角色/贴图/声音等打成打一个包;也可以按照场景划分,一个场景所需要的资源一个包</li></ul></li></ul><h5 id="分组策略"><a href="#分组策略" class="headerlink" title="分组策略"></a>分组策略</h5><ul><li>把经常更新的资源放在一个单独的包里面,跟不经常更新的资源分离</li><li>把需要同时加载的资源放在一个包里面</li><li>可以把其他包共享的资源放在一个单独的包里面(根据依赖关系打包,减少重复打包重复资源,减小AB包大小)<br><a href="https://imgchr.com/i/PBBaHx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBaHx.png" alt="PBBaHx.png"></a></li><li>把一些需要同时加载的小资源打包成一个包</li><li>如果对于一个同一个资源有两个版本,可以考虑通过后缀来区分</li></ul><hr><h4 id="AssetBundle压缩方式"><a href="#AssetBundle压缩方式" class="headerlink" title="AssetBundle压缩方式"></a>AssetBundle压缩方式</h4><p>BuildAssetBundles(paramter 1,paramter 2,paramter 3);</p><ul><li>paramter 1: build的路径(任意本地路径)</li><li>paramter 2: BuildAssetsBundleOptions:<ul><li>BuildAssetsBundleOptions.None: 使用LZMA算法,压缩包更小,但是加载时间更长.使用之前需要整体解压,一旦被解压,这个包会使用LZ4算法重新压缩.使用资源的时候不需要整体解压.在下载的时候可以使用LZMA算法,一旦被下载了之后,它会使用LZ4算法保存到本地;</li><li>BuildAssetsBundleOptions.UncompressedAssetBundle: 不使用压缩,包体大,但是加载速度快;</li><li>BuildAssetsBundleOptions.ChunkBasedCompression: 使用LZ4算法压缩,压缩率没有LZMA高,但是我们可以加载指定资源而不用解压全部</li></ul></li></ul><font color="F011" size="4">注意:使用LZ4压缩,可以获得跟不压缩相媲美的加载速度,而且比不压缩文件包体要小</font><br>  - paramter 3: 构建平台,不同平台构建出来的包会有差异;<br><br>##### Manifest文件<br>- CRC: 文件校验码<br>- Assets: Assetbundle包含的资源<br>- Dependencies: 依赖的资源路径<br>##### 资源的依赖关系<br>- 如果一个或多个AssetBundle UnityEngine.Objects包含对UnityEngine.Object位于另一个包中的引用，则AssetBundles可以依赖于其他AssetBundle 。如果UnityEngine.Object包含对UnityEngine.Object不包含在任何AssetBundle 中的引用，则不会发生依赖关系。在这种情况下，在构建AssetBundle时，捆绑包所依赖的对象的副本将复制到捆绑包中。如果多个捆绑包中的多个对象包含对未分配到捆绑包的同一对象的引用，则每个对该对象具有依赖关系的捆绑包都将生成其自己的对象副本并将其打包到构建的AssetBundle中。<br>- 如果一个AssetBundle包含一个依赖项，那么在你试图实例化的对象被加载之前，加载包含这些依赖项的包是很重要的。Unity不会尝试自动加载依赖关系。<br>before loading the Material from Bun<br>- <font color="0Y993">before loading the Material from Bundle 1, you would need to load Bundle 2 into memory. It does not matter which order you load Bundle 1 and Bundle 2, the important takeaway is that Bundle 2 is loaded before loading the Material from Bundle 1. In the next section, we’ll discuss how you can use the AssetBundleManifest objects we touched on in the previous section to determine, and load, dependencies at runtime.(在从Bundle 1加载材料之前，需要将Bundle 2加载到内存中。加载Bundle 1和Bundle 2的顺序无关紧要，重要的是Bundle 2在加载Bundle 1的材料之前就已经加载好了)</font><h4 id="加载AssetsBundle加载"><a href="#加载AssetsBundle加载" class="headerlink" title="加载AssetsBundle加载"></a>加载AssetsBundle加载</h4><p><a href="https://docs.unity3d.com/2017.4/Documentation/Manual/AssetBundles-Native.html" target="_blank" rel="noopener">https://docs.unity3d.com/2017.4/Documentation/Manual/AssetBundles-Native.html</a></p><ul><li><strong>AssetBundle.LoadFromMemory(); //内存加载方式</strong></li><li><p><strong>AssetBundle.LoadFromFile(); //文件加载方式</strong></p><ul><li>从本地存储装载未压缩的包时，此API非常高效。如果捆绑包未压缩或压缩块（LZ4），LoadFromFile将直接从磁盘加载捆绑包。使用此方法加载完全压缩（LZMA）捆绑包将首先解压缩捆绑包，然后再将其加载到内存中<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoadFromFileExample</span> <span class="title">extends</span> <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="function">function <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myLoadedAssetBundle AssetBundle.LoadFromFile(Path.Combine(Application.streamingAssetsPath, <span class="string">"myassetBundle"</span>));</span><br><span class="line">        <span class="keyword">if</span> (myLoadedAssetBundle == <span class="literal">null</span>) &#123;</span><br><span class="line">            Debug.Log(<span class="string">"Failed to load AssetBundle!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> prefab = myLoadedAssetBundle.LoadAsset.&lt;GameObject&gt;(<span class="string">"MyObject"</span>);</span><br><span class="line">        Instantiate(prefab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>AssetBundle.LoadFromFileAsync();//文件异步加载方式</strong><br>该函数接收包含AssetBundle数据的字节数组。也可以根据需要传递CRC值。如果捆绑包是LZMA压缩的，它将在加载时解压缩AssetBundle。LZ4压缩束以其压缩状态加载.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">LoadFromMemoryAsync</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AssetBundleCreateRequest createRequest = AssetBundle.LoadFromMemoryAsync(File.ReadAllBytes(path));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> createRequest;</span><br><span class="line"></span><br><span class="line">    AssetBundle bundle = createRequest.assetBundle;</span><br><span class="line">    <span class="keyword">var</span> prefab = bundle.LoadAsset.&lt;GameObject&gt;(<span class="string">"MyObject"</span>);</span><br><span class="line">    Instantiate(prefab);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>WWW.LoadFromCacheOrDownload(); //从服务器或者本地加载(不在推荐的API)</strong><br>此API对于从远程服务器下载AssetBundles或加载本地AssetBundles</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoadFromCacheOrDownloadExample</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">Start</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!Caching.ready)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">var</span> www = WWW.LoadFromCacheOrDownload(<span class="string">"http://myserver.com/myassetBundle"</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">string</span>.IsNullOrEmpty(www.error))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(www.error);</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> myLoadedAssetBundle = www.assetBundle;</span><br><span class="line">        <span class="keyword">var</span> asset = myLoadedAssetBundle.mainAsset;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>UnityWebRequest //web加载(支持Unity5.3+)</strong><br>UnityWebRequest有一个特定的API调用来处理AssetBundles。首先，需要使用创建网络请求UnityWebRequest.GetAssetBundle。在返回请求之后，将请求对象传入DownloadHandlerAssetBundle.GetContent(UnityWebRequest)。此GetContent调用将返回您的AssetBundle对象。<br>也可以在下载捆绑包后assetBundle以DownloadHandlerAssetBundle类的属性加载AssetBundle，其效率为AssetBundle.LoadFromFile</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">InstantiateObject</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> uri = <span class="string">"file:///"</span> + Application.dataPath + <span class="string">"/AssetBundles/"</span> + assetBundleName;        UnityEngine.Networking.UnityWebRequest request = UnityEngine.Networking.UnityWebRequest.GetAssetBundle(uri, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> request.Send();</span><br><span class="line">        AssetBundle bundle = DownloadHandlerAssetBundle.GetContent(request);</span><br><span class="line">        <span class="comment">//还可以</span></span><br><span class="line">        AssetsBundle ab = (request.downloadHandler <span class="keyword">as</span> DownloadHandlerAssetBundle).assetBundle;</span><br><span class="line"></span><br><span class="line">        GameObject cube1 = ab.LoadAsset&lt;GameObject&gt;(<span class="string">"Cube1"</span>);</span><br><span class="line">        GameObject cube = bundle.LoadAsset&lt;GameObject&gt;(<span class="string">"Cube"</span>);</span><br><span class="line">        GameObject sprite = bundle.LoadAsset&lt;GameObject&gt;(<span class="string">"Sprite"</span>);</span><br><span class="line">        Instantiate(cube);</span><br><span class="line">        Instantiate(sprite);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="AssetBundleManifest文件加载"><a href="#AssetBundleManifest文件加载" class="headerlink" title="AssetBundleManifest文件加载"></a>AssetBundleManifest文件加载</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AssetBundle assetBundle = AssetBundle.LoadFromFile(manifestFilePath);</span><br><span class="line">AssetBundleManifest manifest = assetBundle.LoadAsset&lt;AssetBundleManifest&gt;(<span class="string">"AssetBundleManifest"</span>);</span><br><span class="line"><span class="comment">//获取这个包所以依赖的包的包名</span></span><br><span class="line"><span class="keyword">string</span>[] dependencies = manifest.GetAllDependencies(<span class="string">"assetBundle"</span>); <span class="comment">//Pass the name of the bundle you want the dependencies for.传递想要依赖项的包的名称。</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">string</span> dependency <span class="keyword">in</span> dependencies)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//遍历包名去加载需要的包</span></span><br><span class="line">    AssetBundle.LoadFromFile(Path.Combine(assetBundlePath, dependency));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="AssetsBundle卸载"><a href="#AssetsBundle卸载" class="headerlink" title="AssetsBundle卸载"></a>AssetsBundle卸载</h4><ul><li>减少内存的使用(从活动场景中移除时，Unity不会自动卸载对象)</li><li>可能导致丢失(不正确地卸载AssetBundle可能导致在内存中复制对象或其他不合需要的情况，例如缺少纹理)<br>什么时候去卸载资源</li><li>AssetsBundle.Unload(true):<ul><li>卸载从AssetBundle加载的所有GameObjects（及其依赖项）。这不包括复制的GameObjects（例如实例化的GameObjects），因为它们不再属于AssetBundle。发生这种情况时，从该资产包中加载（并且仍属于它）的纹理从场景中的GameObjects中消失，并且Unity将它们视为缺失的纹理。</li></ul></li><li><p>AssetsBundle.Unload(false):</p><ul><li>卸载所有没有被使用的资源</li></ul><p>如果AB.Unload（true）被调用。活动场景中的任何M实例也将被卸载并销毁。<br>如果改为调用AB.Unload（false），它会打破M和AB当前实例的关联。<br><a href="https://imgchr.com/i/PBB0UK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBB0UK.png" alt="PBB0UK.png"></a><br>如果稍后再次加载AB并调用AB.LoadAsset（），Unity将不会将M的现有副本重新链接到新加载的材质。反而会有两个M加载的副本。<br><a href="https://imgchr.com/i/PBBB4O" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBB4O.png" alt="PBBB4O.png"></a></p><p><a href="https://imgchr.com/i/PBBrCD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBBrCD.png" alt="PBBrCD.png"></a></p><p>Generally, using AssetBundle.Unload(false) does not lead to an ideal situation. Most projects should use AssetBundle.Unload(true) to keep from duplicating objects in memory.</p></li></ul><p>Most projects should use AssetBundle.Unload(true) and adopt a method to ensure that Objects are not duplicated. Two common methods are:</p><ul><li><p>Having well-defined points during the application’s lifetime at which transient AssetBundles are unloaded, such as between levels or during a loading screen.</p></li><li><p>Maintaining reference-counts for individual Objects and unload AssetBundles only when all of their constituent Objects are unused. This permits an application to unload &amp; reload individual Objects without duplicating memory.</p></li></ul><p>If an application must use AssetBundle.Unload(false), then individual Objects can only be unloaded in two ways:</p><ul><li><p>Eliminate all references to an unwanted Object, both in the scene and in code. After this is done, call Resources.UnloadUnusedAssets.</p></li><li><p>Load a scene non-additively. This will destroy all Objects in the current scene and invoke Resources.UnloadUnusedAssets automatically.</p></li></ul><p>If you’d rather not manage loading Asset Bundes, dependencies, and Assets yourself, you might find yourself in need of the AssetBundle Manager.</p><hr><h4 id="文件校验"><a href="#文件校验" class="headerlink" title="文件校验"></a>文件校验</h4><p>CRC/ MD5/ SHA1</p><ul><li>相同点<ul><li>CRC/ MD5/ SHA1都是通过对数据进行计算,来生成一个校验值,该校验值用来校验数据的完整性</li></ul></li><li>不同点</li><li>算法不同:CRC采用多项式除法,MD5和SHA1使用的是替换,轮转等方法</li><li>校验值长度不同: CRC校验的长度跟其多项式有关系,一般为16或者32位,MD5是16字节(128位),SHA1是20个字节(160位)</li><li>校验值的称呼不同: CRC一般称为CRC值;MD5和SHA1一般叫做哈希值或者散列值;</li><li>安全性不同: 指的是检错的能力,即数据的错误能通过校验位检测出来,CRC的安全性跟多项式有很大关系,相对于MD5和SHA1要弱很多;MD5的安全性很搞(不过已经被破解了);SHA1的安全性最高;</li><li>效率不同: CRC的效率很高,MD5和SHA1比较慢</li><li>用途不同: CRC一般用作通讯数据检验,MD5和SHA1用于安全领域,比如文件校验,数字签名</li></ul>]]></content>
      
      <categories>
          
          <category> 热更新 </category>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热更新 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bmob支付</title>
      <link href="/2018/08/04/Bmob%E6%94%AF%E4%BB%98/"/>
      <url>/2018/08/04/Bmob%E6%94%AF%E4%BB%98/</url>
      <content type="html"><![CDATA[<h3 id="Bmob支付"><a href="#Bmob支付" class="headerlink" title="Bmob支付"></a>Bmob支付</h3><hr><p>移动应用后端云服务(<a href="http://bmob.cn" target="_blank" rel="noopener">http://bmob.cn</a>)</p><h4 id="提供的产品"><a href="#提供的产品" class="headerlink" title="提供的产品:"></a>提供的产品:</h4><ul><li>ios和Android云数据库</li><li>ios和Android支付</li><li>ios和Android聊天组件</li><li>cocos2d-x SDK云数据库</li><li>Unity云数据库</li><li>ios和Android短信</li><li>JavaScript SDK云数据库</li></ul>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BlendTree</title>
      <link href="/2018/08/04/BlendTree/"/>
      <url>/2018/08/04/BlendTree/</url>
      <content type="html"><![CDATA[<h3 id="动画状态机-混合树"><a href="#动画状态机-混合树" class="headerlink" title="动画状态机(混合树)"></a>动画状态机(混合树)</h3>]]></content>
      
      <categories>
          
          <category> MecanimAnimator </category>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MecanimAnimator </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UnityAPS广告系统</title>
      <link href="/2018/08/04/UnityAPS%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/08/04/UnityAPS%E5%B9%BF%E5%91%8A%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h3 id="UnityAPS"><a href="#UnityAPS" class="headerlink" title="UnityAPS"></a>UnityAPS</h3><hr><p>unity官方广告平台<br><a href="https://unity3d.com/cn/unity/features/ads" target="_blank" rel="noopener">UnityAPS官网</a></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UnityAPI解析</title>
      <link href="/2018/08/04/UnityAPI%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/08/04/UnityAPI%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="UnityAPI文档"><a href="#UnityAPI文档" class="headerlink" title="UnityAPI文档"></a>UnityAPI文档</h3><p><a href="http://www.ceeger.com/Manual/" target="_blank" rel="noopener">Unity圣典</a><br><a href="https://docs.unity3d.com/ScriptReference/" target="_blank" rel="noopener">Unity官方手册</a><br><a href="http://docs.manew.com/" target="_blank" rel="noopener">蛮牛手册</a></p><p><strong>API(Application Programming Interface),即应用程序编程接口,是一些预定义的函数,目的是提供应用程序与开发人员基于某软件或者硬件得以访问一组例程的能力,而无需访问源码,或去理解内部工作机制细节</strong></p><h4 id="Unity-脚本事件函数执行顺序和生命周期"><a href="#Unity-脚本事件函数执行顺序和生命周期" class="headerlink" title="Unity 脚本事件函数执行顺序和生命周期:"></a>Unity 脚本事件函数执行顺序和生命周期:</h4><p><a href="https://imgchr.com/i/PB0AyR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PB0AyR.png" alt="PB0AyR.png"></a></p><hr><h4 id="第一章-Application类"><a href="#第一章-Application类" class="headerlink" title="第一章: Application类"></a>第一章: Application类</h4><p>Application类不含实例属性和实例方法,在脚本中通过直接调用Application类的静态属性和方法来控制程序的运行时的数据;<br>Application静态属性:</p><ul><li>1.dataPath属性: 数据文件路径 {public static string dataPath{get;}}</li><li>2.Application.dataPath: 返回程序的数据文件所在文件夹的路径(只读).返回路径为相对路径,不同游戏平台的数据文件保存路径不同;</li><li>3.Application.PersistentDataPath: 返回一个持久化数据存储目录的路径(只读),可以在此路径下存储一些持久化的数据文件.同一平台,不同程序中调用此属性,返回值相同.</li><li>4.Application.streamingAssetsPath: 此属性用于返回流数据的缓存目录,返回路径为相对路径,适合设置一些外部文件的路径.</li><li>5.Application.temporaryCachePath: 此属性用于返回一个临时数据目录(只读),对于同一平台,不同程序调用此属性,返回值相同.<br>loadedLevel属性 : 关卡索引</li><li>1.public static int loadedLevel{ get; }</li><li>2.Application.loadedLevel 返回当前场景的索引值</li><li>3.Application.loadedLevelName 返回当前场景的名字</li><li>4.Application.isLoadingLevel 是否有场景被加载</li><li>5.Application.LevelCount 游戏中可被加载的场景数量</li><li>6.Application.platform 当前游戏的运行平台,返回值为枚举类型</li><li>7.Application.isPlaying 当前游戏是否正在运行</li><li>8.Application.isEditor 游戏是否处于Unity编辑模式<br>Application类静态方法:</li><li>1.CaptureScreenshot方法 : 截屏</li><li>2.public static void CaptureScreenshot(string filename);</li><li>3.public static void CaptureScreenshot(string filename, int superSize);<br>  参数filename 截屏文件名称 superSize放大系数,默认为0,即不放大<br>  此方法截取当前游戏画面并保存为PNG格式,文件默认保存在根目录下,若有重名文件则替换.</li><li>4.LoadLevelAdditiveAsync方法 : 异步加载关卡</li><li>5.public static AsynvOperation LoadLevelAdditiveAsync(int index);//参数关卡索引值</li><li>6.public static AsynvOperation</li><li>LoadLevelAdditiveAsync(string levelName);//参数关卡名称<br>  此方法用于按照关卡名字在后台异步加载关卡到当前场景中,此方法只是将新关卡加载到当前场景,当前场景的原有内容不会被销毁.</li><li>7.AsynvOperation colve = public static AsynvOperation &gt;&gt;LoadLevelAdditiveAsync(int index);</li><li>8.colve.isDone 是否加载完成</li><li>9.colve.progress 加载进度</li><li>10.RegisterLogCallback方法 :注册委托<br>  public static void RegisterLogCallback(Application.LogCallback handler);参数是委托的名字<br>  此方法用于注册一个委托来调用日志信息</li></ul><hr><a id="more"></a><h4 id="Animator-StringToHash-字符串转换为哈希值"><a href="#Animator-StringToHash-字符串转换为哈希值" class="headerlink" title="Animator.StringToHash 字符串转换为哈希值"></a>Animator.StringToHash 字符串转换为哈希值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static int StringToHash(string name)</span><br></pre></td></tr></table></figure><ul><li>Parameters参数:<br>   - name The string to convert to id(该字符串转换到id);</li><li>Generates an parameter id fron a string:<br>   - 从字符串生成一个参数ID</li><li>Ids are used for optimized setters and getters on parameters<br>当使用Animator时,如果要引用某个状态或者参数,有两种方法:</li><li>1.通过字符串名称</li><li>2.通过整数”Hash Id”<ul><li>通过”Hush Id”更有优势,因为不容易出错,且更加高效,两种的使用方式不同</li><li>Animation状态或者Parameters的字符串(Tag)需要通过对象使用;但是”Hush Id”不惜要,它是Animator的静态方法;</li></ul></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animas</span> : <span class="title">MonoBehaciour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//字符串转换为哈希值</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> speedId = Animator.StringToHash(<span class="string">"Speed"</span>);</span><br><span class="line">  <span class="keyword">private</span> Animator anim;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    anim = GetCompent&lt;Animator&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    anim.SetFloat(speedId,Input.GetAxis(<span class="string">"Vertival"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity异步加载场景</title>
      <link href="/2018/08/04/Unity%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E5%9C%BA%E6%99%AF/"/>
      <url>/2018/08/04/Unity%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E5%9C%BA%E6%99%AF/</url>
      <content type="html"><![CDATA[<h3 id="Unity异步加载"><a href="#Unity异步加载" class="headerlink" title="Unity异步加载"></a>Unity异步加载</h3><hr><ul><li>协同程序的异步加载:<ul><li>协同程序是在主线程序运行的时间内,同时开启另一段逻辑的处理来协助当前程序的执行(开启协程就是开启一段可以与主线程并行的逻辑);</li></ul></li><li>为什么异步加载<ul><li>为了节省内存，游戏的一些资源往往需要在运行时（runtime）动态加载。如果资源本身加载比较耗时，采用同步方法会产生卡顿现象，对此的解决方法通常采用多线程或者使用引擎本身自带的异步加载方法。在Unity开发中，由于一些方法（如Resources.Load）本身不支持在其它线程调用，因此多线程的使用会受到限制；而Unity脚本API对许多加载方式都有相应的异步方法<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Loading</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Slider loadingSlider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentProgress;<span class="comment">//当前进度 0-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toProgress;<span class="comment">//加载进度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义异步操作</span></span><br><span class="line">    <span class="keyword">private</span> AsyncOperation <span class="keyword">async</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StartCoroutine(LoadScene());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">IEnumerator <span class="title">LoadScene</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//异步加载场景</span></span><br><span class="line">        <span class="keyword">async</span> = UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">async</span>.allowSceneActivation = <span class="literal">false</span>;<span class="comment">//默认异步加载是不被开启</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">async</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">async</span> == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">async</span>.progress &lt; <span class="number">0.9</span>f)</span><br><span class="line">        &#123;</span><br><span class="line">            toProgress = (<span class="keyword">int</span>)<span class="keyword">async</span>.progress * <span class="number">100</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            toProgress = <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentProgress &lt; toProgress )</span><br><span class="line">        &#123;</span><br><span class="line">            currentProgress++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        loadingSlider.<span class="keyword">value</span> = currentProgress / <span class="number">100</span>f;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentProgress == <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//加载完成后激活异步加载</span></span><br><span class="line">            <span class="keyword">async</span>.allowSceneActivation = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EasyAR对焦</title>
      <link href="/2018/08/04/EasyAR%E5%AF%B9%E7%84%A6/"/>
      <url>/2018/08/04/EasyAR%E5%AF%B9%E7%84%A6/</url>
      <content type="html"><![CDATA[<h3 id="EasyAR相机对焦"><a href="#EasyAR相机对焦" class="headerlink" title="EasyAR相机对焦"></a>EasyAR相机对焦</h3><hr><ul><li>1.直接在EasyAR_Startup下面的CameraDevice身上的CameraDeviceBehaviour 脚本上面写就行了;</li><li>2.EasyAR官网给出的API介绍:<br><a href="https://imgchr.com/i/PB036A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PB036A.png" alt="PB036A.png"></a></li><li>3.这个是CameraDeviceBaseBehaviour里面的函数:<br><a href="https://imgchr.com/i/PB0Jmt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PB0Jmt.png" alt="PB0Jmt.png"></a></li></ul><a id="more"></a><p>  <a href="https://imgchr.com/i/PB0Y0P" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PB0Y0P.png" alt="PB0Y0P.png"></a></p><ul><li>4.可以去看下,里面的其他功能也可以根据需要去调用实现CameraDeviceBaseBehaviour里面的函数:<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EasyAR</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CameraDeviceBehaviour</span> : <span class="title">CameraDeviceBaseBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">base</span>.Start();</span><br><span class="line">            SetFocusMode(FocusMode.Continousauto);<span class="comment">//连续自动对焦模式</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> AR </category>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vuforia对焦</title>
      <link href="/2018/08/04/Vuforia%E5%AF%B9%E7%84%A6/"/>
      <url>/2018/08/04/Vuforia%E5%AF%B9%E7%84%A6/</url>
      <content type="html"><![CDATA[<h3 id="VuforiaAR-相机对焦"><a href="#VuforiaAR-相机对焦" class="headerlink" title="VuforiaAR 相机对焦"></a>VuforiaAR 相机对焦</h3><hr><p>做AR的是经常会用到相机对焦功能,就记录下来,方便以后查询:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  vuforia = VuforiaARController.Instance;</span><br><span class="line">    vuforia.RegisterVuforiaStartedCallback();<span class="comment">//Vuforia的回调函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 自动对焦模式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnVuforiaStarted</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CameraDevice.Instance.SetFocusMode(CameraDevice.FocusMode.FOCUS_MODE_CONTINUOUSAUTO);<span class="comment">//1.FocusMode.FOCUS_MODE_TRIGGERAUTO对焦一次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 切换前后相机</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SwitchCameraDirection</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CameraDevice.Instance.Stop();<span class="comment">//停止当前相机</span></span><br><span class="line">    CameraDevice.Instance.Deinit();<span class="comment">//取消初始化</span></span><br><span class="line"></span><br><span class="line">    CameraDevice.Instance.Init(CameraDevice.CameraDirection.CAMERA_FRONT);<span class="comment">//初始化相机</span></span><br><span class="line">    CameraDevice.Instance.Start();<span class="comment">//打开相机</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>打开闪光灯</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TurnOnFlash</span>(<span class="params"><span class="keyword">bool</span> ON</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CameraDevice.Instance.SetFlashTorchMode(ON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> AR </category>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>不用第三变量交换两个变量的值</title>
      <link href="/2018/08/04/%E4%B8%8D%E7%94%A8%E7%AC%AC%E4%B8%89%E5%8F%98%E9%87%8F%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/"/>
      <url>/2018/08/04/%E4%B8%8D%E7%94%A8%E7%AC%AC%E4%B8%89%E5%8F%98%E9%87%8F%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/</url>
      <content type="html"><![CDATA[<h3 id="C-不使用第三变量交换两个变量的值"><a href="#C-不使用第三变量交换两个变量的值" class="headerlink" title="C#不使用第三变量交换两个变量的值"></a>C#不使用第三变量交换两个变量的值</h3><hr><h4 id="1-算术运算"><a href="#1-算术运算" class="headerlink" title="1.算术运算"></a>1.算术运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">简单来说，就是通过普通的+和-运算来实现。代码如下：  </span><br><span class="line">int a,b;  </span><br><span class="line">a=10;b=12;  </span><br><span class="line">a=b-a;  //a=2;b=12  </span><br><span class="line">b=b-a;  //a=2;b=10  </span><br><span class="line">a=b+a;  //a=10;b=10</span><br><span class="line">通过以上运算，a和b中的值就进行了交换。表面上看起来很简单，但是不容易想到，尤其是在习惯标准算法之后。  </span><br><span class="line">它的原理是：把a、b看做数轴上的点，围绕两点间的距离来进行计算。  </span><br><span class="line">具体过程：第一句“a=b-a”求出ab两点的距离，并且将其保存在a中；第二句“b=b-a”求出a到原点的距离（b到原点的距离与ab两点距离之差），并且将其保存在b中；第三句“a=b+a”求出b到原点的距离（a到原点距离与ab两点距离之和），并且将其保存在a中。完成交换。  </span><br><span class="line">此算法与标准算法相比，多了三个计算的过程，但是没有借助临时变量。（以下称为算术算法）</span><br></pre></td></tr></table></figure><hr><h4 id="2-位运算"><a href="#2-位运算" class="headerlink" title="2.位运算"></a>2.位运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过异或运算也能实现变量的交换，这也许是最为神奇的，请看以下代码：  </span><br><span class="line">int a=10,b=12; //a=1010^b=1100;  </span><br><span class="line">a=a^b;         //a=0110^b=1100;  </span><br><span class="line">b=a^b;         //a=0110^b=1010;  </span><br><span class="line">a=a^b;         //a=1100=12;b=1010;  </span><br><span class="line">此算法能够实现是由异或运算的特点决定的，通过异或运算能够使数据中的某些位翻转，其他位不变。这就意味着任意一个数与任意一个给定的值连续异或两次，值不变。  </span><br><span class="line">即：a^b^b=a。将a=a^b代入b=a^b则得b=a^b^b=a;同理可以得到a=b^a^a=b;轻松完成交换。</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h4 id="3-指针修改内存地址"><a href="#3-指针修改内存地址" class="headerlink" title="3.指针修改内存地址"></a>3.指针修改内存地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">因为对地址的操作实际上进行的是整数运算，比如：两个地址相减得到一个整数，表示两个变量在内存中的储存位置隔了多少个字节；地址和一个整数相加即“a+10”表示以a为基地址的在a后10个a类数据单元的地址。所以理论上可以通过和算术算法类似的运算来完成地址的交换，从而达到交换变量的目的。即：  </span><br><span class="line">int *a,*b; //假设  </span><br><span class="line">*a=new int(10);  </span><br><span class="line">*b=new int(20);       //&amp;a=0x00001000h,&amp;b=0x00001200h  </span><br><span class="line">a=(int*)(b-a);        //&amp;a=0x00000200h,&amp;b=0x00001200h  </span><br><span class="line">b=(int*)(b-a);        //&amp;a=0x00000200h,&amp;b=0x00001000h  </span><br><span class="line">a=(int*)(b+int(a));   //&amp;a=0x00001200h,&amp;b=0x00001000h  </span><br><span class="line">通过以上运算a、b的地址真的已经完成了交换，且a指向了原先b指向的值，b指向原先a指向的值了吗？上面的代码可以通过编译，但是执行结果却令人匪夷所思！原因何在？  </span><br><span class="line">首先必须了解，操作系统把内存分为几个区域：系统代码/数据区、应用程序代码/数据区、堆栈区、全局数据区等等。在编译源程序时，常量、全局变量等都放入全局数据区，局部变量、动态变量则放入堆栈区。这样当算法执行到“a=(int*)(b-a)”时，a的值并不是0x00000200h，而是要加上变量a所在内存区的基地址，实际的结果是：0x008f0200h，其中0x008f即为基地址，0200即为a在该内存区的位移。它是由编译器自动添加的。因此导致以后的地址计算均不正确，使得a,b指向所在区的其他内存单元。再次，地址运算不能出现负数，即当a的地址大于b的地址时，b-a&lt;0，系统自动采用补码的形式表示负的位移，由此会产生错误，导致与前面同样的结果。  </span><br><span class="line">有办法解决吗？当然！以下是改进的算法：  </span><br><span class="line">if(a  </span><br><span class="line">&#123;  </span><br><span class="line">a=(int*)(b-a);  </span><br><span class="line">b=(int*)(b-(int(a)&amp;0x0000ffff));  </span><br><span class="line">a=(int*)(b+(int(a)&amp;0x0000ffff));  </span><br><span class="line">&#125;  </span><br><span class="line">else  </span><br><span class="line">&#123;  </span><br><span class="line">b=(int*)(a-b);  </span><br><span class="line">a=(int*)(a-(int(b)&amp;0x0000ffff));  </span><br><span class="line">b=(int*)(a+(int(b)&amp;0x0000ffff));  </span><br><span class="line">&#125;  </span><br><span class="line">算法做的最大改进就是采用位运算中的与运算“int(a)&amp;0x0000ffff”，因为地址中高16位为段地址，后16位为位移地址，将它和0x0000ffff进行与运算后，段地址被屏蔽，只保留位移地址。这样就原始算法吻合，从而得到正确的结果。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity获取设备分辨率</title>
      <link href="/2018/08/04/Unity%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%88%86%E8%BE%A8%E7%8E%87/"/>
      <url>/2018/08/04/Unity%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%88%86%E8%BE%A8%E7%8E%87/</url>
      <content type="html"><![CDATA[<h3 id="Unity获取设备分辨率"><a href="#Unity获取设备分辨率" class="headerlink" title="Unity获取设备分辨率"></a>Unity获取设备分辨率</h3><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">        Resolution[] resolutions = Screen.resolutions;    </span><br><span class="line">        <span class="comment">//设置分辨率</span></span><br><span class="line">        Screen.SetResolution(resolutions[<span class="number">0</span>].width, resolutions[<span class="number">0</span>].height, <span class="literal">true</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity创建解析Json</title>
      <link href="/2018/08/04/Unity%E5%88%9B%E5%BB%BA%E8%A7%A3%E6%9E%90Json/"/>
      <url>/2018/08/04/Unity%E5%88%9B%E5%BB%BA%E8%A7%A3%E6%9E%90Json/</url>
      <content type="html"><![CDATA[<h3 id="Json操作-两种方式"><a href="#Json操作-两种方式" class="headerlink" title="Json操作 两种方式:"></a>Json操作 两种方式:</h3><ul><li>一.<a href="https://litjson.net/" target="_blank" rel="noopener">LitJson</a></li><li>二.Unity自带的解析类:JsonUtility</li></ul><hr><h4 id="1-Josn的描述"><a href="#1-Josn的描述" class="headerlink" title="1.Josn的描述"></a>1.Josn的描述</h4><ul><li><p>{“key”:”val”,”key”,”val”}</p><ul><li>//{“name”:”张三”,”age”:”18”}</li></ul></li><li><p>Json中{} == C#中的对象</p></li><li><p>Json中[] == C#中的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.(json)[1,2,3] == (C#)int[]</span><br><span class="line"></span><br><span class="line">2.(json)[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;] == (C#)string[]</span><br><span class="line"></span><br><span class="line">3.(json)[&#123;&quot;name&quot;:&quot;Lili&quot;&#125;,&#123;&quot;age&quot;:&quot;16&quot;,&#123;&quot;gender&quot;:&quot;girl&quot;&#125;&#125;,</span><br><span class="line">  &#123;&quot;name&quot;:&quot;dashan&quot;&#125;,&#123;&quot;age&quot;:&quot;18&quot;,&#123;&quot;gender&quot;:&quot;boy&quot;&#125;&#125;] == (C#)Person[]</span><br><span class="line"></span><br><span class="line">Class Person</span><br><span class="line">&#123;</span><br><span class="line">  string name;</span><br><span class="line">  int age;</span><br><span class="line">  string gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-1-使用JSonUtility创建Json"><a href="#1-1-使用JSonUtility创建Json" class="headerlink" title="1.1 使用JSonUtility创建Json"></a>1.1 使用JSonUtility创建Json</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatJson</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="comment">//&#123;"name":"Lili" , "age":20 &#125;</span></span><br><span class="line"></span><br><span class="line">     Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">     p1.name = <span class="string">"Lili"</span>;</span><br><span class="line">     p1.age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//转换为Json字符串</span></span><br><span class="line">     <span class="keyword">string</span> jsonStr = JsonUtility.ToJson(p1);</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">/*&#123;"Person":</span></span><br><span class="line"><span class="comment">      *  [</span></span><br><span class="line"><span class="comment">      *    &#123;</span></span><br><span class="line"><span class="comment">      *      "name" : "hehe",</span></span><br><span class="line"><span class="comment">      *      "age" : 34,</span></span><br><span class="line"><span class="comment">      *      "gender" : "boy"</span></span><br><span class="line"><span class="comment">      *    &#125;,</span></span><br><span class="line"><span class="comment">      *    &#123;</span></span><br><span class="line"><span class="comment">      *      "name" : "dada",</span></span><br><span class="line"><span class="comment">      *      "age" : 19,</span></span><br><span class="line"><span class="comment">      *      "gender" : "girl"</span></span><br><span class="line"><span class="comment">      *     &#125;</span></span><br><span class="line"><span class="comment">      *  ]</span></span><br><span class="line"><span class="comment">      * &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">     Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">     p2.name = <span class="string">"hehe"</span>;</span><br><span class="line">     p2.age = <span class="number">34</span>;</span><br><span class="line">     p2.gender = <span class="string">"boy"</span>;</span><br><span class="line"></span><br><span class="line">     Person p3 = <span class="keyword">new</span> Person();</span><br><span class="line">     p3.name = <span class="string">"dada"</span>;</span><br><span class="line">     p3.age = <span class="number">19</span>;</span><br><span class="line">     p3.gender = <span class="string">"girl"</span>;</span><br><span class="line"></span><br><span class="line">     Person[] ps = <span class="keyword">new</span> Person[] &#123; p2, p3 &#125;;</span><br><span class="line">     Persons pers = <span class="keyword">new</span> Persons();</span><br><span class="line">     pers.persons = ps;</span><br><span class="line"></span><br><span class="line">     jsonStr = JsonUtility.ToJson(pers);</span><br><span class="line">     print(jsonStr);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]<span class="comment">//要跟Json之间相互转换需要先序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">string</span> name;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">string</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Persons</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span> Person[] persons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-2-使用JSonUtility解析Json"><a href="#1-2-使用JSonUtility解析Json" class="headerlink" title="1.2 使用JSonUtility解析Json"></a>1.2 使用JSonUtility解析Json</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析Json</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">ParsJson</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     Persons newPersons =  JsonUtility.FromJson&lt;Persons&gt;(jsonStr);</span><br><span class="line">     print(newPersons.persons[<span class="number">0</span>].name);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-1LitJson"><a href="#2-1LitJson" class="headerlink" title="2.1LitJson"></a>2.1LitJson</h4><h5 id="第一种创建和解析方式"><a href="#第一种创建和解析方式" class="headerlink" title="第一种创建和解析方式"></a>第一种创建和解析方式</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Heros</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Hero[] heros;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LitJsonDemo</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;"heros":</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                 "name" : "lisi",</span></span><br><span class="line"><span class="comment">                 "age" : 18,</span></span><br><span class="line"><span class="comment">                 "gender" : "boy"</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                 "name" : "zhangsan",</span></span><br><span class="line"><span class="comment">                 "age" : 22,</span></span><br><span class="line"><span class="comment">                 "gender" : "boy"</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">    ]   </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Function01</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//创建json</span></span><br><span class="line">        Hero hero1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        hero1.name = <span class="string">"lisi"</span>;</span><br><span class="line">        hero1.age = <span class="number">18</span>;</span><br><span class="line">        hero1.gender = <span class="string">"boy"</span>;</span><br><span class="line"></span><br><span class="line">        Hero hero2 = <span class="keyword">new</span> Hero();</span><br><span class="line">        hero2.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">        hero2.age = <span class="number">22</span>;</span><br><span class="line">        hero2.gender = <span class="string">"boy"</span>;</span><br><span class="line"></span><br><span class="line">        Heros heros = <span class="keyword">new</span> Heros();</span><br><span class="line">        heros.heros = <span class="keyword">new</span> Hero[] &#123; hero1, hero2 &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> jsonStr = JsonMapper.ToJson(heros);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析json</span></span><br><span class="line">        Heros newheros = JsonMapper.ToObject&lt;Heros&gt;(jsonStr);</span><br><span class="line">        print(newheros.heros[<span class="number">0</span>].name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二种创建和解析方式"><a href="#第二种创建和解析方式" class="headerlink" title="第二种创建和解析方式"></a>第二种创建和解析方式</h5><ul><li><p>第二种创建和解析Json不需要创建类去解析,直接创建,解析就可以<br><code>`</code>CS<br>public class LitJsonDemo : MonoBehaviour {<br> //第二种方法<br> //这种方法创建Json的时候是不需要创建任何类,直接写就可以了<br> void Function02()<br> {</p><pre><code>//创建json//{&quot;name&quot; : &quot;lisi&quot;,&quot;age&quot; : 10}JsonData creatJson = new JsonData();//JsonData既代表[] 也代表{}creatJson.SetJsonType(JsonType.Object);//设置Json的结构类型 可写可不写.不写Json自动识别类型creatJson[&quot;name&quot;] = &quot;lisi&quot;;creatJson[&quot;age&quot;] = 10;creatJson.ToJson();</code></pre></li></ul><pre><code>/*</code></pre><p>{“heros”:<br>[<br>        {<br>             “name” : “lisi”,<br>             “age” : 18,<br>             “gender” : “boy”<br>        },<br>        {<br>             “name” : “zhangsan”,<br>             “age” : 22,<br>             “gender” : “boy”<br>        }<br>]<br>}<br>*/<br>        JsonData herosJson = new JsonData();<br>        JsonData heroJson1 = new JsonData();<br>        heroJson1[“name”] = “lisi”;<br>        heroJson1[“age”] = 18;<br>        heroJson1[“gender”] = “boy”;</p><pre><code>    JsonData heroJson2 = new JsonData();    heroJson2[&quot;name&quot;] = &quot;zhangsan&quot;;    heroJson2[&quot;age&quot;] = 22;    heroJson2[&quot;gender&quot;] = &quot;boy&quot;;    JsonData heros = new JsonData();    heros.SetJsonType(JsonType.Array);    heros.Add(heroJson1);    heros.Add(heroJson2);    herosJson[&quot;heros&quot;] = heros;    print(herosJson.ToJson());    //解析json    string srtJson = &quot;{&apos;heros&apos;:[{&apos;name&apos; : &apos;kk&apos;,&apos;age&apos; : 19,&apos;gender&apos;: &apos;bog&apos;},{&apos;name&apos; : &apos;cc&apos;,&apos;age&apos;: 44,&apos;gender&apos; : &apos;boy&apos;}]}&quot;;    JsonData herosjd = JsonMapper.ToObject(srtJson);    JsonData hers = herosjd[&quot;heros&quot;];    foreach (JsonData heroJd in hers)    {        print(heroJd[&quot;name&quot;].ToString());        print(heroJd[&quot;age&quot;]);    }}</code></pre><p>}<br><code></code></p>]]></content>
      
      <categories>
          
          <category> Json </category>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Lua学习之一</title>
      <link href="/2018/08/04/Lua%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%80/"/>
      <url>/2018/08/04/Lua%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%80/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>UnityAPI_Mathf数学函数</title>
      <link href="/2018/08/04/UnityAPI-Mathf%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/"/>
      <url>/2018/08/04/UnityAPI-Mathf%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>IOS上线权限</title>
      <link href="/2018/08/04/IOS%E4%B8%8A%E7%BA%BF%E6%9D%83%E9%99%90/"/>
      <url>/2018/08/04/IOS%E4%B8%8A%E7%BA%BF%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<h3 id="IOS应用上线AppStore权限问题"><a href="#IOS应用上线AppStore权限问题" class="headerlink" title="IOS应用上线AppStore权限问题"></a>IOS应用上线AppStore权限问题</h3><hr><h4 id="1-需要打开info-gt-Custom-Ios-Target-Properties"><a href="#1-需要打开info-gt-Custom-Ios-Target-Properties" class="headerlink" title="1.需要打开info-&gt;Custom Ios Target Properties"></a>1.需要打开info-&gt;Custom Ios Target Properties</h4><h5 id="权限"><a href="#权限" class="headerlink" title="权限:"></a>权限:</h5><h6 id="1-1麦克风权限"><a href="#1-1麦克风权限" class="headerlink" title="1.1麦克风权限:"></a>1.1麦克风权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Microphone Usage Description</span><br><span class="line">stringval:  是否允许此App使用你的麦克风？</span><br></pre></td></tr></table></figure><h6 id="1-2相机权限"><a href="#1-2相机权限" class="headerlink" title="1.2相机权限:"></a>1.2相机权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Camera Usage Description  </span><br><span class="line">stringval:  是否允许此App使用你的相机？</span><br></pre></td></tr></table></figure><h6 id="1-3相册权限"><a href="#1-3相册权限" class="headerlink" title="1.3相册权限:"></a>1.3相册权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Photo Library Usage Description</span><br><span class="line">stringval:  是否允许此App访问你的媒体资料库？</span><br></pre></td></tr></table></figure><h6 id="1-4通讯录权限"><a href="#1-4通讯录权限" class="headerlink" title="1.4通讯录权限:"></a>1.4通讯录权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Contacts Usage Description</span><br><span class="line">stringval:  是否允许此App访问你的通讯录？</span><br></pre></td></tr></table></figure><h6 id="1-5蓝牙权限"><a href="#1-5蓝牙权限" class="headerlink" title="1.5蓝牙权限:"></a>1.5蓝牙权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Bluetooth Peripheral Usage Description</span><br><span class="line">stringval:  是否许允此App使用蓝牙？</span><br></pre></td></tr></table></figure><h6 id="1-6语音转文字权限"><a href="#1-6语音转文字权限" class="headerlink" title="1.6语音转文字权限:"></a>1.6语音转文字权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Speech Recognition Usage Description</span><br><span class="line">stringval:  是否允许此App使用语音识别？</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="1-7日历权限"><a href="#1-7日历权限" class="headerlink" title="1.7日历权限:"></a>1.7日历权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Calendars Usage Description</span><br><span class="line">stringval:  Privacy - Calendars Usage Description</span><br></pre></td></tr></table></figure><h6 id="1-8定位权限"><a href="#1-8定位权限" class="headerlink" title="1.8定位权限:"></a>1.8定位权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Location When In Use Usage Description</span><br><span class="line">stringval:  我们需要通过您的地理位置信息获取您周边的相关数据</span><br></pre></td></tr></table></figure><h6 id="1-81定位权限"><a href="#1-81定位权限" class="headerlink" title="1.81定位权限:"></a>1.81定位权限:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:        Privacy - Location Always Usage Description</span><br><span class="line">stringval:  我们需要通过您的地理位置信息获取您周边的相关数据</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac下的动态链接库</title>
      <link href="/2018/08/04/Mac%E4%B8%8B%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
      <url>/2018/08/04/Mac%E4%B8%8B%E7%9A%84%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="转载-MAC下的动态链接库"><a href="#转载-MAC下的动态链接库" class="headerlink" title="(转载)MAC下的动态链接库"></a>(转载)MAC下的动态链接库</h3><p>原文地址:<a href="https://blog.csdn.net/cbbbc/article/details/50319885" target="_blank" rel="noopener">https://blog.csdn.net/cbbbc/article/details/50319885</a></p><hr><p>动态链接库已成为现代操作系统的基本组成部分，比如Windows下数不清的.DLL文件和臭名昭著的DLL地狱，Linux下成千上万的.so文件。Mac OS X下也有许多动态链接库，他们的扩展名是.dylib。<br>.dylib是Mach-O格式，也就是Mac OS X下的二进制文件格式。Mac OS X提供了一系列工具，用于创建和访问动态链接库。<br>编译器/usr/bin/cc，也就是gcc了，Apple改过的。这个主要还是一个壳，去调用其他的一些部件。当然同时还有/usr/bin/c++，等等。</p><p>汇编器/usr/bin/as</p><p>链接器/usr/bin/ld<br>Mac OS X有个自己的工具，/usr/bin/libtool，来创建动态链接库。这个libtool不是GNU的那个同名的libtool。我记得GNU libtool可以从Fink（<a href="http://fink.sf.net）下载，编译后得到glibtool。" target="_blank" rel="noopener">http://fink.sf.net）下载，编译后得到glibtool。</a></p><p>下面来看看如何创建动态链接库。<br>首先是生成module文件，也就是.o文件。这跟一般的unix没什么区别。例如<br>cc -c a.c b.c<br>就得到a.o和b.o</p><p>可以用ld来合并.o文件，比如<br>ld -r -o c.o a.o b.o<br>这个也没什么特别。</p><p>然后可以用libtool来创建动态链接库。<br>libtool -dynamic -o c.dylib a.o b.o<br>（ 这里也可以用libtool -static -o c.a a.o b.o就创建静态库）</p><p>如果用gcc直接编译，我记得linux下一般是可以<br>gcc -shared -o c.so a.c b.c<br>而在Mac OS X下需要<br>gcc -dynamiclib -o c.dylib a.c b.c</p><p>这往往也是向Mac OS X移植unix程序常出问题的地方。如果用autoconf/automake等工具，出错的几率应该小一些。</p><a id="more"></a><p>接着来看看访问动态链接库的工具。</p><p>nm是最常用的，这个用法跟linux下差不多<br>nm c.dylib<br>可以看到导出符号表，等等。</p><p>另一个常用的工具是otool，这个是Mac OS X独有的。比如想看看c.dylib的依赖关系<br>otool -L c.dylib</p><p>最后说一下我对Framework的理解。Framework是Mac OS X下必不可少的部分，不妨去看看/System/Library/Frameworks/下面，一大堆Framework。Framework是dylib的进一步演化，它把头文件、文档、动态链接库等整合成一个有机的目录，类似一种自描述的方式，这种做法其实在Mac OS X下随处可见。比如应用程序，一般都是一个目录，譬如/Applications/iTunes.app目录对应应用程序iTunes，双击这个目录即开始执行。这种做法和Windows下常见的一个exe/dll打天下很不相同。<br>Framework的创建工具也是libtool，详细用法参考man。</p>]]></content>
      
      <categories>
          
          <category> IOS </category>
          
          <category> MACOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编程杂谈</title>
      <link href="/2018/08/04/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/"/>
      <url>/2018/08/04/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88/</url>
      <content type="html"><![CDATA[<h3 id="编程杂谈"><a href="#编程杂谈" class="headerlink" title="编程杂谈"></a>编程杂谈</h3><hr><h4 id="1-为什么使用面向对象编程"><a href="#1-为什么使用面向对象编程" class="headerlink" title="1.为什么使用面向对象编程:"></a>1.为什么使用面向对象编程:</h4><p>为了让程序更加清晰,把程序中的功能进行模块化划分,每个模块提供特定的功能,而且每个模块都是孤立的,这种模块化编程提供了非常大的多样性,大大增加了代码重用的机会;<br>面向对象编程也叫OOP编程;<br>简单来说面向对象编程就是结构化编程,对程序中的变量结构划分,让编程更清晰;</p><h5 id="1-1类的定义"><a href="#1-1类的定义" class="headerlink" title="1.1类的定义:"></a>1.1类的定义:</h5><p>类实际上是创建对象的模板,每个对象都包含数据,并提供了处理和访问数据的方法;<br>类定义了类的每个对象(称为实例)可以包含什么数据和功能 类实际上是创建对象的模板,每个对象都包含数据,并提供了处理和访问数据的方法;<br>类定义了类的每个对象(称为实例)可以包含什么数据和功能</p><p>类中的数据和啊函数称为类的成员;<br>数据成员<br>函数成员<br>数据成员:<br>数据成员是包含类的数据–字段,常量和事件的成员;<br>函数成员:<br>函数成员提供了操作类中数据的某些功能(方法,属性,构造函数,xi)   </p><ul><li>堆区和栈区:    <ul><li>堆区空间比较大,但是读取速度慢;    </li><li>栈区空间比较小,但是读取速度快;    </li><li>在C/C++中栈区内存会自动释放,堆区空间要手动申请内存,手动释放内存   </li></ul></li><li>栈区的存储特性:<ul><li>数据只能从栈的顶端插入和删除;</li><li>把数据放入栈顶称为入栈;</li><li>从栈顶删除数据称为出栈;</li><li>先进后出顺序;</li></ul></li></ul><p>堆区的数据可以任意顺序存储和删除;</p><ul><li>GC垃圾回收机制:<ul><li>程序在堆区存储了3个对象</li><li>后来程序中其中的一个对象不再被程序使用</li><li>垃圾回收器发现无主对象并释放它</li><li>垃圾收集之后,被释放对象的内存可以被重用</li></ul></li><li>值类型和引用类型:<ul><li>类型被分为两种:<ul><li>值类型(整数,bool,struct char double等)和引用类型(string 数组 自定义类 内置类)</li><li>值类型只需要一段单独的内存,用于存储实际的数据(单独定义的时候放在栈区)</li></ul></li><li>引用类型需要两段内存:<ul><li>第一段存储实际数据,在堆区</li><li>第二段存储一个引用,指向堆区空间存储的数据的地址</li><li>继承:</li></ul></li><li>很多类中都要相似的数据,这些类他们有很多相同的数据,也有不同的,这个时候我们可以使用继承来让这两个类继承自同一个类<ul><li>实现继承:</li></ul></li><li>表示一个类型派生于一个基类,它用于该基类类型的所有成员字段和函数,在现实继承中,派生类采用基类的每一个函数的实现代码,除非派生类的定义中指定重写某个函数的实现代码.在需要给现有的类型添加功能,或许许多相关的类型共享一组重要的公共功能时,这种类型的继承非常有用<ul><li>接口继承:</li></ul></li><li>表示一个类慈宁宫只继承了函数的签名,没有继承任何实现代码,在需要指定该类型具有某些可用的特性时,最好使用这种类型的继承;<ul><li>密封类和密封方法:</li></ul></li><li>C#允许把类和方法声明为sealed,对于类,这表示不能继承该类;对于方法表示不能重写该方法;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sealed  FinalClass&#123;</span><br><span class="line">  //ect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>使用密封类和密封方法放置重写某些类导致代码混乱;</p>]]></content>
      
      <categories>
          
          <category> C# </category>
          
          <category> 编程杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity Log管理</title>
      <link href="/2018/08/03/UnityLog/"/>
      <url>/2018/08/03/UnityLog/</url>
      <content type="html"><![CDATA[<h3 id="Unity-Log"><a href="#Unity-Log" class="headerlink" title="Unity Log"></a>Unity Log</h3><hr><p>这一段是参考雨凇MOMO的文章:<br><a href="https://www.xuanyusong.com/archives/2782" target="_blank" rel="noopener">https://www.xuanyusong.com/archives/2782</a></p><p>在开发Unity的时候，在输出log的时候大家都会采用Debug.log()的方式来输出Log，但是游戏发布的时候这样的Log是不能关闭的，在用户手机运行产生一堆LOG也不是啥好事，一定要关闭才行、主要是unity官方也没有提供直接关闭的方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Debuger</span>  &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">bool</span> EnableLog = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="keyword">object</span> message</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Log(message,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="keyword">object</span> message, Object context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(EnableLog)</span><br><span class="line">&#123;</span><br><span class="line">Debug.Log(message,context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogError</span>(<span class="params"><span class="keyword">object</span> message</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LogError(message,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogError</span>(<span class="params"><span class="keyword">object</span> message, Object context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(EnableLog)</span><br><span class="line">&#123;</span><br><span class="line">Debug.LogError(message,context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogWarning</span>(<span class="params"><span class="keyword">object</span> message</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LogWarning(message,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogWarning</span>(<span class="params"><span class="keyword">object</span> message, Object context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(EnableLog)</span><br><span class="line">&#123;</span><br><span class="line">Debug.LogWarning(message,context);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 但是这样问题又来了，因为我如果直接这样写的话，如下图所示，当我输出Log以后，我在Console窗口中双击Log 这时候代码会定位在Debuger这个类的Log方法，这太麻烦了我需要定位在调用Debuger.log()的方法上。</p><a id="more"></a><hr><p>为了解决这个问题，我们可以把Debuger类做成一个dll，在终端里面输入如下代码 。。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mcs -r:/Applications/Unity/Unity.app/Contents/Frameworks/Managed/UnityEngine.dll -target:library ClassesForDLL.cs</span><br></pre></td></tr></table></figure></p><p> 如果你要把多个.cs文件做成一个dll的话，那么在终端里用空格把你的.cs文件分开即可，于是我在终端里面输入，参数 就是我的cs的完整路径。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mcs -r:/Applications/Unity/Unity.app/Contents/Frameworks/Managed/UnityEngine.dll -target:library /Users/MOMO/test13/Assets/Debuger.cs</span><br></pre></td></tr></table></figure></p><p>执行完毕后，会自动的在你脚本的平级路径下生成一个同名的dll文件。 在把Debuger.cs文件删除，保留Debuger.dll就可以了。<br>如果你的版本正式发布， 你只需找一个合适的地方调用enableLog = true就可以。</p><hr><p>开始我想的是在Debuger类里面直接用 #if define这样的标签来做，后来我发现很多问题出现在正式版本里，一旦使用预定义标签编译那么除非重新打包不然是觉对看不到LOG。所以干脆就直接用一个静态变量来标记是否打开Log方便。这样可以让服务端做一个密令一类的东西， 正式版也能让客户端把LOG打开。。</p><p>如果你确定你的项目不会出问题，不需要运行时产生log.那么最好使用Conditional， 参数就是条件编译的预定义标签，下面的DEBUG 就是在unity projectsetting 里面 声明 预定义标签， 当然你也可以自己去定义这些标签。这样在调用方法的时候就不会去执行 方法体的内容。。</p><p>需要引入头文件</p><p>using System.Diagnostics;<br>using System;<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Conditional (<span class="meta-string">"DEBUG"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="keyword">object</span> message, Object context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Debug.Log(message,context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Untiy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Untiy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Array/ArrayList</title>
      <link href="/2018/08/03/Array-ArrayList/"/>
      <url>/2018/08/03/Array-ArrayList/</url>
      <content type="html"><![CDATA[<h3 id="Array-ArrayList-List之间的区别"><a href="#Array-ArrayList-List之间的区别" class="headerlink" title="Array/ArrayList/List之间的区别"></a>Array/ArrayList/List之间的区别</h3><hr><h5 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组:"></a>1.数组:</h5><ul><li>优点:在内存中是连续的,速度较快,操作简单;</li><li>缺点:定义数组时要定义其长度,不够灵活,过长容易造成资源浪费,过段会造成数据存储越界,不方便进行数据的添加,插入,移除;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int [] i = new int[2];</span><br><span class="line">i[0] = 111;</span><br><span class="line">i[1] = 222;//赋值</span><br><span class="line">i[1] = 123; //修改</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-集合ArrayList"><a href="#2-集合ArrayList" class="headerlink" title="2.集合ArrayList:"></a>2.集合ArrayList:</h5><ul><li>优点: 命名空间System.Collections下的一部分,大小是动态扩充和收缩,在声明ArrayList对象时不需要指定长度,ArrayList继承了IList接口,可以很方便的进行数据的添加,插入,删除;</li><li><p>缺点:当想集合插入不同类型的数据后(ArrayList将数据当做object存储),在进行数据处理时容易出现类型不匹配的错误,使用时需要进行类型转换处理,存在装箱与拆箱的操作,造成性能的大量损耗;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = new ArrayList();</span><br><span class="line">list.Add(“aa”);</span><br><span class="line">list.Add(123);</span><br><span class="line">list[1] = 1;//修改值</span><br><span class="line">list.Remove(123);//移除</span><br><span class="line">list.RemoveAt(0);</span><br></pre></td></tr></table></figure></li><li><p>(装箱与拆箱:)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">装箱:就是想值类型转换为引用类型</span><br><span class="line">拆箱:就是将引用类型转换为值类型(拆箱必须是由值类型转换未来的对象类型再转回值类型,只有装过箱的数据才能拆箱)</span><br><span class="line">int n = 10;</span><br><span class="line">object o = n;//装箱</span><br><span class="line">int b = (int)0;//拆箱</span><br><span class="line">看两种类型是否发生了装箱或者拆箱,要看这两种类型是否存在继承关系;</span><br><span class="line">string  str = &quot;123&quot;;</span><br><span class="line">int n = Conver.Toint32(str);</span><br><span class="line">//string是引用类型,int是值类型,但是他们之间没有发生装箱或者拆箱,没有具有继承关系</span><br><span class="line"></span><br><span class="line">int n = 10;</span><br><span class="line">IComparable  i = n;</span><br><span class="line">//这里发生了装箱.int32继承自IComparable;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h5 id="3-泛型List"><a href="#3-泛型List" class="headerlink" title="3.泛型List:"></a>3.泛型List:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优点:与集合ArrayList类似,且继承了IList接口,在声明List集合时也要声明集合内部数据的对象类型,避免了装箱和拆箱;</span><br><span class="line">          List&lt;int&gt; list = new List&lt;int&gt;();</span><br><span class="line"></span><br><span class="line">          list.Add(123);</span><br><span class="line">          list[0] = 111;//修改值</span><br><span class="line">          list.RemoveAt(0);//移除</span><br><span class="line"></span><br><span class="line">  如果list.Add(&quot;abc&quot;);//编译器就会报错,避免了类型安全问题与装箱拆箱问题;</span><br></pre></td></tr></table></figure><hr><h4 id="string和StringBuilder的区别"><a href="#string和StringBuilder的区别" class="headerlink" title="string和StringBuilder的区别:"></a>string和StringBuilder的区别:</h4><p>tring对象时不可变的,包括长度或者其中任何字符都是不可以改变的任何对String的改变,都会引发新的String对象的生成;<br>string str = “aa”;<br>str = str + “bb”;<br>以上代码让人误以为str是能够增加长度的,其实第二句代码是重新创建了一个新的对象,以前的对象被丢弃,被GC垃圾回收器回收</p><p>C#中不能使用 new string();创建对象;假如可以以上代码等价于:<br>//string str = new string(“aa”);<br>//str = new string(“aa” + “bb”);</p><p>stringBuilder是可变的,它是专门用于字符串和字符执行动态操作的类:<br>StringBuilder sb = new StringBuilder(“aa”);<br>sb.Append(“bb”);<br>StringBuilder在内部有一个足够常的字符数组用于存放字符串对象当字符串长度没超过字符数组长度时,所以操作都是针对同一个字符数组,<br>当长度超过十,StringBuilder将自动创建一个更长的数组,把原有的数据复制过去;</p><hr>]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C#中的#define条件编译</title>
      <link href="/2018/08/03/CSharp%E4%B8%AD%E7%9A%84#define%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/"/>
      <url>/2018/08/03/CSharp%E4%B8%AD%E7%9A%84#define%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<h3 id="转-C-中的-define条件编译"><a href="#转-C-中的-define条件编译" class="headerlink" title="(转)C#中的#define条件编译"></a>(转)C#中的#define条件编译</h3><p>本文转自：<a href="http://www.cnblogs.com/Scl891004X/p/6147787.html，请点击链接查看原文，尊重楼主版权。" target="_blank" rel="noopener">http://www.cnblogs.com/Scl891004X/p/6147787.html，请点击链接查看原文，尊重楼主版权。</a></p><hr><h3 id="C-define条件编译"><a href="#C-define条件编译" class="headerlink" title="C# #define条件编译"></a>C# #define条件编译</h3><p>本文导读:<br> C#的预处理指令从来不会转化为可执行代码的命令,但是会影响编译过程的各个方面,常用的预处理器执行有#define,#undef,#if,#elif,#else,#endif等等,下面介绍C#中使用#define进行条件编译的实例;    </p><p> C#中条件编译指令用于按条件包含或者排除源文件中的某些不跟,在vs中会看到排除的代码显示为灰色</p><h4 id="一-define可以用来做什么"><a href="#一-define可以用来做什么" class="headerlink" title="一.#define可以用来做什么"></a>一.#define可以用来做什么</h4><ul><li>1.当计划发布两个版本的代码的时候,即基本版和拥有更多版本的企业版,就可以用到条件编译指令;</li><li>2.例如同一个文件给silverlight、wpf、winform等使用,并且还考虑Debug和Release等,有大部分代码是一样的;</li><li>3.制定函数和属性是否编译到最终产品中去;</li></ul><hr><h4 id="define的用法"><a href="#define的用法" class="headerlink" title="#define的用法"></a>#define的用法</h4><font size="3" color="F111">语法: #define 名称</font><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Debug</span></span><br></pre></td></tr></table></figure><p>说明:   </p><ul><li>1.Debug可以看做是生命一个变量,但此变量没有真正的值,存在时#if</li></ul><p>Debug结果为true,否则为false;</p><ul><li>2.#define单独用没有什么意义,一般是和#if或者Conditional特性结合使用;</li><li>3.#define必须定义在所以using命名空间前面;</li><li>4.Debug和DEBUG是不同的,C#区分大小写;</li></ul><hr><a id="more"></a><h4 id="define条件编译实例"><a href="#define条件编译实例" class="headerlink" title="#define条件编译实例"></a>#define条件编译实例</h4><h5 id="使用-if"><a href="#使用-if" class="headerlink" title="使用#if"></a>使用#if</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Dragon</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConditionalCompilation</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">if</span> Dragon</span></span><br><span class="line">             Console.WriteLine(<span class="string">"Dragon is defined"</span>);</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">             Console.WriteLine(<span class="string">"Dragon is not defined"</span>);</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">             Console.ReadKey();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出: Dragon is defined<br>如果注掉条件编译</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #define Dragon</span></span><br></pre></td></tr></table></figure><p>输出: Dragon is not defined</p><h5 id="使用Conditional特性"><a href="#使用Conditional特性" class="headerlink" title="使用Conditional特性"></a>使用Conditional特性</h5><p>我们可以将一些函数隔离出来,使得他们只有在定义某些环境变量或者设置了某个值之后才能发挥作用;<font size="3" color="F111">使用Conditional特性的隔离策略要比#if/#endif不容易出错.</font><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Trace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (Debug &amp;&amp; Trace)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DebugAndTrace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConditionalCompilation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Print0();</span><br><span class="line">            Print1();</span><br><span class="line">            Print2();</span><br><span class="line">            Print3();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Conditional(<span class="meta-string">"DEBUG"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print0</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"DEBUG is defined"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Conditional(<span class="meta-string">"Debug"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Debug is defined"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义了Debug或者Trace后才会执行此方法</span></span><br><span class="line">        <span class="comment">//或者的关系</span></span><br><span class="line">        [<span class="meta">Conditional(<span class="meta-string">"Debug"</span>), Conditional(<span class="meta-string">"Trace"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Debug or Trace is defined"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只有定义了Debug和Trace后才会执行此方法</span></span><br><span class="line">        <span class="comment">//并且的关系</span></span><br><span class="line">        [<span class="meta">Conditional(<span class="meta-string">"DebugAndTrace"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Debug and Trace is defined"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明:  </p><ul><li>1.代码中没有定义DEBUG,却输出了DEBUG,是因为DEBUG版本,自动定义了DEBUG,”VS项目-&gt;右键-&gt;属性-&gt;生成选项卡-&gt;常规栏”下定义了DEBUG常亮(U)前面的复选框被选中,当然你可以去掉其中选中状态,这样就不会输出DEBUG了.</li><li>2.如果DEBUG和Trace均没有定义,则不会输出 Debug or Trace;只用Debug和Trace均定义了,才会输出 Debug and Trace;</li><li>3.可以给Conditional增加多个属性,如实例代码[Conditional(“Debug”),Conditional(“Trace”)],不过多个属性之间的关系是 <strong>“或”</strong> 的关系,即”Debug”或者”Trace”任意一个被定义了,那么对应方法就会被执行</li><li>4.如果需要增加多个与属性,直接用Conditional是无法事项的,需要借助#if/#endif间接来完成,如实例代码中的组合操作</li><li>5.相当于在函数定义和调用的地方都有个#if/#endif包起来,条件不满足 定义和调用都不会编译<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span>(Debug  &amp;&amp;  Trace)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DebugAndTrace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注:使用Conditional属性的方法会受到以下限制:</strong></p><ul><li>1.条件方法必须是<strong>类声明或结构声明中的方法</strong>,如果在接口声明中的方法上制定Conditional属性,将会出翔编译时错误;</li><li>2.条件方法不能是接口方法的实现,否则将编译时出现错误;</li><li>3.条件方法必须是void类型;</li><li>4.<strong>不能用override修饰符标记条件方法,但是,可以用virtual修饰符标记条件方法</strong>,此类方法的重写方法隐含为有条件的方法,而且不能用Conditional属性显式标记;</li></ul><p><strong>注: 环境变量(或条件编译符号)的设置方法有三</strong></p><ul><li>1.用#define定义以及#undef取消定义，在所有using命名空间前面定义；</li><li>2.用编译器命令行选项(例如，/define:DEBUG)，在“项目——右键——属性——生成选项卡——常规栏”下的条件编译符号(Y)中设置(如果多个，可以用英文逗号隔开)。DEBUG版本下，系统默认设置了DEBUG和TRACE；</li><li>3.用操作系统外壳程序中的环境变量(例如，set DEBUG=1)。</li></ul><hr><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>参考链接①：<a href="http://www.studyofnet.com/news/1240.html" target="_blank" rel="noopener">http://www.studyofnet.com/news/1240.html</a><br>参考链接：<a href="http://blog.csdn.net/teng_s2000/article/details/5510420" target="_blank" rel="noopener">http://blog.csdn.net/teng_s2000/article/details/5510420</a><br>参考链接③：<a href="https://msdn.microsoft.com/zh-cn/library/system.diagnostics.conditionalattribute.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/system.diagnostics.conditionalattribute.aspx</a></p>]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单例基类</title>
      <link href="/2018/08/03/%E5%8D%95%E4%BE%8B%E5%9F%BA%E7%B1%BB/"/>
      <url>/2018/08/03/%E5%8D%95%E4%BE%8B%E5%9F%BA%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h3 id="单例基类"><a href="#单例基类" class="headerlink" title="单例基类"></a>单例基类</h3><hr><p>在unity中有两种单例类型，一种是普通单例，即普通c#类，另一种是继承了MonoBehaviour的单例。</p><p>继承自MonoBehaciour的单例基类<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> MonoBehaviour的单例形式一，需要自行处理_instance的赋值和添加类的保护无参构造函数  </span></span><br><span class="line">public class Singleton &lt;T&gt; : MonoBehaviour</span><br><span class="line"><span class="keyword">where</span> T:MonoBehaviour&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        instance = <span class="keyword">this</span> <span class="keyword">as</span> T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MonoBehaviour的单例形式二<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> MonoBehaviour的单例形式二，无需关心加载对象本身时使用，脚本会自动加载  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 所有此种形式的单例脚本，将会加载到名为IndependentSingletonMonoObject同一对象上</span></span><br><span class="line">public class IndependentSingletonMono &lt;T&gt; : MonoBehaviour where T : IndependentSingletonMono &lt;T&gt;  </span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> T _instance;  </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> T Instance  </span><br><span class="line">   &#123;  </span><br><span class="line">       <span class="keyword">get</span>  </span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (_instance == <span class="literal">null</span>)  </span><br><span class="line">           &#123;  </span><br><span class="line">               _instance = FindObjectOfType &lt;T&gt;();  </span><br><span class="line">               <span class="keyword">if</span> (_instance == <span class="literal">null</span>)  </span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">var</span> go = GameObject.Find(GlobalStringRes.IndependentSingletonMonoObject);  </span><br><span class="line">                   <span class="keyword">if</span>(go == <span class="literal">null</span>)  </span><br><span class="line">                       go = <span class="keyword">new</span> GameObject(GlobalStringRes.IndependentSingletonMonoObject);  </span><br><span class="line">                   _instance = go.AddComponent&lt;T&gt;();  </span><br><span class="line">              &#125;   </span><br><span class="line">           &#125;   </span><br><span class="line">           <span class="keyword">return</span> _instance;  </span><br><span class="line">       &#125;   </span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> UnityEngine;  </span><br><span class="line">public class MonoSingle &lt;T&gt; : MonoBehaviour where T:MonoSingle&lt;T&gt;;  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T _instance;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (_instance == <span class="literal">null</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                _instance = FindObjectOfType&lt;T&gt;();  </span><br><span class="line">                <span class="keyword">if</span> (_instance == <span class="literal">null</span>)  </span><br><span class="line">                &#123;</span><br><span class="line">                    GameObject managerGo = <span class="keyword">new</span> GameObject(<span class="keyword">typeof</span>(T).Name);  </span><br><span class="line">                    _instance = managerGo.AddComponent&lt;T&gt;();  </span><br><span class="line">                &#125;  </span><br><span class="line">                _instance.Init();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> _instance;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用法:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TransformOperationControl</span> : <span class="title">Singleton</span> <span class="title">TransformOperationControl</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainControl</span> : <span class="title">SingletonMono</span> <span class="title">MainControl</span>  </span><br><span class="line">｛  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">MainControl</span>(<span class="params"></span>) ｛ _instance </span>= <span class="keyword">this</span>; ｝  </span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>普通单例:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 非MonoBehaviour的单例形式，需要自行添加类的公有无参构造函数  </span></span><br><span class="line">public abstract class CSharpSingletion&lt;T&gt; where T : new() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> T();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用基类</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line">public class AudioSingletion : CSharpSingletion&lt;AudioSingletion&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity强制屏幕分辨率</title>
      <link href="/2018/08/03/Unity%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87/"/>
      <url>/2018/08/03/Unity%E5%B1%8F%E5%B9%95%E5%88%86%E8%BE%A8%E7%8E%87/</url>
      <content type="html"><![CDATA[<h3 id="Unity强制屏幕分辨率"><a href="#Unity强制屏幕分辨率" class="headerlink" title="Unity强制屏幕分辨率"></a>Unity强制屏幕分辨率</h3><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetResolution</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> heightScal = <span class="number">9.0</span>f;</span><br><span class="line">        <span class="keyword">float</span> widthScal = <span class="number">16.0</span>f;</span><br><span class="line">        <span class="keyword">int</span> screenWidth = Screen.currentResolution.width;</span><br><span class="line">        <span class="keyword">int</span> screenHeight = Screen.currentResolution.height;</span><br><span class="line">        <span class="keyword">int</span> width = Screen.width;</span><br><span class="line">        <span class="keyword">int</span> height = Screen.height;</span><br><span class="line">        <span class="keyword">if</span> (((widthScal * height) / heightScal) &gt; screenWidth)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> h = (<span class="keyword">int</span>)((heightScal * screenWidth) / widthScal);</span><br><span class="line">            <span class="keyword">int</span> w = (<span class="keyword">int</span>)((widthScal * h) / heightScal);</span><br><span class="line">            Screen.SetResolution(w, h, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> w = (<span class="keyword">int</span>)((widthScal * screenHeight) / heightScal);</span><br><span class="line">            <span class="keyword">int</span> h = (<span class="keyword">int</span>)((heightScal * screenWidth) / widthScal);</span><br><span class="line">            Screen.SetResolution(w, h, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dropdow</title>
      <link href="/2018/08/03/Dropdow/"/>
      <url>/2018/08/03/Dropdow/</url>
      <content type="html"><![CDATA[<h3 id="Dropdow"><a href="#Dropdow" class="headerlink" title="Dropdow"></a>Dropdow</h3><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Dropdown dropdownItem;</span><br><span class="line">List&lt;<span class="keyword">string</span>&gt; tempNames;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化Dropdow列表</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateDropdownView</span>(<span class="params">List&lt;<span class="keyword">string</span>&gt; showNames</span>)</span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     dropdownItem.options.Clear();</span><br><span class="line">     Dropdown.OptionData tempData;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; showNames.Count; i++)</span><br><span class="line">     &#123;</span><br><span class="line">         tempData = <span class="keyword">new</span> Dropdown.OptionData();</span><br><span class="line">         tempData.text = showNames[i];</span><br><span class="line">         dropdownItem.options.Add(tempData);</span><br><span class="line">     &#125;</span><br><span class="line">     dropdownItem.captionText.text = showNames[<span class="number">0</span>];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>核心的一句话就是在刷数据那个方法里，先定义一个Dropdown.OptionData类型的，然后往里面填数据，最后别忘了最后一句话，把显示的值换成选项里的第一个也就是ShowNames[0]</p>]]></content>
      
      <categories>
          
          <category> UGUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> UGUI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity截屏</title>
      <link href="/2018/08/03/Unity%E6%88%AA%E5%B1%8F/"/>
      <url>/2018/08/03/Unity%E6%88%AA%E5%B1%8F/</url>
      <content type="html"><![CDATA[<h3 id="Unity截屏"><a href="#Unity截屏" class="headerlink" title="Unity截屏"></a>Unity截屏</h3><hr><h4 id="内置API"><a href="#内置API" class="headerlink" title="内置API"></a>内置API</h4><p>//Application.CaptureScreenshot 这个已经被Unity废弃掉<br>ScreenCapture.CaptureScreenshot//这个代替了上面的</p><ul><li><p>优点：简单，可以快速地截取某一帧的画面、全屏截图</p></li><li><p>缺点：</p><ul><li><p>1.不能针对摄像机截图</p></li><li><p>2.定制大小截图不方便</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnMouseDown</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Application.CaptureScreenshot(Application.persistentDataPath + <span class="string">"/CaptureScreenshot.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Texture2D-ReadPixels"><a href="#Texture2D-ReadPixels" class="headerlink" title="Texture2D.ReadPixels"></a>Texture2D.ReadPixels</h4><ul><li>自定义截图的大小（包括UI）<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnScreenShot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前系统时间</span></span><br><span class="line">    System.DateTime nowTime = System.DateTime.Now;</span><br><span class="line">    <span class="keyword">string</span> times = nowTime.ToString();</span><br><span class="line"></span><br><span class="line">    times = times.Trim();</span><br><span class="line">    times = times.Replace(<span class="string">"/"</span>, <span class="string">"-"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> fileName = <span class="string">"ScreenShot"</span> + times + <span class="string">".png"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断运行的平台</span></span><br><span class="line">    <span class="keyword">if</span>(Application.platform == RuntimePlatform.Android)&#123;</span><br><span class="line">        Texture2D texture = <span class="keyword">new</span> Texture2D(Screen.width, Screen.height, TextureFormat.RGB24, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        texture.ReadPixels(<span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,Screen.width,Screen.height),<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        texture.Apply();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = texture.EncodeToPNG();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> destination = <span class="string">"/sdcard/DCIM/Screenshots"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!Directory.Exists(destination))&#123;</span><br><span class="line">            Directory.CreateDirectory(destination);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> pathSave = destination + <span class="string">"/"</span> + fileName;</span><br><span class="line"></span><br><span class="line">        File.WriteAllBytes(pathSave,bytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="RenderTextures"><a href="#RenderTextures" class="headerlink" title="RenderTextures"></a>RenderTextures</h4><ul><li>新建一个Camera,把这个Camera的Mask设置为只渲染UI层,然后把Depth设置比主相机值要大;</li><li>把UI Mode设置为Spac Camera<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Camera UICamera;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnScreenShot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      System.DateTime now = System.DateTime.Now;</span><br><span class="line">      <span class="keyword">string</span> times = now.ToString();</span><br><span class="line">      times = times.Trim();</span><br><span class="line">      times = times.Replace(<span class="string">"/"</span>, <span class="string">"-"</span>);</span><br><span class="line">      <span class="keyword">string</span> FileName = <span class="string">"ShotIamge"</span> + times + <span class="string">".png"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(Application.platform == RuntimePlatform.Android)</span><br><span class="line">      &#123;</span><br><span class="line">          RenderTexture renderTexture = <span class="keyword">new</span> RenderTexture(Screen.width, Screen.height, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">          UICamera.targetTexture = renderTexture;</span><br><span class="line">          UICamera.Render();</span><br><span class="line"></span><br><span class="line">          RenderTexture.active = renderTexture;</span><br><span class="line"></span><br><span class="line">          Texture2D texture = <span class="keyword">new</span> Texture2D(Screen.width, Screen.height, TextureFormat.RGB24, <span class="literal">false</span>);</span><br><span class="line">          texture.ReadPixels(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, Screen.width, Screen.height), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">          texture.Apply();</span><br><span class="line"></span><br><span class="line">          ARCamera.targetTexture = <span class="literal">null</span>;</span><br><span class="line">          RenderTexture.active = <span class="literal">null</span>;</span><br><span class="line">          Destroy(renderTexture);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">byte</span>[] bytes = texture.EncodeToPNG();</span><br><span class="line">          <span class="keyword">string</span> dist  = <span class="string">"sdcard/DCIM/Screenshots"</span>;</span><br><span class="line">          <span class="keyword">if</span> (!Directory.Exists(dist))</span><br><span class="line">          &#123;</span><br><span class="line">              Directory.CreateDirectory(dist);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">string</span> PathSave = dist + <span class="string">"/"</span> + FileName;</span><br><span class="line">          File.WriteAllBytes(PathSave, bytes);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>协程</title>
      <link href="/2018/08/03/%E5%8D%8F%E7%A8%8B/"/>
      <url>/2018/08/03/%E5%8D%8F%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="Unity协程"><a href="#Unity协程" class="headerlink" title="Unity协程"></a>Unity协程</h3><hr><h4 id="Invoke延迟执行"><a href="#Invoke延迟执行" class="headerlink" title="Invoke延迟执行"></a>Invoke延迟执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.invoke(function_Name,time);</span><br><span class="line">  第一为为无参函数,第二个为执行时间  </span><br><span class="line"></span><br><span class="line">2.invokeRpeating(function_Namem,frist_time,time);</span><br><span class="line">  无参函数名,首次执行时间,执行间隔时间  </span><br><span class="line"></span><br><span class="line">3.Cancelinvoke(function_Name);//取消延迟函数</span><br><span class="line">  如果不写参数则取消所有invoke函数</span><br></pre></td></tr></table></figure><h4 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h4><ul><li>协程是一个分部执行的方法,遇到条件(yield return)会挂起,知道条件满足才继续执行后面的代码</li><li>协程其实就是一个IEnumerator(迭代器)</li><li><p>协程和invoke函数最大的不同是可以在执行时添加参数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">function_Name</span>(<span class="params">parameter,parameter,...</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">return</span> ....;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例如:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">RunTimes</span>(<span class="params"><span class="keyword">float</span> time</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params">time</span>)</span>;</span><br><span class="line">  Debug.Log(<span class="string">" is Run"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>例如参数time = 3f,协程执行遇到yield return语句后就会停止在yield reurn语句位置等待3s后在继续往下面去执行</strong><br><a href="https://imgchr.com/i/PBdguq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBdguq.png" alt="PBdguq.png"></a></p><hr><ul><li><p>开启协程:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StartCoroutine(协程函数名());</span><br></pre></td></tr></table></figure></li><li><p>停止协程:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过字符串方法可以停止一个协程;</span><br><span class="line"><span class="number">2.</span>注意:直接用StopCoroutine直接像StartCoroutine一样里面加方法是不能停止该协程的,通过把协程赋予到变量在控制此变量来停止才能中断此协程;</span><br><span class="line">StartCoroutine(<span class="string">"function_Name"</span>,time);<span class="comment">//如果用字符串传参的话可能效率会低一些</span></span><br><span class="line">StopCoroutine(<span class="string">"function_Name"</span>);</span><br><span class="line">StopAllCoroutine();<span class="comment">//停止所有这个类中的协程函数</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity解析Text文本</title>
      <link href="/2018/08/03/Unity%E8%A7%A3%E6%9E%90Text%E6%96%87%E6%9C%AC/"/>
      <url>/2018/08/03/Unity%E8%A7%A3%E6%9E%90Text%E6%96%87%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h3 id="Unity解析Text文本"><a href="#Unity解析Text文本" class="headerlink" title="Unity解析Text文本"></a>Unity解析Text文本</h3><hr><h4 id="Unity中解析Text文本有四种方式"><a href="#Unity中解析Text文本有四种方式" class="headerlink" title="Unity中解析Text文本有四种方式:"></a>Unity中解析Text文本有四种方式:</h4><h5 id="1-TextAsset解析"><a href="#1-TextAsset解析" class="headerlink" title="1.TextAsset解析"></a>1.TextAsset解析</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TestAsset loadText;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">string</span> str = loadText.text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-协程加WWW类"><a href="#2-协程加WWW类" class="headerlink" title="2.协程加WWW类"></a>2.协程加WWW类</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WWW www = <span class="keyword">new</span> WWW(<span class="string">"file://"</span>+Application.dataPath + <span class="string">"/text.text"</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line">    s = www.text;</span><br><span class="line">    print(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-Resources-Load-“text”-as-TextAsset"><a href="#3-Resources-Load-“text”-as-TextAsset" class="headerlink" title="3.Resources.Load(“text”) as TextAsset;"></a>3.Resources.Load<textasset>(“text”) as TextAsset;</textasset></h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextAsset resouse = GameObject.Instantiate (Resources.Load&lt;TextAsset&gt;(<span class="string">"1111"</span>)) <span class="keyword">as</span> TextAsset;</span><br></pre></td></tr></table></figure><h5 id="4-StreamReader"><a href="#4-StreamReader" class="headerlink" title="4.StreamReader"></a>4.StreamReader</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RendFile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//StreamReader读取的文件位置是在Application.dataPath+"/../"</span></span><br><span class="line">    StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">"1111.text"</span>);</span><br><span class="line">    <span class="keyword">string</span> str = sr.ReadToEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h4 id="1-1-StreamWriter写入文本"><a href="#1-1-StreamWriter写入文本" class="headerlink" title="1.1 StreamWriter写入文本"></a>1.1 StreamWriter写入文本</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意:此为覆盖式写入文本</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TextWriter write_str = <span class="keyword">new</span> StreamWriter(Path.Combine(Application.dataPath+<span class="string">"/../"</span>,<span class="string">"1111.text"</span>));</span><br><span class="line">    <span class="keyword">string</span> str_flie = <span class="string">"1231231234dsf"</span>;</span><br><span class="line">    write_str.Write(s);</span><br><span class="line">    write_str.Flush();</span><br><span class="line">    write_str.Close();</span><br><span class="line">    AssetDatabase.Refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StreamWriter sw = <span class="keyword">new</span> StreamWriter(<span class="string">"111.text"</span>,<span class="literal">true</span>);</span><br><span class="line">sw.WriteLine(<span class="string">"name age  sex"</span>);</span><br><span class="line">sw.Close()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity文件操作路径</title>
      <link href="/2018/08/03/Unity%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E8%B7%AF%E5%BE%84/"/>
      <url>/2018/08/03/Unity%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h4 id="转-Unity文件操作路径"><a href="#转-Unity文件操作路径" class="headerlink" title="(转)Unity文件操作路径"></a>(转)Unity文件操作路径</h4><hr><p>原博客地址:<a href="https://blog.csdn.net/linxinfa/article/details/51679528" target="_blank" rel="noopener">https://blog.csdn.net/linxinfa/article/details/51679528</a></p><h5 id="1-1-IOS"><a href="#1-1-IOS" class="headerlink" title="1.1 IOS:"></a>1.1 IOS:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application.dataPath :                      Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/xxx.app/Data</span><br><span class="line">Application.streamingAssetsPath :   Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/xxx.app/Data/Raw</span><br><span class="line">Application.persistentDataPath :      Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Documents</span><br><span class="line">Application.temporaryCachePath :   Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Library/Caches</span><br></pre></td></tr></table></figure><h5 id="1-2-Android"><a href="#1-2-Android" class="headerlink" title="1.2 Android:"></a>1.2 Android:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application.dataPath :                         /data/app/xxx.xxx.xxx.apk</span><br><span class="line">Application.streamingAssetsPath :      jar:file:///data/app/xxx.xxx.xxx.apk/!/assets</span><br><span class="line">Application.persistentDataPath :         /data/data/xxx.xxx.xxx/files</span><br><span class="line">Application.temporaryCachePath :      /data/data/xxx.xxx.xxx/cache</span><br></pre></td></tr></table></figure><h5 id="1-3-Windows"><a href="#1-3-Windows" class="headerlink" title="1.3 Windows:"></a>1.3 Windows:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application.dataPath :                         /Assets</span><br><span class="line">Application.streamingAssetsPath :      /Assets/StreamingAssets</span><br><span class="line">Application.persistentDataPath :         C:/Users/xxxx/AppData/LocalLow/CompanyName/ProductName</span><br><span class="line">Application.temporaryCachePath :      C:/Users/xxxx/AppData/Local/Temp/CompanyName/ProductName</span><br></pre></td></tr></table></figure><h5 id="1-4-Mac"><a href="#1-4-Mac" class="headerlink" title="1.4 Mac:"></a>1.4 Mac:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application.dataPath :                         /Assets</span><br><span class="line">Application.streamingAssetsPath :      /Assets/StreamingAssets</span><br><span class="line">Application.persistentDataPath :         /Users/xxxx/Library/Caches/CompanyName/Product Name</span><br><span class="line">Application.temporaryCachePath :     /var/folders/57/6b4_9w8113x2fsmzx_yhrhvh0000gn/T/CompanyName/Product Name</span><br></pre></td></tr></table></figure><h5 id="1-5-Windows-Web-Player"><a href="#1-5-Windows-Web-Player" class="headerlink" title="1.5 Windows Web Player:"></a>1.5 Windows Web Player:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application.dataPath :             file:///D:/MyGame/WebPlayer (即导包后保存的文件夹，html文件所在文件夹)</span><br><span class="line">Application.streamingAssetsPath :</span><br><span class="line">Application.persistentDataPath :</span><br><span class="line">Application.temporaryCachePath :</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h4 id="2-1-文件夹路径"><a href="#2-1-文件夹路径" class="headerlink" title="2.1 文件夹路径"></a>2.1 文件夹路径</h4><h5 id="2-1-Resources文件夹"><a href="#2-1-Resources文件夹" class="headerlink" title="2.1 Resources文件夹"></a>2.1 Resources文件夹</h5><p>Resources文件夹是一个只读的文件夹，通过Resources.Load()来读取对象。因为这个文件夹下的所有资源都可以运行时来加载，所以Resources文件夹下的所有东西都会被无条件的打到发布包中。建议这个文件夹下只放Prefab或者一些Object对象，因为Prefab会自动过滤掉对象上不需要的资源。举个例子我把模型文件还有贴图文件都放在了Resources文件夹下，但是我有两张贴图是没有在模型上用的，那么此时这两张没用的贴图也会被打包到发布包中。假如这里我用Prefab，那么Prefab会自动过滤到这两张不被用的贴图，这样发布包就会小一些了。</p><h5 id="2-2-StreamingAssets"><a href="#2-2-StreamingAssets" class="headerlink" title="2.2 StreamingAssets"></a>2.2 StreamingAssets</h5><p>StreamingAssets文件夹也是一个只读的文件夹，但是它和Resources有点区别，Resources文件夹下的资源会进行一次压缩，而且也会加密，不使用点特殊办法是拿不到原始资源的。但是StreamingAssets文件夹就不一样了，它下面的所有资源不会被加密，然后是原封不动的打包到发布包中，这样很容易就拿到里面的文件。所以StreamingAssets适合放一些二进制文件，而Resources更适合放一些GameObject和Object文件。 StreamingAssets 只能用过www类来读取！！</p><hr><p>StreamingAssets，在不同的平台上面 (Windows, Ios ,Android),该目录最终发布的位置不同，所以读取的方法也不同。<br><a href="https://imgchr.com/i/PBdNut" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/04/PBdNut.png" alt="PBdNut.png"></a><br>WWW是异步加载所以执行加载命令式不能直接执行读取解析操作，<br>要等待<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WWW www = <span class="keyword">new</span> WWW(filePath);</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> www; <span class="comment">// while (!www.isDone) &#123;&#125;</span></span><br><span class="line">result = www.text;</span><br></pre></td></tr></table></figure></p><p>Android之所以不支持C# IO流 方式读取StreamingAssets下的文件，是因为Android手机中 StreamingAssets下的文件 都包含在压缩的.jar文件中（这基本上与标准的zip压缩文件的格式相同）。这意味着，如果你不使用Unity中的WWW类去检索文件，那么你需要使用额外的软件去查看.jar的存档并获取该文件。</p><hr><p>安卓上跟其他平台不一样，安装后，这些文件实际上是在一个Jar压缩包里，所以不能直接用读取文件的函数去读，而要用WWW方式。具体做法如下：</p><ul><li>1.把你要读取的文件放在Unity项目的Assets/StreamingAssets文件夹下面，没有这个文件夹的话自己建一个。</li><li>2.读取的代码(假设名为”文件.txt”)<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[]  InBytes;  <span class="comment">//用来存储读入的数据   </span></span><br><span class="line"><span class="keyword">if</span> (Application.platform == RuntimePlatform.Android)        <span class="comment">//判断当前程序是否运行在安卓下   </span></span><br><span class="line">&#123;   </span><br><span class="line">        <span class="keyword">string</span> FileName = <span class="string">"jar:file://"</span> + Application.dataPath + <span class="string">"!/assets/"</span> + <span class="string">"文件.txt"</span>;   </span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(FileName);  <span class="comment">//WWW会自动开始读取文件   </span></span><br><span class="line">        <span class="keyword">while</span>(!www.isDone)&#123;&#125;          <span class="comment">//WWW是异步读取，所以要用循环来等待   </span></span><br><span class="line">        InBytes = www.bytes;          <span class="comment">//存到字节数组里   </span></span><br><span class="line"></span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">else</span>   </span><br><span class="line">&#123;   </span><br><span class="line">                        <span class="comment">//其他平台的读取代码   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>各目录权限：</p><p>根目录：StreamingAssets文件夹<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="keyword">string</span> filepath = Application.dataPath +<span class="string">"/StreamingAssets"</span>+<span class="string">"/my.xml"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> UNITY_IPHONE</span></span><br><span class="line"> <span class="keyword">string</span> filepath = Application.dataPath +<span class="string">"/Raw"</span>+<span class="string">"/my.xml"</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> UNITY_ANDROID</span></span><br><span class="line"> <span class="keyword">string</span> filepath = <span class="string">"jar:file://"</span> + Application.dataPath + <span class="string">"!/assets/"</span>+<span class="string">"/my.xml;</span></span><br><span class="line"><span class="string">#endif</span></span><br></pre></td></tr></table></figure></p><ul><li><p>根目录：Resources 文件夹</p><ul><li>可以使用Resources.Load(“名字”); 把文件夹中的对象加载出来</li></ul></li><li><p>根目录：Application.dataPath 文件夹</p><ul><li>可以使用Application.dataPath进行读操作</li></ul></li><li><p>Application.dataPath： 只可读不可写，放置一些资源数据</p></li><li><p>Application.persistentDataPath</p></li><li><p>IOS与android平台都可以使用这个目录下进行读写操作，可以存放各种配置文件进行修改之类的。</p></li><li><p>在PC上的地址是：C:\Users\用户名 \AppData\LocalLow\DefaultCompany\test</p></li></ul><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>一.在项目根目录中创建Resources文件夹来保存文件。<br>可以使用Resources.Load(“文件名字，注：不包括文件后缀名”);把文件夹中的对象加载出来。<br>注：此方可实现对文件实施“增删查改”等操作，但打包后不可以更改了。</p><p>二.直接放在项目根路径下来保存文件<br>在直接使用Application.dataPath来读取文件进行操作。<br>注：移动端是没有访问权限的。</p><p>三.在项目根目录中创建StreamingAssets文件夹来保存文件。<br>1.可使用Application.dataPath来读取文件进行操作。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR  </span></span><br><span class="line"><span class="keyword">string</span> filepath = Application.dataPath +<span class="string">"/StreamingAssets"</span>+<span class="string">"/my.xml"</span>;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> UNITY_IPHONE  </span></span><br><span class="line"> <span class="keyword">string</span> filepath = Application.dataPath +<span class="string">"/Raw"</span>+<span class="string">"/my.xml"</span>;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> UNITY_ANDROID  </span></span><br><span class="line"> <span class="keyword">string</span> filepath = <span class="string">"jar:file://"</span> + Application.dataPath + <span class="string">"!/assets/"</span>+<span class="string">"/my.xml;  </span></span><br><span class="line"><span class="string">#endif</span></span><br></pre></td></tr></table></figure></p><p>2.直接使用Application.streamingAssetsPath来读取文件进行操作。<br>注：此方法在pc/Mac电脑中可实现对文件实施“增删查改”等操作，但在移动端只支持读取操作。</p><p>四.使用Application.persistentDataPath来操作文件（荐）<br>该文件存在手机沙盒中，因为不能直接存放文件，<br>1.通过服务器直接下载保存到该位置，也可以通过Md5码比对下载更新新的资源<br>2.没有服务器的，只有间接通过文件流的方式从本地读取并写入Application.persistentDataPath文件下，然后再通过Application.persistentDataPath来读取操作。</p><p><strong>注：在Pc/Mac电脑 以及Android跟Ipad、ipone都可对文件进行任意操作，另外在IOS上该目录下的东西可以被iCloud自动备份</strong></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>游戏设计</title>
      <link href="/2018/08/03/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/08/03/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h4 id="独立游戏设计"><a href="#独立游戏设计" class="headerlink" title="独立游戏设计"></a>独立游戏设计</h4><hr><p>1.什么是游戏</p><ul><li>游戏在一个模拟出来的真是环境中,参与者遵照规则行动,尝试完成至少一个既定的重要目标的娱乐活动<br>–Ernest Adms</li><li>游戏是一个让玩家在规则约束下参与模拟的冲突,最终产生可量化的结果的系统<br>–Katie Salen</li></ul><p>2.游戏的激励要素</p><ul><li><p>游戏的快感激励</p><ul><li>快感激励具有 快速即时 普适性强 &amp;&amp; 有衰减性 易于复制</li></ul></li><li><p>游戏的美感激励</p><ul><li>美感激励具有 效果持续 难以复制 &amp;&amp; 隐藏较深 普适性差</li></ul></li><li><p>分清主次的游戏设计</p><ul><li>自由探索与成长</li><li>凄美的爱情故事</li><li>爽快的战斗</li><li>策略与运气</li><li>收集与交换</li><li>残酷的抉择</li><li>策略与操作</li></ul></li></ul><p>3.游戏的系统设计</p><ul><li><p>游戏由规则定义,什么样的规则才是能够吸引玩家的规则</p></li><li><p>实现机制与渐进机制</p></li><li>实现机制通过设定少量的规则和交互要素,但是通过要素之间的丰富练习和玩家的即时决策创造随机性极大的游戏效果,在这种情况下设计者对于游戏的控制较少,游戏可重复游玩性很高,单局长度往往较短</li><li><p>渐进机制通过完全设定好的流程和大量的规则规划好玩家每个游玩阶段的状态,设计者对于游戏进程控制度很高,游戏重复游玩性差,单局长度往往较长</p></li><li><p>随机性设计与复杂性设计</p><ul><li>随机性的设计更为简单,但是玩家可操控性较差</li><li>复杂性的设计较为困难,但是玩家可操控性很强</li><li>避免在游戏中出现唯一的最优解</li><li>[游戏模拟机制]<a href="http://www.jorisdormans.nl/machinations/" target="_blank" rel="noopener">http://www.jorisdormans.nl/machinations/</a></li></ul></li></ul><a id="more"></a><p>4.游戏的故事设计</p><ul><li><p>游戏的故事有什么作用</p><ul><li>作为玩家奖励的一部分</li><li>表现游戏世界的背景</li><li>提高沉浸感</li><li>表达作者的个人情感</li><li><p>共情</p></li><li><p>玩家与游戏中的角色达到感情上的统一的状态</p></li><li>能够引发共情的情感常常是”人之常情”(爱情,友情,亲情….)</li><li><p>相反,特殊的情感往往难以达到共情的效果,但是却能够给玩家一定的冲击力</p></li><li><p>按照完整度设计情节</p></li><li><p>片段情节/完整情节</p><ul><li>片段情节适合交代游戏世界的背景</li></ul></li><li>完整情节适合作为玩家的游戏的线索和表达作者情感</li><li>完整剧情的叙述可以采用:正叙,倒叙或者混合的方式</li><li>完整情节的设计目标:<ul><li>让玩家了解一个世界</li><li>塑造一个或者几个人物</li></ul></li></ul></li></ul><p>5.独立游戏的制作流程</p><ul><li>游戏制作中的分工<ul><li>制作人<ul><li>掌控整体框架</li><li>沟通者与决策者</li></ul></li></ul></li><li>策划<ul><li>内容的设定</li><li>细节填充</li><li>脚本的制作</li></ul></li><li>美术<ul><li>人物设定,场景与道具</li><li>整体风格把握</li></ul></li><li>程序<ul><li>实现效果</li><li>编写策划工具</li></ul></li><li>音效<ul><li>音效的采集与制作</li><li>音乐的制作</li></ul></li><li>测试<ul><li>Bug的排查</li><li>平台的兼容性</li><li>观察与整理测试玩家意见</li></ul></li><li>独行者与合作者<ul><li>独行者<ul><li>沟通成本低</li><li>有益于坚持设计的理念</li><li>对个人要求比较高</li></ul></li></ul></li><li>合作者<ul><li>沟通成本较高</li><li>需要达成设计的共识</li><li>对个人要求较低</li></ul></li></ul><p>6.独立游戏制作技巧</p><ul><li>独立游戏与商业游戏<ul><li>商业游戏面临的问题<ul><li>市场喜好,发行时机,成本预算与收益估计</li></ul></li><li>独立游戏面临的问题<ul><li>是否能够有足够的完成度和足够多的可玩内容</li><li>是否在制作一半的时候失去动力</li><li>是否会建立一个完全无法完成的任务</li></ul></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity插件之二维码</title>
      <link href="/2018/08/03/Unity%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>/2018/08/03/Unity%E6%8F%92%E4%BB%B6%E4%B9%8B%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      <content type="html"><![CDATA[<h4 id="Unity之二维码生成与解码"><a href="#Unity之二维码生成与解码" class="headerlink" title="Unity之二维码生成与解码"></a>Unity之二维码生成与解码</h4><hr><h5 id="草料二维码网址-https-cli-im"><a href="#草料二维码网址-https-cli-im" class="headerlink" title="草料二维码网址:https://cli.im/"></a>草料二维码网址:<a href="https://cli.im/" target="_blank" rel="noopener">https://cli.im/</a></h5><p>二维码生成网站</p><p>(ZXing库)</p><ul><li>ZXxing是一个开源的,用java实现的多种格式的1D/2D条码图像处理库,它包含了联系其他语言的端口,ZXing可以实现使用手机的内置的摄像头完成条形码的扫描及解码</li><li>ZXing下载地址:<a href="https://github.com/micjahn/ZXing.Net" target="_blank" rel="noopener">https://github.com/micjahn/ZXing.Net</a></li><li>把 [zxing.unity.dll] 文件导入到Unity工程中</li></ul><h5 id="1-1-识别二维码"><a href="#1-1-识别二维码" class="headerlink" title="1.1 识别二维码"></a>1.1 识别二维码</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开相机</span></span><br><span class="line"><span class="keyword">public</span> RawImage cameraImage;</span><br><span class="line">  <span class="comment">//获取相机贴图</span></span><br><span class="line">  <span class="keyword">private</span> WebCamTexture webcameraTexture;</span><br><span class="line">  <span class="comment">//ZXing类的中的识别条形码的类</span></span><br><span class="line">  BarcodeReader barcodeReader;</span><br><span class="line">  Color32[] data;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OpenCamera</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">//获取的设备,打开摄像头</span></span><br><span class="line">      WebCamDevice[] device = WebCamTexture.devices;</span><br><span class="line">      <span class="keyword">string</span> deviceName = device[<span class="number">0</span>].name;</span><br><span class="line"></span><br><span class="line">      webcameraTexture = <span class="keyword">new</span> WebCamTexture(deviceName, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">      cameraImage.texture = webcameraTexture;</span><br><span class="line">      webcameraTexture.Play();</span><br><span class="line"></span><br><span class="line">      barcodeReader = <span class="keyword">new</span> BarcodeReader();</span><br><span class="line"></span><br><span class="line">      Invoke(<span class="string">"ScanQRcode"</span>,<span class="number">3</span>f);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把摄像机的画面传递给ZXing库区解析</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">ScanQRcode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">//把一张贴图转化为一个颜色数组</span></span><br><span class="line">      data =  webcameraTexture.GetPixels32();</span><br><span class="line">      <span class="keyword">var</span> resule = barcodeReader.Decode(data,webcameraTexture.width,webcameraTexture.height);</span><br><span class="line">      <span class="keyword">if</span>(resule!= <span class="literal">null</span>)&#123;</span><br><span class="line">          print(resule.Text);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="1-2生成二维码-这种写法只能填入256-256-有一定局限性"><a href="#1-2生成二维码-这种写法只能填入256-256-有一定局限性" class="headerlink" title="1.2生成二维码(这种写法只能填入256 256 有一定局限性)"></a>1.2生成二维码(这种写法只能填入256 256 有一定局限性)</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RawImage iamge;</span><br><span class="line">BarcodeWriter barcodeWriter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>))&#123;</span><br><span class="line">        <span class="comment">//这种写法只能填入256 256 有一定局限性</span></span><br><span class="line">        ShowQR(<span class="string">"666"</span>,<span class="number">256</span>,<span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示生成二维码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowQR</span>(<span class="params"><span class="keyword">string</span> str,<span class="keyword">int</span> width,<span class="keyword">int</span> height</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义Texture2d并填充</span></span><br><span class="line">    Texture2D texture = <span class="keyword">new</span> Texture2D(width, height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把Texture2d的内容填充给创建二维码的返回值中</span></span><br><span class="line">    texture.SetPixels32(GeneQRCode(str,width,height));</span><br><span class="line">    texture.Apply();</span><br><span class="line">    iamge.texture = texture;<span class="comment">//在把Texture2d赋值给RawImage</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Color32[] <span class="title">GeneQRCode</span>(<span class="params"><span class="keyword">string</span> formatStr,<span class="keyword">int</span> width,<span class="keyword">int</span> height</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ZXing.QrCode.QrCodeEncodingOptions options = <span class="keyword">new</span> ZXing.QrCode.QrCodeEncodingOptions();</span><br><span class="line">    options.CharacterSet = <span class="string">"UTF-8"</span>;</span><br><span class="line">    options.Width = width;</span><br><span class="line">    options.Height = height;</span><br><span class="line">    options.Margin = <span class="number">1</span>;<span class="comment">//二维码距离边缘空白</span></span><br><span class="line"></span><br><span class="line">    barcodeWriter = <span class="keyword">new</span> BarcodeWriter &#123; Format = ZXing.BarcodeFormat.QR_CODE,</span><br><span class="line">                        Options = options &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  barcodeWriter.Write(formatStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1摘录大神解决方案-Blog-http-blog-sina-com-cn-s-blog-6ad33d350102xj8l-html"><a href="#2-1摘录大神解决方案-Blog-http-blog-sina-com-cn-s-blog-6ad33d350102xj8l-html" class="headerlink" title="2.1摘录大神解决方案(Blog:http://blog.sina.com.cn/s/blog_6ad33d350102xj8l.html)"></a>2.1摘录大神解决方案(Blog:<a href="http://blog.sina.com.cn/s/blog_6ad33d350102xj8l.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_6ad33d350102xj8l.html</a>)</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> ZXing;</span><br><span class="line"><span class="keyword">using</span> ZXing.QrCode;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Timi;</span><br><span class="line"><span class="comment">// 二维码管理器，功能：1.识别二维码  2：生成二维码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">QRCodeMgr</span> : <span class="title">IManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> m_IsEditorSaveTexture = <span class="literal">false</span>; <span class="comment">//这里保证上次svn的时候是false，否则每次都要生成新资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> QRTextureSavedPath = Application.persistentDataPath + <span class="string">"/QRCodeTexture"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成二维码</span></span><br><span class="line">    <span class="comment">// string text : 需要生成二维码的内容</span></span><br><span class="line">    <span class="comment">// Texture2D texture : 二维码生成出来的图片，</span></span><br><span class="line">    <span class="comment">// string savePath : 保存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Texture2D <span class="title">CreateQRCode</span>(<span class="params"><span class="keyword">string</span> textForEncoding, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">bool</span> issave = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (width &gt; <span class="number">512</span> &amp;&amp; height &gt; <span class="number">512</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"Do not save too big, it will consume cpu performance so much!! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">string</span> fullpath = QRTextureSavedPath + <span class="string">"/"</span> + textForEncoding + <span class="string">".png"</span>;</span><br><span class="line">        <span class="comment">//Debug.LogError("fullpath: "+ fullpath);</span></span><br><span class="line">        <span class="comment">//先判断文件夹下面有没有这个文件</span></span><br><span class="line">        Texture2D encoded = GetAlreadySavePng(fullpath, width, height);</span><br><span class="line">        <span class="keyword">if</span> (encoded != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> encoded;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//如果没有要重新创建并视issave保存</span></span><br><span class="line">        &#123;</span><br><span class="line">            encoded = <span class="keyword">new</span> Texture2D(width, height);</span><br><span class="line">            <span class="keyword">var</span> color32 = Encode2(textForEncoding, width, height);</span><br><span class="line">            encoded.SetPixels32(color32);</span><br><span class="line">            encoded.Apply();</span><br><span class="line">            <span class="keyword">if</span> (issave)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Application.isEditor || m_IsEditorSaveTexture)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> bytes = encoded.EncodeToPNG();<span class="comment">//把二维码转成byte数组，然后进行输出保存为png图片就可以保存下来生成好的二维码</span></span><br><span class="line">                    <span class="keyword">if</span> (!Directory.Exists(QRTextureSavedPath)) <span class="comment">//创建生成目录，如果不存在则创建目录</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//Debug.LogError("CreateDirectory: " + QRTextureSavedPath);</span></span><br><span class="line">                        Directory.CreateDirectory(QRTextureSavedPath);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.IO.File.WriteAllBytes(fullpath, bytes);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encoded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Texture2D <span class="title">GetAlreadySavePng</span>(<span class="params"><span class="keyword">string</span> fullpath, <span class="keyword">int</span> width, <span class="keyword">int</span> height</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Texture2D ret = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (System.IO.File.Exists(fullpath))</span><br><span class="line">        &#123;</span><br><span class="line">            bytes = System.IO.File.ReadAllBytes(fullpath);</span><br><span class="line">            <span class="keyword">if</span> (bytes != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ret = <span class="keyword">new</span> Texture2D(width, height);</span><br><span class="line">                ret.LoadImage(bytes, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Color32[] <span class="title">Encode2</span>(<span class="params"><span class="keyword">string</span> textForEncoding, <span class="keyword">int</span> width, <span class="keyword">int</span> height</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ZXing.Common.BitMatrix matrix = <span class="keyword">new</span> MultiFormatWriter().encode(textForEncoding,</span><br><span class="line">                BarcodeFormat.QR_CODE, width, height);</span><br><span class="line">        <span class="comment">//注意千万不能使用 writer。。。。因为这个组件除了256 大小能正常输出以外，其他都不支持。。</span></span><br><span class="line">        <span class="comment">//texture.LoadImage(ImageToByte(matrix.ToBitmap()));</span></span><br><span class="line">        <span class="comment">//var writer = new BarcodeWriter();</span></span><br><span class="line">        <span class="comment">//return writer.Write(matrix);</span></span><br><span class="line">        Color32[] pixels = <span class="keyword">new</span> Color32[width * height];</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 下面这里按照二维码的算法，逐个生成二维码的图片，</span></span><br><span class="line">        <span class="comment">// 两个for循环是图片横列扫描的结果  </span></span><br><span class="line">        Color32 black = <span class="keyword">new</span> Color32(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">        Color32 white = <span class="keyword">new</span> Color32(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[x, y])</span><br><span class="line">                &#123;</span><br><span class="line">                    pixels[y * width + x] = white;<span class="comment">// 0xff000000;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pixels[y * width + x] = black;<span class="comment">// 0xffffffff;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pixels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSharpDictionary字典</title>
      <link href="/2018/08/03/CSharpDictionary%E5%AD%97%E5%85%B8/"/>
      <url>/2018/08/03/CSharpDictionary%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<h4 id="C-Dictionary-字典"><a href="#C-Dictionary-字典" class="headerlink" title="C# Dictionary 字典"></a>C# Dictionary 字典</h4><hr><ul><li><p>说明</p><ul><li>必须包含名空间System.Collection.Generic</li><li>Dictionary里面的每一个元素都是一个键值对(由二个元素组成：键和值)</li><li>键必须是唯一的,而值不需要唯一的</li><li>键和值都可以是任何类型(比如：string, int, 自定义类型，等等)</li><li>通过一个键读取一个值的时间是接近O(1)</li><li>键值对之间的偏序可以不定义</li></ul></li><li>定义<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Dictionary&lt;T, T&gt; openWith = new Dictionary&lt;T, T&gt;();</span><br><span class="line"></span><br><span class="line">1.常用属性</span><br><span class="line"></span><br><span class="line">    名称           说明</span><br><span class="line">    Comparer       获取用于确定字典中的键是否相等的 IEqualityComparer&lt;T&gt;。</span><br><span class="line">    Count          获取包含在 Dictionary&lt;TKey, TValue&gt; 中的键/值对的数目。</span><br><span class="line">    Item           获取或设置与指定的键相关联的值。</span><br><span class="line">    Keys           获取包含 Dictionary&lt;TKey, TValue&gt; 中的键的集合。</span><br><span class="line">    Values         获取包含 Dictionary&lt;TKey, TValue&gt; 中的值的集合。</span><br><span class="line"></span><br><span class="line">2.常用方法</span><br><span class="line">    名称                说明</span><br><span class="line">    Add                 将指定的键和值添加到字典中。</span><br><span class="line">    Clear               从 Dictionary&lt;TKey, TValue&gt; 中移除所有的键和值。</span><br><span class="line">    ContainsKey         确定 Dictionary&lt;TKey, TValue&gt; 是否包含指定的键。</span><br><span class="line">    ContainsValue       确定 Dictionary&lt;TKey, TValue&gt; 是否包含特定值。</span><br><span class="line">    Equals(Object)      确定指定的 Object 是否等于当前的 Object。 （继承自 Object。）</span><br><span class="line">    Finalize            允许对象在“垃圾回收”回收之前尝试释放资源并执行其他清理操作。 （继承自 Object。）</span><br><span class="line">    GetEnumerator       返回循环访问 Dictionary&lt;TKey, TValue&gt; 的枚举器。</span><br><span class="line">    GetHashCode         用作特定类型的哈希函数。 （继承自 Object。）</span><br><span class="line">    GetObjectData       实现 System.Runtime.Serialization.ISerializable 接口，并返回序列化 Dictionary&lt;TKey, TValue&gt; 实例所需的数据。</span><br><span class="line">    GetType             获取当前实例的 Type。 （继承自 Object。）</span><br><span class="line">    MemberwiseClone     创建当前 Object 的浅表副本。 （继承自 Object。）</span><br><span class="line">    OnDeserialization    实现 System.Runtime.Serialization.ISerializable 接口，并在完成反序列化之后引发反序列化事件。</span><br><span class="line">    Remove              从 Dictionary&lt;TKey, TValue&gt; 中移除所指定的键的值。</span><br><span class="line">    ToString            返回表示当前对象的字符串。 （继承自 Object。）</span><br><span class="line">    TryGetValue         获取与指定的键相关联的值。</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">               <span class="comment">//一、创建泛型哈希表，然后加入元素</span></span><br><span class="line">               Dictionary&lt;<span class="keyword">int</span>, <span class="keyword">string</span>&gt; oscar = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, <span class="keyword">string</span>&gt;();</span><br><span class="line">               oscar.Add(<span class="number">1</span>, <span class="string">"BB"</span>);</span><br><span class="line">               oscar.Add(<span class="number">2</span>, <span class="string">"CC"</span>);</span><br><span class="line">               oscar.Add(<span class="number">3</span>, <span class="string">"DD"</span>);</span><br><span class="line">               oscar.Add(<span class="number">4</span>, <span class="string">"EE"</span>);</span><br><span class="line">               oscar.Add(<span class="number">5</span>, <span class="string">"FF"</span>);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//二、删除元素</span></span><br><span class="line">               oscar.Remove(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//三、假如不存在元素则加入元素</span></span><br><span class="line">               <span class="keyword">if</span> (!oscar.ContainsKey(<span class="number">1</span>))</span><br><span class="line">                oscar.Add(<span class="number">1</span>, <span class="string">"BB"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="comment">//四、显然容量和元素个数</span></span><br><span class="line">               Console.WriteLine(<span class="string">"元素个数: &#123;0&#125;"</span>, oscar.Count);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//五、遍历集合</span></span><br><span class="line">               <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; kvp <span class="keyword">in</span> oscar)</span><br><span class="line">               &#123;</span><br><span class="line">                      Console.WriteLine(<span class="string">"Index：&#123;0&#125;,Val：&#123;1&#125;"</span>, kvp.Key, kvp.Value);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">//六、得到哈希表中键的集合</span></span><br><span class="line">              Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;.KeyCollection keyColl = oscar.Keys;</span><br><span class="line">              <span class="comment">//遍历键的集合</span></span><br><span class="line">              <span class="keyword">foreach</span> (<span class="keyword">string</span> s <span class="keyword">in</span> keyColl)</span><br><span class="line">              &#123;</span><br><span class="line">                   Console.WriteLine(s);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">//七、得到哈希表值的集合</span></span><br><span class="line">              Dictionary&lt;<span class="keyword">int</span>, <span class="keyword">string</span>&gt;.ValueCollection valueColl = oscar.Values;</span><br><span class="line">              <span class="comment">//遍历值的集合</span></span><br><span class="line">              <span class="keyword">foreach</span> (<span class="keyword">var</span> s <span class="keyword">in</span> valueColl)</span><br><span class="line">              &#123;</span><br><span class="line">                   Console.WriteLine(s);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">//八、使用TryGetValue方法获取指定键对应的值</span></span><br><span class="line">              <span class="keyword">string</span> slove = <span class="keyword">string</span>.Empty;</span><br><span class="line">              <span class="keyword">if</span> (oscar.TryGetValue(<span class="string">"BB"</span>, <span class="keyword">out</span> slove))</span><br><span class="line">                     Console.WriteLine(<span class="string">"Val&#123;0&#125;"</span>, slove);</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                     Console.WriteLine(<span class="string">"Not Found Val"</span>);</span><br><span class="line"></span><br><span class="line">              <span class="comment">//九、清空哈希表</span></span><br><span class="line">              oscar.Clear();</span><br><span class="line">              Console.ReadLine();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MVC框架</title>
      <link href="/2018/08/03/MVC%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/08/03/MVC%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h4 id="MVC框架编程"><a href="#MVC框架编程" class="headerlink" title="MVC框架编程"></a>MVC框架编程</h4><hr><ul><li>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</li></ul><hr><h4 id="MVC-是一种使用-MVC（Model-View-Controller-模型-视图-控制器）设计创建应用程序的模式："><a href="#MVC-是一种使用-MVC（Model-View-Controller-模型-视图-控制器）设计创建应用程序的模式：" class="headerlink" title="MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建应用程序的模式："></a>MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建应用程序的模式：</h4><ul><li>Model（模型）表示应用程序核心（比如数据库记录列表）。</li><li>View（视图）显示数据（数据库记录）。</li><li>Controller（控制器）处理输入（写入数据库记录）。</li></ul><p>Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。<br>　　通常模型对象负责在数据库中存取数据。</p><p>View（视图）是应用程序中处理数据显示的部分。<br>　　通常视图是依据模型数据创建的。</p><p>Controller（控制器）是应用程序中处理用户交互的部分。<br>　　通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p><p>MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。<br>MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。</p>]]></content>
      
      
        <tags>
            
            <tag> 编程大法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CsharpToString</title>
      <link href="/2018/08/03/CsharpToString/"/>
      <url>/2018/08/03/CsharpToString/</url>
      <content type="html"><![CDATA[<h4 id="C-ToString-方法"><a href="#C-ToString-方法" class="headerlink" title="C#ToString()方法"></a>C#ToString()方法</h4><hr><h5 id="一、取中文日期显示"><a href="#一、取中文日期显示" class="headerlink" title="一、取中文日期显示"></a>一、取中文日期显示</h5><ul><li><p>1、年月日时分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentTime.ToString(&quot;f&quot;); //不显示秒</span><br></pre></td></tr></table></figure></li><li><p>2、年月</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentTime.ToString(&quot;y&quot;);</span><br></pre></td></tr></table></figure></li><li><p>3、月日</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentTime.ToString(&quot;m&quot;);</span><br></pre></td></tr></table></figure></li><li><p>4、格式为：2003-9-23</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentTime.ToString(&quot;d&quot;);</span><br></pre></td></tr></table></figure></li><li><p>5、格式为：14:24</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentTime.ToString(&quot;t&quot;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="二、字符型转换-转为字符串"><a href="#二、字符型转换-转为字符串" class="headerlink" title="二、字符型转换 转为字符串"></a>二、字符型转换 转为字符串</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 12345.ToString(&quot;n&quot;);     //结果：12,345.00</span><br><span class="line">- 12345.ToString(&quot;C&quot;);     //结果：￥12,345.00</span><br><span class="line">- 12345.ToString(&quot;e&quot;);     //结果：1.234500e+004</span><br><span class="line">- 12345.ToString(&quot;f4&quot;);    //结果：12345.0000</span><br><span class="line">- 12345.ToString(&quot;x&quot;);     //结果：3039 (16进制)</span><br><span class="line">- 12345.ToString(&quot;p&quot;);     //结果：1,234,500.00%</span><br></pre></td></tr></table></figure><a id="more"></a><hr><p>令DateTime.Now为2007-7-17 22:07:24<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.ToString(&quot;yy－MM－dd&quot;)</span><br></pre></td></tr></table></figure></p><p>处理后：07-07-17<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.ToString(&quot;yy年MM月dd日&quot;)</span><br></pre></td></tr></table></figure></p><p>处理后：07年07月17日（中文样式）</p><p>**注：<br>d 月中的某一天。一位数的日期没有前导零。<br>dd 月中的某一天。一位数的日期有一个前导零。</p><p>ddd 周中某天的缩写名称，在 AbbreviatedDayNames 中定义。</p><p>dddd 周中某天的完整名称，在 DayNames 中定义。</p><p>M 月份数字。一位数的月份没有前导零。</p><p>MM 月份数字。一位数的月份有一个前导零。</p><p>MMM 月份的缩写名称，在 AbbreviatedMonthNames 中定义。</p><p>MMMM 月份的完整名称，在 MonthNames 中定义。</p><p>y 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示不具有前导零的年份。</p><p>yy 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示具有前导零的年份。</p><p>yyyy 包括纪元的四位数的年份。</p><p>h 12 小时制的小时。一位数的小时数没有前导零。</p><p>hh 12 小时制的小时。一位数的小时数有前导零。</p><p>H 24 小时制的小时。一位数的小时数没有前导零。</p><p>HH 24 小时制的小时。一位数的小时数有前导零。</p><p>m 分钟。一位数的分钟数没有前导零。</p><p>mm 分钟。一位数的分钟数有一个前导零。</p><p>s 秒。一位数的秒数没有前导零。</p><p>ss 秒。一位数的秒数有一个前导零。**</p><h5 id="DateTime技巧"><a href="#DateTime技巧" class="headerlink" title="DateTime技巧"></a>DateTime技巧</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.Date.ToShortDateString();<span class="comment">//今天</span></span><br><span class="line">DateTime.Now.AddDays(<span class="number">-1</span>).ToShortDateString();<span class="comment">//昨天，就是今天的日期减一</span></span><br><span class="line">DateTime.Now.AddDays(<span class="number">1</span>).ToShortDateString();<span class="comment">//明天，同理，加一</span></span><br><span class="line">DateTime.Now.AddDays(Convert.ToDouble((<span class="number">0</span> - Convert.ToInt16(DateTime.Now.DayOfWeek)))).ToShortDateString();<span class="comment">//本周(要知道本周的第一天就得先知道今天是星期几，从而得知本周的第一天就是几天前的那一天，要注意的是这里的每一周是从周日始至周六止</span></span><br><span class="line"></span><br><span class="line">DateTime.Now.AddDays(Convert.ToDouble((<span class="number">6</span> - Convert.ToInt16(DateTime.Now.DayOfWeek)))).ToShortDateString();</span><br><span class="line"><span class="comment">//如果你还不明白，再看一下中文显示星期几的方法就应该懂了</span></span><br><span class="line"><span class="comment">//由于DayOfWeek返回的是数字的星期几，我们要把它转换成汉字方便我们阅读，有些人可能会用switch来一个一个地对照，其实不用那么麻烦的              </span></span><br><span class="line"><span class="keyword">string</span>[] Day = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"星期日"</span>, <span class="string">"星期一"</span>, <span class="string">"星期二"</span>, <span class="string">"星期三"</span>, <span class="string">"星期四"</span>, <span class="string">"星期五"</span>, <span class="string">"星期六"</span> &#125;;</span><br><span class="line">Day[Convert.ToInt16(DateTime.Now.DayOfWeek)];</span><br><span class="line"></span><br><span class="line"><span class="comment">//上周，同理，一个周是7天，上周就是本周再减去7天，下周也是一样</span></span><br><span class="line">DateTime.Now.AddDays(Convert.ToDouble((<span class="number">0</span> - Convert.ToInt16(DateTime.Now.DayOfWeek))) - <span class="number">7</span>).ToShortDateString();</span><br><span class="line">DateTime.Now.AddDays(Convert.ToDouble((<span class="number">6</span> - Convert.ToInt16(DateTime.Now.DayOfWeek))) - <span class="number">7</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//下周</span></span><br><span class="line">DateTime.Now.AddDays(Convert.ToDouble((<span class="number">0</span> - Convert.ToInt16(DateTime.Now.DayOfWeek))) + <span class="number">7</span>).ToShortDateString();</span><br><span class="line">DateTime.Now.AddDays(Convert.ToDouble((<span class="number">6</span> - Convert.ToInt16(DateTime.Now.DayOfWeek))) + <span class="number">7</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//本月,很多人都会说本月的第一天嘛肯定是1号，最后一天就是下个月一号再减一天。当然这是对的</span></span><br><span class="line"><span class="comment">//一般的写法</span></span><br><span class="line">DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + <span class="string">"1"</span>; <span class="comment">//第一天</span></span><br><span class="line">DateTime.Parse(DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + <span class="string">"1"</span>).AddMonths(<span class="number">1</span>).AddDays(<span class="number">-1</span>).ToShortDateString();<span class="comment">//最后一天</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//巧用C#里ToString的字符格式化更简便</span></span><br><span class="line">DateTime.Now.ToString(<span class="string">"yyyy-MM-01"</span>);</span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-MM-01"</span>)).AddMonths(<span class="number">1</span>).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//上个月，减去一个月份</span></span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-MM-01"</span>)).AddMonths(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-MM-01"</span>)).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//下个月，加去一个月份</span></span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-MM-01"</span>)).AddMonths(<span class="number">1</span>).ToShortDateString();</span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-MM-01"</span>)).AddMonths(<span class="number">2</span>).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//7天后</span></span><br><span class="line">DateTime.Now.Date.ToShortDateString();</span><br><span class="line">DateTime.Now.AddDays(<span class="number">7</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//7天前</span></span><br><span class="line">DateTime.Now.AddDays(<span class="number">-7</span>).ToShortDateString();</span><br><span class="line">DateTime.Now.Date.ToShortDateString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//本年度，用ToString的字符格式化我们也很容易地算出本年度的第一天和最后一天</span></span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-01-01"</span>)).ToShortDateString();</span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-01-01"</span>)).AddYears(<span class="number">1</span>).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//上年度，不用再解释了吧</span></span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-01-01"</span>)).AddYears(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-01-01"</span>)).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//下年度</span></span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-01-01"</span>)).AddYears(<span class="number">1</span>).ToShortDateString();</span><br><span class="line">DateTime.Parse(DateTime.Now.ToString(<span class="string">"yyyy-01-01"</span>)).AddYears(<span class="number">2</span>).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//本季度，很多人都会觉得这里难点，需要写个长长的过程来判断。其实不用的，我们都知道一年四个季度，一个季度三个月</span></span><br><span class="line"><span class="comment">//首先我们先把日期推到本季度第一个月，然后这个月的第一天就是本季度的第一天了</span></span><br><span class="line">DateTime.Now.AddMonths(<span class="number">0</span> - ((DateTime.Now.Month - <span class="number">1</span>) % <span class="number">3</span>)).ToString(<span class="string">"yyyy-MM-01"</span>);</span><br><span class="line"><span class="comment">//同理，本季度的最后一天就是下季度的第一天减一</span></span><br><span class="line">DateTime.Parse(DateTime.Now.AddMonths(<span class="number">3</span> - ((DateTime.Now.Month - <span class="number">1</span>) % <span class="number">3</span>)).ToString(<span class="string">"yyyy-MM-01"</span>)).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//下季度，相信你们都知道了。。。。收工</span></span><br><span class="line">DateTime.Now.AddMonths(<span class="number">3</span> - ((DateTime.Now.Month - <span class="number">1</span>) % <span class="number">3</span>)).ToString(<span class="string">"yyyy-MM-01"</span>);</span><br><span class="line">DateTime.Parse(DateTime.Now.AddMonths(<span class="number">6</span> - ((DateTime.Now.Month - <span class="number">1</span>) % <span class="number">3</span>)).ToString(<span class="string">"yyyy-MM-01"</span>)).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br><span class="line"><span class="comment">//上季度</span></span><br><span class="line">DateTime.Now.AddMonths(<span class="number">-3</span> - ((DateTime.Now.Month - <span class="number">1</span>) % <span class="number">3</span>)).ToString(<span class="string">"yyyy-MM-01"</span>);</span><br><span class="line">DateTime.Parse(DateTime.Now.AddMonths(<span class="number">0</span> - ((DateTime.Now.Month - <span class="number">1</span>) % <span class="number">3</span>)).ToString(<span class="string">"yyyy-MM-01"</span>)).AddDays(<span class="number">-1</span>).ToShortDateString();</span><br></pre></td></tr></table></figure><hr><p><strong>格式化数值：有时，我们可能需要将数值以一定的格式来呈现，就需要对数值进行格式化。我们使用格式字符串指定格式。格式字符串采用以下形式：Axx，其中 A 为格式说明符，指定格式化类型，xx 为精度说明符，控制格式化输出的有效位数或小数位数。</strong></p><table><thead><tr><th style="text-align:center">格式说明符</th><th style="text-align:center">说明</th><th style="text-align:center">示例</th><th style="text-align:center">输出</th></tr></thead><tbody><tr><td style="text-align:center">C</td><td style="text-align:center">货币</td><td style="text-align:center">2.5.ToString(“C”)</td><td style="text-align:center">￥2.50</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">十进制数</td><td style="text-align:center">25.ToString(“D5”)</td><td style="text-align:center">00025</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">科学型</td><td style="text-align:center">25000.ToString(“E”)</td><td style="text-align:center">2.500000E+005</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">固定点</td><td style="text-align:center">25.ToString(“F2”)</td><td style="text-align:center">25.00</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">常规</td><td style="text-align:center">2.5.ToString(“G”)</td><td style="text-align:center">2.5</td></tr><tr><td style="text-align:center">N</td><td style="text-align:center">数字</td><td style="text-align:center">2500000.ToString(“N”)</td><td style="text-align:center">2,500,000.00</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">十六进制</td><td style="text-align:center">255.ToString(“X”)</td><td style="text-align:center">FF</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity序列化Serialize介绍及用途</title>
      <link href="/2018/08/03/Unity%E5%BA%8F%E5%88%97%E5%8C%96Serialize%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%A8%E9%80%94/"/>
      <url>/2018/08/03/Unity%E5%BA%8F%E5%88%97%E5%8C%96Serialize%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%A8%E9%80%94/</url>
      <content type="html"><![CDATA[<h4 id="转-Unity序列化-Serialize-介绍及用途"><a href="#转-Unity序列化-Serialize-介绍及用途" class="headerlink" title="(转)Unity序列化(Serialize)介绍及用途"></a>(转)Unity序列化(Serialize)介绍及用途</h4><p>原文链接:<a href="https://blog.csdn.net/l773575310/article/details/71774484" target="_blank" rel="noopener">https://blog.csdn.net/l773575310/article/details/71774484</a></p><hr><h5 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化 　"></a>什么是序列化 　</h5><ul><li>序列化可以用于跨平台。实际上就是把一段数据翻译成（序列化）比较底层的语言（如汇编、机器语言），而基于这个底层语言再可以翻译（反序列化）成多种上一层的语言。</li></ul><hr><h5 id="Unity中的序列化"><a href="#Unity中的序列化" class="headerlink" title="Unity中的序列化"></a>Unity中的序列化</h5><ul><li>Unity会自动序列化所有你自己写的脚本组件（Scriptable Object）， 重载新的程序集，并且重新创建你的脚本组件。简单的说，序列化后，数据就可以被保存了,Unity序列化过程不走.NET的方法，而是Unity内部的方法。</li></ul><hr><h5 id="可序列化类型"><a href="#可序列化类型" class="headerlink" title="可序列化类型"></a>可序列化类型</h5><ul><li>1.所有继承至UnityEngine.Object的类，如MonoBehaviour。</li><li>2.所有基本数据类型，如int、string等。</li><li>3.一些内置类型，如Vector3、Quaternion,、Matrix4x4、Color、Rect、 LayerMask等。</li><li>4.一列可序列化类型的列表。</li><li>5.枚举类型。</li><li>6.结构类型。</li></ul><hr><h5 id="Unity可以序列化的有："><a href="#Unity可以序列化的有：" class="headerlink" title="Unity可以序列化的有："></a>Unity可以序列化的有：</h5><ul><li>1.可序列化类型中公有非静态字段。</li><li>2.非公有非静态，但是带[SerializeField] 特性的字段。<h5 id="Unity不可以序列化的有："><a href="#Unity不可以序列化的有：" class="headerlink" title="Unity不可以序列化的有："></a>Unity不可以序列化的有：</h5></li><li>1.静态字段</li><li>2.属性（Property）</li></ul><hr><p><strong>1. 如果一个元素放在list或array两次，序列化时，会得到两份元素的拷贝，而不是一份拷贝两次在新的列表</strong></p><p><strong>2.Unity不会序列化字典，但是你可以将key，和value分别存储在list中</strong></p><hr><h4 id="参考链接-Unity插件开发基础—浅谈序列化系统-https-zhuanlan-zhihu-com-p-29357313"><a href="#参考链接-Unity插件开发基础—浅谈序列化系统-https-zhuanlan-zhihu-com-p-29357313" class="headerlink" title="参考链接:Unity插件开发基础—浅谈序列化系统 https://zhuanlan.zhihu.com/p/29357313"></a>参考链接:Unity插件开发基础—浅谈序列化系统 <a href="https://zhuanlan.zhihu.com/p/29357313" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29357313</a></h4>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FSM状态机之UnityWIKI</title>
      <link href="/2018/08/03/FSM%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B9%8BUnityWIKI/"/>
      <url>/2018/08/03/FSM%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B9%8BUnityWIKI/</url>
      <content type="html"><![CDATA[<h3 id="FSM有限状态机"><a href="#FSM有限状态机" class="headerlink" title="FSM有限状态机"></a>FSM有限状态机</h3><hr><h5 id="组件过渡枚举：此枚举包含可由系统触发的过渡的标签。当FSMSystem类使用它时，不要更改第一个标签NullTransition。"><a href="#组件过渡枚举：此枚举包含可由系统触发的过渡的标签。当FSMSystem类使用它时，不要更改第一个标签NullTransition。" class="headerlink" title="组件过渡枚举：此枚举包含可由系统触发的过渡的标签。当FSMSystem类使用它时，不要更改第一个标签NullTransition。"></a>组件过渡枚举：此枚举包含可由系统触发的过渡的标签。当FSMSystem类使用它时，不要更改第一个标签NullTransition。</h5><ul><li>StateID枚举：这是游戏可能拥有的状态的ID。你可以使用对真实国家的类的引用，但使用枚举使系统不太容易让代码访问它不应该访问的对象。所有州的ID都应放在这里。FSMSystem类使用它时不要更改第一个标签NullStateID。</li><li>FSMState类：这个类有一个带有对的字典（Transition-StateID），指示当转换T被触发并且当前状态是S1时，FSM应该到达哪个新的状态S2。它有方法来添加和删除对（Transition-StateID），一种方法来检查转移传递给它的状态。在给出的例子中使用了两个方法来检查应该触发哪个转换（Reason（））以及哪个操作（Act（））具有FSMState的GameObject应该执行的操作。您不必使用此架构，但必须在您的游戏中使用某种过渡动作代码。</li><li>FSMSystem：这是您的游戏中的每个NPC或GameObject必须具备的有限状态机类才能使用该框架。它将NPC的状态存储在List中，具有添加和删除状态的方法以及基于传递给它的转换（PerformTransition（））更改当前状态的方法。您可以在代码中的任何位置调用此方法，如在碰撞测试中，或在Update（）或FixedUpdate（）中。</li></ul><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">A Finite State Machine System based on Chapter 3.1 of Game Programming Gems 1 by Eric Dybsand</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Written by Roberto Cezar Bianchini, July 2010</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">How to use:</span></span><br><span class="line"><span class="comment">1. Place the labels for the transitions and the states of the Finite State System</span></span><br><span class="line"><span class="comment">    in the corresponding enums.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. Write new class(es) inheriting from FSMState and fill each one with pairs (transition-state).</span></span><br><span class="line"><span class="comment">    These pairs represent the state S2 the FSMSystem should be if while being on state S1, a</span></span><br><span class="line"><span class="comment">    transition T is fired and state S1 has a transition from it to S2. Remember this is a Deterministic FSM.</span></span><br><span class="line"><span class="comment">    You can't have one transition leading to two different states.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Method Reason is used to determine which transition should be fired.</span></span><br><span class="line"><span class="comment">   You can write the code to fire transitions in another place, and leave this method empty if you</span></span><br><span class="line"><span class="comment">   feel it's more appropriate to your project.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Method Act has the code to perform the actions the NPC is supposed do if it's on this state.</span></span><br><span class="line"><span class="comment">   You can write the code for the actions in another place, and leave this method empty if you</span></span><br><span class="line"><span class="comment">   feel it's more appropriate to your project.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. Create an instance of FSMSystem class and add the states to it.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. Call Reason and Act (or whichever methods you have for firing transitions and making the NPCs</span></span><br><span class="line"><span class="comment">     behave in your game) from your Update or FixedUpdate methods.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Asynchronous transitions from Unity Engine, like OnTriggerEnter, SendMessage, can also be used,</span></span><br><span class="line"><span class="comment">just call the Method PerformTransition from your FSMSystem instance with the correct Transition</span></span><br><span class="line"><span class="comment">when the event occurs.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,</span></span><br><span class="line"><span class="comment">INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE</span></span><br><span class="line"><span class="comment">AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,</span></span><br><span class="line"><span class="comment">DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Place the labels for the Transitions in this enum.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Don't change the first label, NullTransition as FSMSystem class uses it.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Transition</span><br><span class="line">&#123;</span><br><span class="line">    NullTransition = <span class="number">0</span>, <span class="comment">// Use this transition to represent a non-existing transition in your system</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Place the labels for the States in this enum.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Don't change the first label, NullTransition as FSMSystem class uses it.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> StateID</span><br><span class="line">&#123;</span><br><span class="line">    NullStateID = <span class="number">0</span>, <span class="comment">// Use this ID to represent a non-existing State in your system</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> This class represents the States in the Finite State System.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Each state has a Dictionary with pairs (transition-state) showing</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> which state the FSM should be if a transition is fired while this state</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> is the current state.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Method Reason is used to determine which transition should be fired .</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Method Act has the code to perform the actions the NPC is supposed do if it's on this state.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FSMState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> Dictionary&lt;Transition, StateID&gt; map = <span class="keyword">new</span> Dictionary&lt;Transition, StateID&gt;();</span><br><span class="line">    <span class="keyword">protected</span> StateID stateID;</span><br><span class="line">    <span class="keyword">public</span> StateID ID &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> stateID; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTransition</span>(<span class="params">Transition trans, StateID id</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Check if anyone of the args is invalid</span></span><br><span class="line">        <span class="keyword">if</span> (trans == Transition.NullTransition)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSMState ERROR: NullTransition is not allowed for a real transition"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == StateID.NullStateID)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSMState ERROR: NullStateID is not allowed for a real ID"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Since this is a Deterministic FSM,</span></span><br><span class="line">        <span class="comment">//   check if the current transition was already inside the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.ContainsKey(trans))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSMState ERROR: State "</span> + stateID.ToString() + <span class="string">" already has transition "</span> + trans.ToString() +</span><br><span class="line">                           <span class="string">"Impossible to assign to another state"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map.Add(trans, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method deletes a pair transition-state from this state's map.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> If the transition was not inside the state's map, an ERROR message is printed.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeleteTransition</span>(<span class="params">Transition trans</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Check for NullTransition</span></span><br><span class="line">        <span class="keyword">if</span> (trans == Transition.NullTransition)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSMState ERROR: NullTransition is not allowed"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if the pair is inside the map before deleting</span></span><br><span class="line">        <span class="keyword">if</span> (map.ContainsKey(trans))</span><br><span class="line">        &#123;</span><br><span class="line">            map.Remove(trans);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Debug.LogError(<span class="string">"FSMState ERROR: Transition "</span> + trans.ToString() + <span class="string">" passed to "</span> + stateID.ToString() +</span><br><span class="line">                       <span class="string">" was not on the state's transition list"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method returns the new state the FSM should be if</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>    this state receives a transition and</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StateID <span class="title">GetOutputState</span>(<span class="params">Transition trans</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Check if the map has this transition</span></span><br><span class="line">        <span class="keyword">if</span> (map.ContainsKey(trans))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> map[trans];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> StateID.NullStateID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method is used to set up the State condition before entering it.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> It is called automatically by the FSMSystem class before assigning it</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> to the current state.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoBeforeEntering</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method is used to make anything necessary, as reseting variables</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> before the FSMSystem changes to another one. It is called automatically</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> by the FSMSystem before changing to a new state.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoBeforeLeaving</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method decides if the state should transition to another on its list</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> NPC is a reference to the object that is controlled by this class</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Reason</span>(<span class="params">GameObject player, GameObject npc</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method controls the behavior of the NPC in the game World.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Every action, movement or communication the NPC does should be placed here</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> NPC is a reference to the object that is controlled by this class</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Act</span>(<span class="params">GameObject player, GameObject npc</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// class FSMState</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FSMSystem class represents the Finite State Machine class.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  It has a List with the States the NPC has and methods to add,</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  delete a state, and to change the current state the Machine is on.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FSMSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;FSMState&gt; states;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The only way one can change the state of the FSM is by performing a transition</span></span><br><span class="line">    <span class="comment">// Don't change the CurrentState directly</span></span><br><span class="line">    <span class="keyword">private</span> StateID currentStateID;</span><br><span class="line">    <span class="keyword">public</span> StateID CurrentStateID &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> currentStateID; &#125; &#125;</span><br><span class="line">    <span class="keyword">private</span> FSMState currentState;</span><br><span class="line">    <span class="keyword">public</span> FSMState CurrentState &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> currentState; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FSMSystem</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        states = <span class="keyword">new</span> List&lt;FSMState&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method places new states inside the FSM,</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> or prints an ERROR message if the state was already inside the List.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> First state added is also the initial state.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddState</span>(<span class="params">FSMState s</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Check for Null reference before deleting</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSM ERROR: Null reference is not allowed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First State inserted is also the Initial state,</span></span><br><span class="line">        <span class="comment">//   the state the machine is in when the simulation begins</span></span><br><span class="line">        <span class="keyword">if</span> (states.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            states.Add(s);</span><br><span class="line">            currentState = s;</span><br><span class="line">            currentStateID = s.ID;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the state to the List if it's not inside it</span></span><br><span class="line">        <span class="keyword">foreach</span> (FSMState state <span class="keyword">in</span> states)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.ID == s.ID)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(<span class="string">"FSM ERROR: Impossible to add state "</span> + s.ID.ToString() +</span><br><span class="line">                               <span class="string">" because state has already been added"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        states.Add(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method delete a state from the FSM List if it exists,</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>   or prints an ERROR message if the state was not on the List.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeleteState</span>(<span class="params">StateID id</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Check for NullState before deleting</span></span><br><span class="line">        <span class="keyword">if</span> (id == StateID.NullStateID)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSM ERROR: NullStateID is not allowed for a real state"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search the List and delete the state if it's inside it</span></span><br><span class="line">        <span class="keyword">foreach</span> (FSMState state <span class="keyword">in</span> states)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.ID == id)</span><br><span class="line">            &#123;</span><br><span class="line">                states.Remove(state);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Debug.LogError(<span class="string">"FSM ERROR: Impossible to delete state "</span> + id.ToString() +</span><br><span class="line">                       <span class="string">". It was not on the list of states"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This method tries to change the state the FSM is in based on</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> the current state and the transition passed. If current state</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>  doesn't have a target state for the transition passed,</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> an ERROR message is printed.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PerformTransition</span>(<span class="params">Transition trans</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Check for NullTransition before changing the current state</span></span><br><span class="line">        <span class="keyword">if</span> (trans == Transition.NullTransition)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSM ERROR: NullTransition is not allowed for a real transition"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if the currentState has the transition passed as argument</span></span><br><span class="line">        StateID id = currentState.GetOutputState(trans);</span><br><span class="line">        <span class="keyword">if</span> (id == StateID.NullStateID)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSM ERROR: State "</span> + currentStateID.ToString() +  <span class="string">" does not have a target state "</span> +</span><br><span class="line">                           <span class="string">" for transition "</span> + trans.ToString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the currentStateID and currentState</span></span><br><span class="line">        currentStateID = id;</span><br><span class="line">        <span class="keyword">foreach</span> (FSMState state <span class="keyword">in</span> states)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.ID == currentStateID)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Do the post processing of the state before setting the new one</span></span><br><span class="line">                currentState.DoBeforeLeaving();</span><br><span class="line"></span><br><span class="line">                currentState = state;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Reset the state to its desired condition before it can reason or act</span></span><br><span class="line">                currentState.DoBeforeEntering();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// PerformTransition()</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//class FSMSystem</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity性能优化篇一</title>
      <link href="/2018/08/03/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87%E4%B8%80/"/>
      <url>/2018/08/03/Unity%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87%E4%B8%80/</url>
      <content type="html"><![CDATA[<h3 id="Unity性能优化篇-一"><a href="#Unity性能优化篇-一" class="headerlink" title="Unity性能优化篇(一)"></a>Unity性能优化篇(一)</h3><hr><h4 id="Unity游戏安装包大-运行卡的原因"><a href="#Unity游戏安装包大-运行卡的原因" class="headerlink" title="Unity游戏安装包大/运行卡的原因"></a>Unity游戏安装包大/运行卡的原因</h4><h5 id="Mono虚拟机"><a href="#Mono虚拟机" class="headerlink" title="Mono虚拟机"></a>Mono虚拟机</h5><ul><li>因为使用Unity在开发游戏的时候,因为Unity是利用Mono虚拟机来实现跨平台.<h5 id="Drawcall"><a href="#Drawcall" class="headerlink" title="Drawcall"></a>Drawcall</h5></li><li>什么是Drawcall: <a href="https://www.zhihu.com/question/36357893" target="_blank" rel="noopener">https://www.zhihu.com/question/36357893</a><ul><li>其实Drawcall很简单,就是cpu对图形绘制接口的调用,CPU通过调用图形库(directx/opengl)接口,命令GPU进行渲染操作(每一次CPU去调用图形库接口命令GPU渲染即为一次Drawcall)</li><li>很多时候我们会误认为是Drawcall造成的性能问题是GPU谢欢渲染状态导致,其实这里的元凶是CPU</li><li>CPU和GPU是如何进行并行工作和交互的<ul><li>试想，渲染流程没用采用流水线的工作方式：CPU发送一个渲染命令之后，GPU立即执行渲染命令绘制图形，等到渲染任务结束之后，CPU才可以继续发送下一个渲染命令，这样显然影响工作效率。</li></ul></li></ul></li></ul><p>采用渲染流水线后，CPU与GPU并行工作，独立而不相互依赖。这是通过命令缓冲区来实现的：命令缓冲区维护一个命令队列，CPU向其中发送命令，GPU从中取出命令并执行。命令有很多种，DrawCall是一种，其他命令还有改变渲染状态、设置渲染数据流等。</p><p>这种方式就类似于游戏开发的网络通信：维持一个消息队列，网络线程接收解析消息并将之添加到消息队列，游戏主线程更新时从中取出消息并做派发处理。</p><ul><li>DrawCall是如何影响性能的？<ul><li>每一次绘制CPU都要调用DrawCall，而在调动DrawCall前，CPU还要进行很多准备工作：检测渲染状态、提交渲染所需要的数据、提交渲染所需要的状态。<br>而GPU本身具有很强大的计算能力，可以很快就处理完渲染任务。</li></ul></li></ul><p>当DrawCall过多，CPU就会很多额外开销用于准备工作，CPU本身负载，而这时GPU可能闲置了。</p><p>做个试验：拷贝1000个总大小1M的文件和单个大小为1M的文件，明显拷贝1000个文件要慢很多，DrawCall调用和这个很类似</p><ul><li>DrawCall优化：减少DrawCall<br><a href="https://zhuanlan.zhihu.com/p/26386905" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26386905</a></li></ul><h5 id="Unity-Profiler"><a href="#Unity-Profiler" class="headerlink" title="Unity Profiler"></a>Unity Profiler</h5><h6 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a>Profiler</h6><p>Profiler官方概述:Unity Profiler窗口可帮助您优化游戏。它会为您报告在游戏的各个区域花了多少时间。例如，它可以报告渲染，动画或游戏逻辑所花时间的百分比。<br>您可以分析GPU，CPU，内存，渲染和音频的性能。<br>要查看性能分析数据，请在编辑器中使用性能分析在游戏中进行游戏，并记录性能数据。Profiler窗口随后在时间轴中显示数据，以便您可以看到比其他帧更快的帧（或更多时间）。通过点击时间线中的任何位置，Profiler窗口的底部将显示所选帧的详细信息。<br>请注意，性能分析必须测试您的代码（即：添加一些说明以方便检查）。虽然这对游戏的性能影响很小，但开销足够小，不会影响游戏帧率<br><a href="https://docs.unity3d.com/2017.4/Documentation/Manual/Profiler.html" target="_blank" rel="noopener">https://docs.unity3d.com/2017.4/Documentation/Manual/Profiler.html</a></p><h6 id="Unity-Statistics统计面板"><a href="#Unity-Statistics统计面板" class="headerlink" title="Unity Statistics统计面板"></a>Unity Statistics统计面板</h6><p>Statistics窗口，全称叫做 Rendering Statistics Window，即渲染统计窗口（或渲染数据统计窗口）,窗口中罗列出关于声音、图像、网络状况等多种统计信息</p><ul><li>FPS(Time per frame andFPS):frames per seconds表示引擎处理和渲染一个游戏帧所花费的时间,该数字主要受到场景中渲染物体数量和 GPU性能的影响，FPS数值越高，游戏场景的动画显示会更加平滑和流畅。一般来说，超过30FPS的画面人眼不会感觉到卡，由于视觉残留的特性，光在视网膜上停止总用后人眼还会保持1/24秒左右的时间，因此游戏画面每秒帧数至少要保证在30以上。另外，Unity中的FPS数值仅包括此游戏Scene里更新和渲染的帧，编辑器中绘制的Scene和其它监视窗口的进程不包括在内。</li><li>CPU:获取到当前占用CPU进行计算的时间绝对值，或时间点，如果Unity主进程处于挂断或休眠状态时，CPU time将会保持不变。</li><li>Render thread:GPU渲染线程处理图像所花费的时间，具体数值由GPU性能来决定，</li><li>Batches(批处理):即Batched Draw Calls,是Unity内置的Draw Call Batching技术。</li></ul><p>解释下什么叫做“Draw call”，CPU每次通知GPU发出一个glDrawElements（OpenGl中的图元渲染函数)或者 DrawIndexedPrimitive（DirectX中的顶点绘制方法）的过程称为一次Draw call,一般来说，引擎每对一个物体进行一次DrawCall，就会产生一个Batch,这个Batch里包含着该物体所有的网格和顶点数据，当渲染另一个相同的物体时，引擎会直接调用Batch里的信息，将相关顶点数据直接送到GPU,从而让渲染过程更加高效，即Batching技术是将所有材质相近的物体进行合并渲染。</p><p>对于含有多个不同Shader和Material的物体，渲染的过程比较耗时，因为会产生多个Batches。每次对物体的材质或者贴图进行修改，都会影响Batches里数据集的构成。因此，如果场景中有大量材质不同的物体，会很明显的影响到GPU的渲染效率</p><ul><li>Verts：摄像机视野(field of view)内渲染的顶点总数。</li><li>Tris: 摄像机视野(field of view)内渲染的的三角面总数量。</li><li>Screen:获当前Game屏幕的分辨率大小，后边的2.1MB表示总的内存使用数值。</li><li>Shadow casters：表示场景中有多少个可以投射阴影的物体，一般这些物体都作为场景中的光源。</li><li>visible skinned meshed：渲染皮肤网格的数量。</li><li>Animations:正在播放动画的数量。</li><li>SetPass calls:<ul><li>场景上有1个gameobject，希望能显示很酷炫的效果，它的Material上带有许多特定的Shader。为了实现相应的效果，Shader里或许会包含很多的Pass,每当GPU即将去运行一个Pass之前，就会产生一个“SetPass call”，因此在描述渲染性能开销上，“SetPass calls”更加有说服力<br><a href="https://blog.csdn.net/wdmzjzlym/article/details/51335915" target="_blank" rel="noopener">https://blog.csdn.net/wdmzjzlym/article/details/51335915</a></li></ul></li></ul><a id="more"></a><hr><h4 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h4><h5 id="资源优化标准"><a href="#资源优化标准" class="headerlink" title="资源优化标准"></a>资源优化标准</h5><ul><li>对动态模型的面数,材质数量,骨骼数量限定在一定范围之内</li><li>对静态模型的顶点数量进行控制</li><li>对长短时间音乐的压缩格式选择</li><li>对贴图大小选择</li><li>对Sharder的运算控制<h5 id="如何减少冗余的资源和重复资源"><a href="#如何减少冗余的资源和重复资源" class="headerlink" title="如何减少冗余的资源和重复资源"></a>如何减少冗余的资源和重复资源</h5></li><li>Resources目录下的资源不管是否被引用,都会打包进安装包,不适用的资源不要放在Resources目录下;</li><li>不同目录下的相同资源文件,如果都被引用,那么都会打包进资源包,造成冗余;保证同一个资源文件在项目中只存放在一个目录位置<h5 id="资源监测与分析"><a href="#资源监测与分析" class="headerlink" title="资源监测与分析"></a>资源监测与分析</h5><a href="https://www.uwa4d.com/#assetbundle" target="_blank" rel="noopener">https://www.uwa4d.com/#assetbundle</a></li><li>使用uwa工具优化安装包大小,和程序运行性能</li></ul><hr><h4 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h4><h5 id="CPU-GPU分工"><a href="#CPU-GPU分工" class="headerlink" title="CPU/GPU分工"></a>CPU/GPU分工</h5><ul><li>GPU比较适合大量可并行的简单任务,比如场景渲染,光照处理等,你看到的图像都是显卡渲染出出来的,同时现在的GPU也支持一些其他的运算,比如通过GLSL,HLSL和cg执行并行运算等,GPU同时也对游戏中的一些物理效果提供支持,比如PhysX.</li><li>一般CPU用于一些数值运算,逻辑运算,比如伤害,随机数等,同时你的敌人的AI也是CPU运算出来的</li></ul><h5 id="LOD-层级细节"><a href="#LOD-层级细节" class="headerlink" title="LOD-层级细节"></a>LOD-层级细节</h5><ul><li>层级细节（LOD）全称为Level of Detail。它是根据物体在游戏画面中所占的像素多少（所占游戏视图的百分比）来调用不同复杂度的模型，简单地理解就是同一个物体离摄像机比较远时使用复杂度低的模型，当物体离摄像机比较近时使用复杂度高的模型。这也是一种优化游戏渲染效率的方法。</li><li>在第三方建模软件中制作好各个层级（不同复杂程度）的模型。并按照复杂程度自高向低地为模型命名为“模型名字_LOD0”、“模型名字_LOD1”等等，最后的数字序号越低，表示复杂程度越高，这样的命名规则使得Unity3D能够自动为模型添加LOD组（LODGroup）</li><li>在导出为FBX之前，需要这两个模型的位置重合，其他的导出设置与普通模型导出一致</li><li><p>把包含了两个层级的FBX模型文件导入到Unity3D之后，Unity3D会根据模型的命名方式自动添加LODGroup。</p></li><li><p>LOD Group组件</p><ul><li>层次细节,它是根据物体在游戏画面中所占视图的百分比来调用不用复杂度的模型,简单来说,就是当一个物体距离相机比较远的时候适用低模,当物体距离相机比较近的时候适用高模,缺点就是占用大量内存.</li><li>适用这个技术,一般是在解决运行时流畅的问题,采用的是空间换时间的方式;<br>-<a href="https://imgchr.com/i/PBYdMV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBYdMV.png" alt="PBYdMV.png"></a></li><li><strong>分别将准备好的三种不同精细程度的模型放到LOD Group对应的LOD0/LOD1/LOD2中(LOD0显示的是距离相机最近的时候显示的模型,LOD3显示距离相机较远的时候显示的模型)</strong></li></ul></li></ul><h5 id="Occlucion-Culling遮挡剔除"><a href="#Occlucion-Culling遮挡剔除" class="headerlink" title="Occlucion Culling遮挡剔除"></a>Occlucion Culling遮挡剔除</h5><ul><li>遮挡剔除</li><li>当场景中势必包含大量的模型时，会造成渲染效率的降低，如果使用遮挡剔除（Occlusion Culling）技术，可以使得那些被阻挡的物体不被渲染，从而达到提高渲染效率的目的。</li><li>在默认的渲染管线中也会根据摄像机的视见体的范围对场景模型进行剔除操作，在视见体以外的物体不被渲染，但是在视见体中的物体会以离摄像机最远的物体开始渲染，接着逐渐渲染靠近摄像机的物体，后渲染的物体会覆盖先前渲染的物体，该种技术一般被称为视锥体剔除（Frustum Culling）。</li><li>锥体剔除只剔除摄像机视角范围外的物体而对于被包含在视见体中而由被其他物体遮挡的物体还是会进行渲染。而遮挡剔除（Occlusion Culling）技术是同时剔除一个在视见体内但是被其他物体所遮挡住的物体，此时该物体也不会被渲染</li><li>使用遮挡剔除时，需要进行手动设置。该技术的基本原理是在场景空间中创建一个遮挡区域，该遮挡区域由单元格（Cell）组成，每个单元格构成了整个场景的遮挡区域的一部分，这些单元格会把整个场景拆分成多个部分。</li><li><p>当摄像机能够看到该单元格时，表示该单元格中的物体会被渲染出来，而被其他单元格挡住的不被摄像机看到的单元格中的物体将不会被渲染。<br><a href="https://imgchr.com/i/PBYsIJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBYsIJ.png" alt="PBYsIJ.png"></a></p><ul><li>将所需要进行遮挡剔除的物体全部设置为静态的occ模式</li></ul><p><a href="https://imgchr.com/i/PBYcGR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBYcGR.png" alt="PBYcGR.png"></a></p></li><li>选择Occlusion Culling<br><a href="https://imgchr.com/i/PBY2xx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBY2xx.png" alt="PBY2xx.png"></a><br><a href="https://docs.unity3d.com/Manual/OcclusionCulling.html" target="_blank" rel="noopener">https://docs.unity3d.com/Manual/OcclusionCulling.html</a><br><a href="https://blog.csdn.net/cartzhang/article/details/52684127" target="_blank" rel="noopener">https://blog.csdn.net/cartzhang/article/details/52684127</a><h5 id="Lightmapping-光照贴图"><a href="#Lightmapping-光照贴图" class="headerlink" title="Lightmapping-光照贴图"></a>Lightmapping-光照贴图</h5></li><li>减少实时光照,利用光照贴图来节约性能</li><li>把需要灯光烘焙的物体勾选上LightMap static</li><li>把需要进行灯光烘焙的灯光Model设置为Baked</li></ul><h5 id="合并Mesh"><a href="#合并Mesh" class="headerlink" title="合并Mesh"></a>合并Mesh</h5><p><a href="https://imgchr.com/i/PBYWM6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBYWM6.png" alt="PBYWM6.png"></a><br><a href="https://imgchr.com/i/PBYfsK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBYfsK.png" alt="PBYfsK.png"></a></p><ul><li>sharedMesh:当前的mesh</li><li>conbinerss[i].transfrom: 不是Transfrom组件,转换坐标的矩阵</li><li>finalMesh: 合并后的Mesh</li></ul><hr><h4 id="渲染途径"><a href="#渲染途径" class="headerlink" title="渲染途径"></a>渲染途径</h4><ul><li>Unity 提供不同的渲染途径（Rendering Path）。这些渲染途径用于决定灯光和阴影在场景中的计算方法，不同的渲染途径具有不同的性能特性和渲染效果。</li><li>在Unity3D中，提供了三种渲染途径，分别是顶点光照（Vertex Lit）、前向渲染（Forward Rendering）和延时光照（Deferred Lighting）</li><li><p>渲染途径的选择可以通过在Player Settings中来设置，或者为场景中的不同摄像机设置不同的渲染路径，同一个场景中的不同摄像机可以设置不同的渲染途径。<br><a href="https://imgchr.com/i/PBYIde" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBYIde.png" alt="PBYIde.png"></a></p><p><a href="https://imgchr.com/i/PBYoIH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBYoIH.png" alt="PBYoIH.png"></a></p></li><li><p>延时光照是具有最高保真度的光照和阴影的渲染途径。如果场景中有很多实时灯光，最好使用延时光照。但它需要一定水平的硬件支持，目前移动设备上不支持该渲染途径。</p></li><li><p>使用延迟光照的主要优点是对于能影响物体的光线数量没有上限；完全采用以每像素的方式进行光线计算，这等于意味着场景中全部的灯光将以正常的光照模式作用于物体的材质上，从而保证了灯光计算的一致性；所有光线都可以使用灯光Cookie；所有的光线都能产生阴影；光照计算的开销与屏幕的光线尺寸成正比，因此不用担心光线所照射的物品的数量；但是它也有它的缺点，比如没有实时抗锯齿支持；不能处理半透明物体，也不能用在那些使用前向渲染的物体之上；不能取消物体的接受阴影属性（Receive Shadow），也就是说物体将永远接受其他物体所投射的阴影；灯光组件中的Cull Mask属性设置也会失效。</p></li><li>使用延迟光照时需要注意影响它的计算性能的因素：分别是被照亮的物体在屏幕上的像素数量和投射阴影的灯光的数量。延迟光照中实时光线的开销和光线照亮的像素的数量成正比，而不取决于场景的复杂性。</li><li>前向渲染路径（Forward Rendering Path）是基于着色器的渲染途径。它支持逐像素计算光照（包括法线贴图和灯光Cookies）以及来自一个平行光的实时阴影。</li><li>顶点光照（Vertex Lit） 是最低保真度的光照、不支持实时阴影的渲染路径。支持顶点光照渲染途径只对所有物体渲染一次（或称为一个通道Pass，或者一个渲染阶段），所有光源的照明都是在物体的顶点上进行计算的。这对于需要发布到比较旧的机器上或者受限制的移动平台上是非常合适的。由于顶点光照对硬件要求不高，所以它是最快的渲染途径并且据有最广泛的硬件，但是由于所有的光照都是在顶点层级上计算的，因此此渲染途径不支持大部分的逐像素渲染效果：如阴影、法线贴图、灯光遮罩、高精度的高光。</li></ul><hr><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p><a href="https://imgchr.com/i/PBY7id" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBY7id.png" alt="PBY7id.png"></a></p><h5 id="资源池-Object-Pooling"><a href="#资源池-Object-Pooling" class="headerlink" title="资源池-Object Pooling"></a>资源池-Object Pooling</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectPool</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ObjectPool instance;</span><br><span class="line">  <span class="comment">//存储对象池</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;<span class="keyword">string</span>,ArrayList&gt; pool = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>,ArrayList&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    instacnce = <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从资源池取出数据</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">GetInstance</span>(<span class="params"><span class="keyword">string</span> name,Vector3 position,Quaternion rotation</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">string</span> key = name+<span class="string">"Clone"</span>;</span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="comment">//判断是否有该名字的对象池,且对象池对象个数大于0</span></span><br><span class="line">    <span class="keyword">if</span>(pool.ContainsKey(key) &amp;&amp; pool[key].Count&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList list = pool[key];</span><br><span class="line">        obj = list[<span class="number">0</span>] <span class="keyword">as</span> Object;</span><br><span class="line">        <span class="comment">//从对象池中移除该对象</span></span><br><span class="line">        list.RemoveAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重新初始化相关状态</span></span><br><span class="line">        (obj <span class="keyword">as</span> GameObject).SetActive(<span class="literal">true</span>);</span><br><span class="line">        (obj <span class="keyword">as</span> GameObject).transfrom.position = position;</span><br><span class="line">        (obj <span class="keyword">as</span> GameObject).transfrom.rotation = rotation;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        obj = Instantiate(Resources.Load(name),position,rotation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每次把对象从池子里拿出来的时候要初始化对象属性</span></span><br><span class="line">    DelayDestory destory = (obj <span class="keyword">as</span> GameObject).GetComponent&lt;DelayDestory&gt;().Init();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据回收到资源池</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">Return</span>(<span class="params">GameObject obj</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">string</span> key = obj.name;</span><br><span class="line">      <span class="comment">//如果这个字典中有这个key的话;判断是否有该对象的对象池</span></span><br><span class="line">      <span class="keyword">if</span>(pool.ContainsKey(key))</span><br><span class="line">      &#123;</span><br><span class="line">        ArrayList list = pool[key];</span><br><span class="line">        <span class="comment">//放置到对象池中</span></span><br><span class="line">        list.Add(obj);</span><br><span class="line">      &#125;<span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">//创建该类型的池子,将对象放入</span></span><br><span class="line">        pool[key] = <span class="keyword">new</span> ArrayList()&#123;obj&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      obj.SetActive(<span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DelayDestory</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> vodi <span class="title">Init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    StartCoroutine(ReturnToPool());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2s后自动把对象回收到对象池中</span></span><br><span class="line">  <span class="function">IEnumerator <span class="title">ReturnToPool</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">2</span>f</span>)</span>;</span><br><span class="line">    ObjectPool.instance.Return(<span class="keyword">this</span>.gameobject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="事件调用顺序"><a href="#事件调用顺序" class="headerlink" title="事件调用顺序"></a>事件调用顺序</h5><ul><li>在Unity3D的脚本当中，提供了一些按照预定顺序执行的事件函数。熟悉这些事件函数的调用时机，才能把合适的代码放在合适的事件函数中，通过对这些函数进行重写来覆盖默认的函数功能。下图展示了这些事件函数的调用时机。<br><a href="https://imgchr.com/i/PBYXsf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBYXsf.png" alt="PBYXsf.png"></a></li><li><p>Awake函数：</p><ul><li>也被称为唤醒函数，当一个脚本实例被载入的时候调用，它的调用时机先于Start函数。该方法一般用于游戏开始之前初始化引用或设置游戏状态，与对象构造函数功能相似。该函数在整个脚本的生命周期内只被调用一次，而且它是在场景中所有的对象被实例化之后才被调用，因此可以在该函数中与其他游戏对象进行对话或者使用GameObject中寻找场景对象相关函数如FindWithTag等来寻找场景中的对象，而且一般在该函数中进行脚本或者对象间的引用设置。场景中所有对象脚本中的Awake方法的调用顺序是随机的，也就是说没有按照某种规则先执行哪个对象的Awake函数。这里需要注意的是，Awake函数并不是对象的构造函数，而且不能在该函数中执行协同程序（coroutine）。</li></ul></li><li><p>Start函数</p><p>-称为开始函数，它是在第一次执行Update函数之前，Awake函数执行之后被调用。一般Awake用于初始化对象或者脚本、组件之间的引用，而Start函数用于做数值的初始化设置。而且它同awake一样，在整个脚本生命周期中只被调用一次。在该函数中执行协同程序，用于调整程序执行的节奏，比如等待一个音频素材的导入之后再执行下面的代码等等。</p></li><li><p>Update函数</p><ul><li>也被称为更新函数。该函数游戏运行时每一帧之前被调用一次，是用于更新每帧游戏逻辑数据（比如角色的位置更新）的最常用函数。该函数的调用频率时基于游戏目前的帧速率的，所以其调用频率是由当前游戏的运行速度来决定</li></ul></li><li><p>LateUpdate函数</p><ul><li><p>更新函数。它在Update函数调用之后被调用，它也是每帧被调用一次。在Update()中执行的任何算都会在LateUpdate()开始之前完成。    </p><ul><li>LateUpdate()的一个常见应用就是第三人称控制器的相机跟随。如果把角色的移动和旋转放在Update()中，那么就可以把所有相机的移动旋转放在LateUpdate()。这是为了在相机追踪角色位置之前，确保角色已经完成移动</li></ul></li></ul></li><li><p>FixedUpdate函数：</p><ul><li><p>FixedUpdate()比Update()函数调用的更频繁，它的调用频率是基于整个游戏的固定定时器的。当帧速率较低时，它每帧可能被调用多次，如果帧速率比较高，它有可能就不会被调用了。</p></li><li><p>所有的物理计算和更新都发生在FixedUpdate()之后。当在FixedUpdate()中计算物体移动时，不需要乘以Time.deltaTime（当然要获得最后一次调用FixedUpdate所用的时间，也可以用Time.deltaTime。）。因为FixedUpdate()是基于可靠的定时器的，不受帧速率的影响。这里需要注意的是，处理Rigidbody相关物理运算时，需要用FixedUpdate来代替Update。例如:给刚体加一个作用力时，必须在FixedUpdate里应用作用力，而不是在Update中，因为物理模拟计算的频率与帧更新的调用频率不同。</p></li></ul></li><li><p>OnApplicationFocus函数</p><ul><li>也被称为应用程序聚焦函数。现在的操作系统都是多任务多窗口运行系统，也就是说可以同时打开多个应用程序，当前被激活的应用程序也可以成为被聚焦（激活），其他的应用程序失焦。例如现在窗口中打开了网页浏览器，Word，当你激活页面浏览器时，Word就失去焦点，当切换到Word软件时，页面浏览器失焦，而Word软件被激活。当玩家从其他的应用程序聚焦到当前游戏时，OnApplicationFocus函数会被调用。</li></ul></li><li><p>OnApplicationPause函数:</p><ul><li>也被称为应用程序暂停函数。当游戏暂停时在当前帧更新之后被调用。一般是当程序失焦的时候被调用。对于使用Time.scaleTime = 0的方法来暂停游戏，该函数不会被调用。</li></ul></li><li><p>OnApplicationQuit函数:</p><ul><li>也称为应用程序退出函数。在应用退出之前所有的游戏对象都会调用这个函数。当游戏退出时，有可能要对游戏进行一些善后的处理，比如可以在该函数中做数据永久化保存的工作。</li></ul></li></ul><p>游戏对象当前状态的事件函数:</p><ul><li>在Unity3D中，游戏对象的状态可以分为实例化、初始化、激活、注销、销毁等。游戏对象的实例化由游戏对象的构造函数来完成，一般的游戏对象其实例化的过程不用人工参与（有时只是为构造函数提供属性值而已），游戏对象实例化之后，其初始化过程由Awake函数和Start函数来完成，而对于激活、注销和销毁等状态，则会分别调用一下四个函数：</li><li>OnEnable函数，也被称为激活函数。当游戏对象从注销状态转到激活状态时被调用。</li><li>OnDisable函数:也被称为注销函数。当游戏对象从激活状态转到注销状态时被调用。</li><li>OnDestroy函数：<ul><li>也被称为对象销毁函数，当场景中的对象被销毁时而且所有帧更新之后被调用（也就是在对象存在的最后一帧）。该函数一般用于相应Destroy函数或者场景关闭时。使用该函数，可以对对象销毁前做善后工作。OnDestroy不能用于协同程序。</li></ul></li><li>Reset函数<ul><li>也被称为重置函数。Reset是在用户点击Inspector面板的Reset按钮或者首次添加该组件时被调用。此函数只在编辑模式下被调用。Reset最常用于在检视面板中给定一个最常用的默认值<br><a href="https://imgchr.com/i/PBtCJs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtCJs.png" alt="PBtCJs.png"></a></li></ul></li></ul><hr><h5 id="优化工具-UWA-Game-Optimization-Toolkit"><a href="#优化工具-UWA-Game-Optimization-Toolkit" class="headerlink" title="优化工具 UWA Game Optimization Toolkit"></a>优化工具 UWA Game Optimization Toolkit</h5><p><strong>编译性能优化</strong><br><a href="http://forum.china.unity3d.com/thread-13028-1-1.html" target="_blank" rel="noopener">http://forum.china.unity3d.com/thread-13028-1-1.html</a><br><a href="http://gad.qq.com/article/detail/27927" target="_blank" rel="noopener">http://gad.qq.com/article/detail/27927</a></p><hr><h4 id="优化运行效率"><a href="#优化运行效率" class="headerlink" title="优化运行效率"></a>优化运行效率</h4><h5 id="降低绘制调用（Draw-Call）数量"><a href="#降低绘制调用（Draw-Call）数量" class="headerlink" title="降低绘制调用（Draw Call）数量"></a>降低绘制调用（Draw Call）数量</h5><ul><li>随着图形卡性能的提高，处理大量多边形数据的能力也在增长。比如现在一个具有100个三角面的物体和渲染一个具有1500个三角面的物体所需要的渲染开销是差不多的。当处于摄像机视见体内，而且添加了网格渲染器（Mesh Renderer）组件的对象才会产生渲染的开销，而空的游戏对象并不会产生渲染开销。但当模型是分开独立时，从程序把一个模型的数据经过CPU传输到GPU并命令GPU进行绘制时（称为一个Draw Call，也就是绘制调用过程），会产生大量的CPU开销。</li><li>Unity3D在运行时可以将一些物体对象进行合并，也就是把多个物体打包再使用一个Draw Call来渲染他们，这一操作被称为“批处理” （Batching）</li><li>一般来说，Unity3D批处理的物体越多，便会得到越好的渲染性能。Unity3D中内建的批处理机制所达到的效果要明显强于使用第三方建模软件</li><li>使用共享贴图减少Draw Call。Unity3D判断对哪些物体对象进行批处理，一般是根据这些物体是否具有共同的材质和贴图，也就是说，拥有相同材质的物体才可以进行批处理。因此，如果想要得到更好的批处理效果，需要在场景中尽可能地复用材质到不同的物体上。</li><li>只合并两个物体而没有共享材质，也是不会启用批处理操作。如果想有效地合并，你需要确保网格结合后，只使用一种材质。</li><li>如果需要通过脚本来访问复用材质属性，那么如果使用Renderer.material来改变贴图将会造成一份材质的拷贝。因此，一般应该使用Renderer.sharedMaterial 来保证材质的共享状态。<h5 id="动态批处理"><a href="#动态批处理" class="headerlink" title="动态批处理"></a>动态批处理</h5></li><li><p>Unity3D内置的批处理对共享贴图的动态物体也同样有效。只是需要注意的地方有：由于批处理动态物体需要在每个顶点上进行一定的开销，所以动态批处理仅支持小于900顶点的网格物体。</p></li><li><p>不要使用缩放。分别拥有缩放大小(1,1,1) 和(2,2,2)的两个物体将不会进行批处理。统一缩放的物体不会与非统一缩放的物体进行批处理。</p></li><li><p>使用不同材质的物体将会不能被批处理。<br>多通道的shader会妨碍批处理操作。比如，几乎unity中所有的着色器在前向渲染（Forward Rendering）中都支持多个光源，因此为它们开辟多个通道，所以对批处理有影响。<br>使用预设生成的对象会自动地使用相同的网格模型和材质，因此会被批处理。</p><h5 id="静态批处理"><a href="#静态批处理" class="headerlink" title="静态批处理"></a>静态批处理</h5></li><li>相对而言，静态批处理操作允许引擎对任意大小的几何物体进行批处理操作来降低绘制调用（只要这些物体不移动，并且拥有相同的材质）。因此，静态批处理比动态批处理更加有效，应该尽量地使用它，因为它需要更少的CPU开销。</li><li>为了更好地使用静态批处理，需要明确指出哪些物体是静止的，并且在游戏中永远不会移动、旋转和缩放。可以通过在Inspector窗口中将Static复选框勾选即可。<h5 id="在前向渲染途径（Forward-Rendering-Path）模式下减少像素灯的数量"><a href="#在前向渲染途径（Forward-Rendering-Path）模式下减少像素灯的数量" class="headerlink" title="在前向渲染途径（Forward Rendering Path）模式下减少像素灯的数量"></a>在前向渲染途径（Forward Rendering Path）模式下减少像素灯的数量</h5>根据影响物体的光源的不同，前向渲染途径用单个或多个通道来渲染物体。在前向渲染中，光源本身也会根据他们的设置和强度受到不同级别的对待。<h5 id="使用层消隐距离来优化场景。"><a href="#使用层消隐距离来优化场景。" class="headerlink" title="使用层消隐距离来优化场景。"></a>使用层消隐距离来优化场景。</h5>在一些游戏中，可能需要将小物件剔除，以减少绘图调用的数量。例如，在足够远的距离，大型建筑物仍然可见，小石块和碎片可以隐藏掉。要做到这一点，<strong>可以小物件放入一个单独的层（separate layer）中，并使用Camera.layerCullDistances函数来设置每一层的消隐距离。</strong><h5 id="注意阴影的数量和质量"><a href="#注意阴影的数量和质量" class="headerlink" title="注意阴影的数量和质量"></a>注意阴影的数量和质量</h5>如果游戏的发布目标平台是台式机，那么需要注意实时阴影的设置;产生实时阴影一般开销是较大的。如果不正确使用，它们可能造成大量的性能开销。阴影影响渲染速度的主要因素有：产生实时阴影的灯光数量、投射阴影和接收阴影的物体数量（在物体Mesh Renderer组件中设置）、阴影是硬阴影（Hard Shadows，速度快，边缘锐利）还是软阴影（Soft Shadows，速度慢，边缘柔和）、阴影的分辨率以及阴影的柔和度。这些属性基本可以在灯光组件属性面板中设置。如果有需要的话，把一些阴影烘焙在光照贴图上是提高渲染效率的一种方法（此时灯光需要设置成“静态”static物体）。最后还有一个设置可以提高阴影的渲染效率，便是在“质量设置”（Quality Settings）<strong>面板中的Shadow Distance属性上设置阴影的显示距离</strong>，该距离是根据当前摄像机作为参考的，当可以生成阴影的地方与当前摄像机之间的距离超过该值时，将不生成阴影。<h5 id="优化模型几何体"><a href="#优化模型几何体" class="headerlink" title="优化模型几何体"></a>优化模型几何体</h5>在渲染流水线中，模型的数据量越大，需要对这些数据进行处理的时间也会越长，当然随着渲染技术的发展，处理模型数据的数量也在提升。但是，经量地使用优化的模型可以使得游戏运行更加有效率。那么对模型的优化主要是顶点、三角形面片数目不要太多；<h5 id="使用贴图压缩优化"><a href="#使用贴图压缩优化" class="headerlink" title="使用贴图压缩优化"></a>使用贴图压缩优化</h5>尺寸越小、压缩比率越高的贴图，占用的内存空间也会降低，也可以降低对它的渲染处理时间，同时也会减少游戏文件的体积。修改贴图的尺寸以及压缩格式可以通过贴图的属性面板来设置。最后在整个场景中尽量减少贴图的数量。<h5 id="蒙皮动画模型优化"><a href="#蒙皮动画模型优化" class="headerlink" title="蒙皮动画模型优化"></a>蒙皮动画模型优化</h5>蒙皮动画主要针对添加骨骼的模型，对这些模型的优化也对渲染效率起到不可低估的提升作用。只使用一个蒙皮网格渲染器。在Unity中每个角色仅使用一个蒙皮网格渲染器（skinned mesh renderer）来绘制。</li><li>使用尽可能少的材质。应该尽可能地减少网格所用材质的数量。除非想使用不同的着色器来实现不同部位的材质效果（例如，角色身体和眼睛使用不同的着色器）。但是，大多数情况下，每个角色使用2-3个材质就够了</li><li>尽可能减少骨骼数量。中型的PC游戏每个角色一般使用15-60个骨骼。骨骼越少，性能越好。一般用30个骨骼就可以在台式机上（Desktop platforms）获得很好的表现效果，同时在手机平台（Mobile Platforms）上质量也相当不错。理想的情况是，在手机平台（Mobile Platforms）上单角色的骨骼不要超过30个，在台式机（ Desktop platforms）上也尽量只用30个左右的骨骼。<h5 id="物理性能优化"><a href="#物理性能优化" class="headerlink" title="物理性能优化"></a>物理性能优化</h5>如果对于台式机，对于稍微复杂一些的物理模拟运算来说是绰绰有余的，但是如果是开发移动终端的游戏，那么就需要更加注意物理性能的优化了。         </li></ul><p>调整“固定时钟步调”（Fixed Timestep，该时间间隔与帧速率无关，用于控制物理计算和执行FixedUpdate事件的频率）设置（Time manager，在主菜单中选择【Edit】-&gt;【Project Settings】-&gt;【Time】。</p><ul><li><p>这里顺便介绍一下，在这个面板中的最后一个属性“时间缩放因子”（Time Scale），如果该值为1，表示按照正常时钟运行游戏，当该值为0时，游戏暂停运行，如果设置成2，游戏运行时间将加快两倍，当为0.5时，运行时间减慢到一半），以减少对物理更新所花费的时间。 增加时间步长将减少CPU开销，但物理模拟的精度会下降。通常情况下，为增加速度而降低精度是可以接受的折中方案。<br>设置第二个属性中的“最大允许时钟步调”（Maximum Allowed Timestep，物理计算和FixedUpdate() 执行不会超过该指定的时间）在0.1-0.125范围之内，使得在最坏的情况下封顶物理花费的时间。</p></li><li><p>网格碰撞盒比基本碰撞盒需要更高的性能开销，因此应该尽量少使用。通过把基本碰撞盒作为物体的子对象，来尽可能地近似网格的形状。子碰撞盒将作为单一复合碰撞盒共同控制其父级的刚体。车轮碰撞盒不是严格意义上的固体物体的碰撞，以及布料模拟，都会造成很高的CPU开销。</p></li><li><p>物理模拟计算的开销取决于场景中非休眠刚体和碰撞盒的数量以及碰撞盒的复杂度。在游戏测试运行的时候，可以在场景中使用分析器来跟踪当前有多少个物理物体在起作用</p></li></ul><h5 id="优化脚本性能"><a href="#优化脚本性能" class="headerlink" title="优化脚本性能"></a>优化脚本性能</h5><ul><li>减少固定的增量时间。设置fixedTimeStep值在0.04～0.067秒之间（也就是每秒15～25帧之间）。这降低了FixedUpdate被调用和物理引擎执行碰撞检测和刚体更新的频率。如果为主角色添加了刚体，可以在刚体组件启用“插值”（interpolation）来平滑降低固定增量时间步。</li><li>减少GetComponent的调用。使用GetComponent或内置的组件访问函数将带来明显的性能开销。可以通过获取一次组件的引用并指定给变量来避免这个操作（有时也被称为”缓存”的引用）。例如未优化的代码如下：</li><li>避免分配内存。除非确实需要，否则应该尽量避免实时生成新的对象，因为当它们不再使用时，为这些废弃的对象进行垃圾回收会造成一定的开销。可以通过使用数组结构来减少垃圾收集。</li></ul><hr><h4 id="性能优化文章参考"><a href="#性能优化文章参考" class="headerlink" title="性能优化文章参考"></a>性能优化文章参考</h4><p><a href="https://blog.csdn.net/candycat1992/article/details/42127811" target="_blank" rel="noopener">https://blog.csdn.net/candycat1992/article/details/42127811</a></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity插件之Cinemachine</title>
      <link href="/2018/08/03/Unity%E6%8F%92%E4%BB%B6Cinemachine/"/>
      <url>/2018/08/03/Unity%E6%8F%92%E4%BB%B6Cinemachine/</url>
      <content type="html"><![CDATA[<h4 id="Unity相机插件之Cinemachine"><a href="#Unity相机插件之Cinemachine" class="headerlink" title="Unity相机插件之Cinemachine"></a>Unity相机插件之Cinemachine</h4><hr><ul><li>游戏设计中的镜头语言:<ul><li>跟踪</li><li>瞄准</li><li>物理相关: 碰撞,视线遮挡</li><li>镜头特效</li><li>镜头切换</li></ul></li><li>Cinemachine程序化相机系统:<ul><li>构建虚拟世界的相机系统,模拟真实相机的行为;</li><li>通过程序化方式,提高开发效率;</li></ul></li></ul><hr><h4 id="Unity官方的教学"><a href="#Unity官方的教学" class="headerlink" title="Unity官方的教学"></a>Unity官方的教学</h4><ul><li><p>Cinemachine提供了很多预先设置好的行为。例如：常见的第三人称绕着角色旋转的行为，或者沿着导轨滑动的行为。通过提前预置行为，可以帮助我们非常方便的来实现游戏中的功能。也就是通过程序化的方式，提升我们的开发效率。</p></li><li><p>Cinemachine核心组件包括Brain和Virtual Camera（虚拟相机），Brain负责相机的切换。虚拟相机复杂拍摄。</p></li><li><p>通常我们的场景中不是单一的虚拟摄像机，而是由很多台虚拟相机来完成拍摄任务，如下图所示。因此大家在制作游戏的时候更像是一个电影导演，可以通过各种相机实现各种炫酷的镜头，完成各种不同角度到拍摄。<br><a href="https://imgchr.com/i/PBtcTg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtcTg.png" alt="PBtcTg.png"></a></p></li></ul><h5 id="虚拟相机详解"><a href="#虚拟相机详解" class="headerlink" title="虚拟相机详解:"></a>虚拟相机详解:</h5><p>虚拟相机主要由六个模块组成，分别是：</p><ul><li>Lens：包括调整FOV等参数；</li><li>Body：负责处理相机和跟踪目标之间的相对位置的这样一个关系；</li><li>Aim：负责处理焦点和跟踪目标在镜头中的相对位置；</li><li>Noise：模拟手持相机的晃动；</li><li>后处理模块：让每个镜头有不同的后处理效果；</li><li>Extnesions可扩展模块：包括碰撞处理等功能。</li></ul><hr><p><a href="https://imgchr.com/i/PBt2kQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBt2kQ.png" alt="PBt2kQ.png"></a><br>Body模块，在代码层面称为Transposer，它的主要功能是处理场景中相机和它的目标之间的位置关系。我们可以把它用数学变量表示就是Offset，Offset是一个向量，不仅有大小还有方向。那么Offset的计算方式不同，可以带来不同的跟踪效果。<br><a href="https://imgchr.com/i/PBtRYj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtRYj.png" alt="PBtRYj.png"></a></p><a id="more"></a><hr><p>Transposer的类型目前有五类：</p><ul><li>Ransposer：基本类型；</li><li>Obital Transposer：可以根据用户输入绕目标旋转；</li><li>Framing Tansposer：在屏幕空间中计算相机和目标的Offset;</li><li>Racked Dolly：把相机设置到一个轨道上；</li><li>HardLockToTarget：把相机和目标的位置和朝向进行绑定，常用于第一人称模式。<br><a href="https://imgchr.com/i/PBtWfs" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtWfs.png" alt="PBtWfs.png"></a><br>Transposer类型。它的参数里面包括了相机和跟踪目标的偏移量，缓动参数，还有绑定的模式。  </li></ul><p>绑定模式目前是支持六种的绑定模式，大家看到前四种和LockToTarget相关，第五种是WorldSpace，第六种是SimpleFollowWithWorldUp。那么前四种其实它主要的意思是摄像机和目标之间的Offset的计算是以目标为参考系，也就是Offset是在目标的局部空间中，目标转动相机会跟着目标进行旋转，下面这些参数会有一些调整和变化，但是基本上大家理解之后就没有什么问题。WorldSpace则是把Offset放在世界坐标中计算，不会算目标旋转而选择。最后的SimpleFollowWithWorldUp则是把Offset放到相机的坐标系中进行计算。<br><a href="https://imgchr.com/i/PBthpn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBthpn.png" alt="PBthpn.png"></a></p><hr><h5 id="Obital-Transposer"><a href="#Obital-Transposer" class="headerlink" title="Obital Transposer"></a>Obital Transposer</h5><p>Obital Transposer能接受用户的输入，并根据这个输入控制相机绕着目标进行旋转，主要是运用在第三人称游戏。由于旋转的时候需要一个基准的方向，而这个方向我们称之为Heading。<br><a href="https://imgchr.com/i/PBt4lq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBt4lq.png" alt="PBt4lq.png"></a></p><hr><h5 id="Framing-Transposer"><a href="#Framing-Transposer" class="headerlink" title="Framing Transposer"></a>Framing Transposer</h5><p>计算屏幕空间中相机和目标的相对位置，常用于2D游戏。</p><p><a href="https://imgchr.com/i/PBt560" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBt560.png" alt="PBt560.png"></a></p><hr><h5 id="虚拟相机的另一个重要组件Aim"><a href="#虚拟相机的另一个重要组件Aim" class="headerlink" title="虚拟相机的另一个重要组件Aim"></a>虚拟相机的另一个重要组件Aim</h5><p>在代码层面我们也称之为Composer。其中包含基本类型Composer；Group Composer不是跟踪单一目标，是跟踪群体中的某个位置；然后是POV，类似于第一人称相机的模式，没有具体跟踪到某一个目标，但是根据输入进行自由旋转。然后Hard Look At是锁死某一个目标，然后还有Same As Follow主要是对Follow的目标，保持同样的旋转和朝向。<br><a href="https://imgchr.com/i/PBtTmT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtTmT.png" alt="PBtTmT.png"></a></p><p>在Composer中可以设置焦点和目标之间的偏移，追踪目标时候的缓动。在下图中的红色区域我们称之为是DeadZone，当相机和目标距离相对位置超出边界的时候，相机才进行追踪，这也是为了实现一些缓动的效果。那么除此之外还可以设置整个焦点的偏移，我可以把整个相机的焦点区域往任何一个屏幕方向进行偏移。</p><p><a href="https://imgchr.com/i/PBt70U" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBt70U.png" alt="PBt70U.png"></a></p><hr><h5 id="POV-Composer通常和Hard-lock-To-Targt来结合实现第一人称视角相机"><a href="#POV-Composer通常和Hard-lock-To-Targt来结合实现第一人称视角相机" class="headerlink" title="POV Composer通常和Hard lock To Targt来结合实现第一人称视角相机"></a>POV Composer通常和Hard lock To Targt来结合实现第一人称视角相机</h5><p><a href="https://imgchr.com/i/PBtH7F" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtH7F.png" alt="PBtH7F.png"></a></p><hr><h5 id="Noise组件用于实现相机和目标之间的晃动效果。"><a href="#Noise组件用于实现相机和目标之间的晃动效果。" class="headerlink" title="Noise组件用于实现相机和目标之间的晃动效果。"></a>Noise组件用于实现相机和目标之间的晃动效果。</h5><p><a href="https://imgchr.com/i/PBtjpR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtjpR.png" alt="PBtjpR.png"></a></p><hr><h5 id="Postprocessing组件，每个相机都可以添加一组后处理效果。"><a href="#Postprocessing组件，每个相机都可以添加一组后处理效果。" class="headerlink" title="Postprocessing组件，每个相机都可以添加一组后处理效果。"></a>Postprocessing组件，每个相机都可以添加一组后处理效果。</h5><p><a href="https://imgchr.com/i/PBtv11" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtv11.png" alt="PBtv11.png"></a></p><hr><p>扩展组件，有Collider负责相机碰撞检测以及视线遮挡等功能；Confiner负责定义相机的活动范围；FollowZoom动态调整镜头FOV，以便目标在移动的时候会在镜头中保持同样的大小；Story Board是最新的功能，可以在镜头中放置一副参考图，便于摆放位置和调色。<br><a href="https://imgchr.com/i/PBtx6x" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBtx6x.png" alt="PBtx6x.png"></a></p><hr><h5 id="组合虚拟相机介绍"><a href="#组合虚拟相机介绍" class="headerlink" title="组合虚拟相机介绍"></a>组合虚拟相机介绍</h5><p>Unity提供了种类比较丰富的组合相机，包括：FreeLook，BlendList，State Driven，Dolly Camera，2D Camera等.<br><a href="https://imgchr.com/i/PBNpnK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBNpnK.png" alt="PBNpnK.png"></a></p><hr><h5 id="FreeLook"><a href="#FreeLook" class="headerlink" title="FreeLook"></a>FreeLook</h5><p>FreeLook可以围绕目标水平和竖直转动，实际上由三个Body组件为Obit Transposer的虚拟相机构成。我们可以利用FreeLook很轻易的实现第三人称相机。<br><a href="https://imgchr.com/i/PBNC7D" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBNC7D.png" alt="PBNC7D.png"></a></p><hr><h5 id="State-Driven"><a href="#State-Driven" class="headerlink" title="State Driven"></a>State Driven</h5><p>State Driven相机可以把动画状态和相机进行绑定，当动画状态切换的时候，相机自动进行切换。<br><a href="https://imgchr.com/i/PBNFtH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBNFtH.png" alt="PBNFtH.png"></a></p><hr><h5 id="Clear-Shot"><a href="#Clear-Shot" class="headerlink" title="Clear Shot"></a>Clear Shot</h5><p>Clear Shot相机可以管理一组相机，自动选择进行最佳拍摄的距离。<br><a href="https://imgchr.com/i/PBNkhd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBNkhd.png" alt="PBNkhd.png"></a></p><hr><h5 id="Target-Group"><a href="#Target-Group" class="headerlink" title="Target Group"></a>Target Group</h5><p>Target Group相机可以设置相机焦点到多个拍摄目标的中间。比如两个人谈话的时候相机不是对着某个人，而是直接对他们的中间，并且我们可以设置权重调整焦点的偏移。<br><a href="https://imgchr.com/i/PBNZct" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBNZct.png" alt="PBNZct.png"></a></p><hr><h5 id="Cinemachine和Timeline"><a href="#Cinemachine和Timeline" class="headerlink" title="Cinemachine和Timeline"></a>Cinemachine和Timeline</h5><p>Cinemachine提供了Timeline轨道，因此我们可以用Timeline管理场景中的虚拟相机，让虚拟相机更精确的在时间轴上面进行动画的播放以及镜头的混合。<br><a href="https://imgchr.com/i/PBNejP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBNejP.png" alt="PBNejP.png"></a></p><hr><h5 id="详细的API可以在CinemachinePakge中查看API手册"><a href="#详细的API可以在CinemachinePakge中查看API手册" class="headerlink" title="详细的API可以在CinemachinePakge中查看API手册"></a>详细的API可以在CinemachinePakge中查看API手册</h5><ul><li>例子:用Cinemachine作一个在一定范围中跟随角色缓动;<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">using</span> Cinemachine;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置摄像机的参数与关卡地图匹配</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ResetCamera</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CinemachineVirtualCamera vCam = GameObject.Find(<span class="string">"Vcam"</span>).GetComponent&lt;CinemachineVirtualCamera&gt;();</span><br><span class="line">    vCam.m_Lens.OrthographicSize = (mapHieght + <span class="number">3</span>) / <span class="number">2</span>f;</span><br><span class="line">    CinemachineFramingTransposer ft = vCam.GetCinemachineComponent(CinemachineCore.Stage.Body) <span class="keyword">as</span> CinemachineFramingTransposer;</span><br><span class="line">    ft.m_DeadZoneHeight = (mapHieght * <span class="number">100</span>) / (<span class="number">300</span> + mapHieght * <span class="number">100</span>f);</span><br><span class="line">    ft.m_DeadZoneWidth = (mapHieght * <span class="number">100</span>) / (<span class="number">300</span> + mapHieght * <span class="number">100</span>f) / <span class="number">9</span> * <span class="number">16</span> / mapHieght;</span><br><span class="line">    GetComponent&lt;PolygonCollider2D&gt;().SetPath(<span class="number">0</span>,</span><br><span class="line">        <span class="keyword">new</span> Vector2[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Vector2(<span class="number">-2</span>f,<span class="number">-2</span>f),</span><br><span class="line">        <span class="keyword">new</span> Vector2(<span class="number">-2</span>f,mapHieght+<span class="number">1</span>f),</span><br><span class="line">        <span class="keyword">new</span> Vector2(mapWeight+<span class="number">1</span>f,mapHieght+<span class="number">1</span>f),</span><br><span class="line">            <span class="keyword">new</span> Vector2(mapWeight+<span class="number">1</span>f,<span class="number">-2</span>f)</span><br><span class="line">        &#125;);</span><br><span class="line">    Camera.main.transform.GetChild(<span class="number">0</span>).transform.localPosition = <span class="keyword">new</span> Vector3(<span class="number">0</span>, vCam.m_Lens.OrthographicSize, <span class="number">0</span>);</span><br><span class="line">    ParticleSystem.ShapeModule sm = Camera.main.transform.GetChild(<span class="number">0</span>).GetComponent&lt;ParticleSystem&gt;().shape;</span><br><span class="line">    sm.scale = <span class="keyword">new</span> Vector3(vCam.m_Lens.OrthographicSize * <span class="number">35.5</span>f / <span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ShardSDK集成</title>
      <link href="/2018/08/03/ShardSDK%E9%9B%86%E6%88%90/"/>
      <url>/2018/08/03/ShardSDK%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<h4 id="ShareSDK集成"><a href="#ShareSDK集成" class="headerlink" title="ShareSDK集成"></a>ShareSDK集成</h4><p><a href="http://www.mob.com/" target="_blank" rel="noopener">http://www.mob.com/</a></p><hr><ul><li>hareSDK是一种社会化分享组件，为iOS、Android、WP8 的APP提供社会化功能，集成了一些常用的类库和接口，缩短开发者的开发时间，还有社会化统计分析管理后台</li><li>支持包括QQ、微信、新浪微博、腾讯微博、开心网、人人网、豆瓣、网易微博、搜狐微博、facebook、twitter、google+等国内外40多家的主流社交平台，帮助开发者轻松实现社会化分享、登录、关注、获得用户资料、获取好友列表等主流的社会化功能，强大的统计分析管理后台，可以实时了解用户、信息流、回流率、传播效率等数据，有效地指导移动APP的日常运营与推广，同时为APP引入更多的社会化流量。</li></ul><h6 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h6><p><a href="http://wiki.mob.com/android-sharesdk%E5%AE%8C%E6%95%B4%E7%9A%84%E9%9B%86%E6%88%90%E6%96%87%E6%A1%A3/" target="_blank" rel="noopener">http://wiki.mob.com/android-sharesdk%E5%AE%8C%E6%95%B4%E7%9A%84%E9%9B%86%E6%88%90%E6%96%87%E6%A1%A3/</a></p><hr><h5 id="新浪微博接入"><a href="#新浪微博接入" class="headerlink" title="新浪微博接入"></a>新浪微博接入</h5><ul><li>1.进入Mob开发者后台,添加应用,添加ShaerSDK</li><li>2.进入新浪开发者平台,找到移动应用MOBILE,接入移动应用(新浪也有自己的SDK接入),<br><a href="http://open.weibo.com/wiki/%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5" target="_blank" rel="noopener">http://open.weibo.com/wiki/%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5</a> 新浪微博移动端接入指南<br><a href="https://imgchr.com/i/PBJC7Q" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBJC7Q.png" alt="PBJC7Q.png"></a><br><a href="https://imgchr.com/i/PBJikj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBJikj.png" alt="PBJikj.png"></a><br><a href="https://imgchr.com/i/PBJuBF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBJuBF.png" alt="PBJuBF.png"></a></li><li>Android_Java_Demo: 安卓开发Demo包</li><li>demokey.keystore: Share官方提供的一个测试证书文件密码12345,也可以自己生成;</li><li>ShareSDKForUnity3D: Unity-Android开发包</li><li>ShareSDKForUnity3DWithEditor: Unity-IOS开发包,在ios打包文件的时候Share会自动删除没有用到的项</li></ul><a id="more"></a><hr><p>初始化ShareSDK<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HideInInspector</span>]</span><br><span class="line"><span class="keyword">public</span> ShareSDK shareSDK;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ShareSDK类的Awake方法中已经初始化过了,此处可以省略初始化步骤</span></span><br><span class="line">    shareSDK = GetComponent&lt;ShareSDK&gt;();</span><br><span class="line">   <span class="comment">// shareSDK.InitSDK("");</span></span><br><span class="line">    UnityEngine.SceneManagement.SceneManager.LoadScene(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>工具类<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteFile</span>(<span class="params"><span class="keyword">string</span> path,<span class="keyword">string</span> name,<span class="keyword">string</span> info</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StreamWriter sw;</span><br><span class="line">    FileInfo io = <span class="keyword">new</span> FileInfo(path + <span class="string">"/"</span> + name);</span><br><span class="line">    sw = io.CreateText();</span><br><span class="line">    sw.WriteLine(info);</span><br><span class="line">    sw.Close();</span><br><span class="line">    sw.Dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ReadFile</span>(<span class="params"><span class="keyword">string</span> path,<span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StreamReader sw;</span><br><span class="line">    FileInfo io = <span class="keyword">new</span> FileInfo(path + <span class="string">"/"</span> + name);</span><br><span class="line">    sw = io.OpenText();</span><br><span class="line">    <span class="keyword">string</span> infos = sw.ReadToEnd();</span><br><span class="line">    sw.Close();</span><br><span class="line">    sw.Dispose();</span><br><span class="line">    <span class="keyword">return</span> infos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>平台登录授权操作<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> cn.sharesdk.unity3d;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoginManager</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    ShareSDK shareSDK;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        shareSDK = ShareSDKManager.instance.shareSDK;</span><br><span class="line">        <span class="comment">//指定授权结果的回调函数</span></span><br><span class="line">        shareSDK.authHandler = OnAuthResultHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSinaLoginButtonClick</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//检测指定平台是否已经授权</span></span><br><span class="line">        <span class="keyword">if</span>(shareSDK.IsAuthorized(PlatformType.SinaWeibo) )</span><br><span class="line">        &#123;</span><br><span class="line">            Utility.WriteFile(Application.persistentDataPath, <span class="string">"AuthInfo.dat"</span>, shareSDK.GetAuthInfo(PlatformType.SinaWeibo).toJson());</span><br><span class="line">           <span class="comment">// Utility.MekeToast("用户" + shareSDK.GetAuthInfo(PlatformType.SinaWeibo)["suerName"] + "登录成功");</span></span><br><span class="line">            UnityEngine.SceneManagement.SceneManager.LoadScene(<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//授权指定平台</span></span><br><span class="line">            shareSDK.Authorize(PlatformType.SinaWeibo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 指定授权结果的回调函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="reqID"&gt;</span>自动加载id<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="state"&gt;</span>授权状态<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="type"&gt;</span>授权平台<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="data"&gt;</span>返回的数据(本次授权操作用产生的数据)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnAuthResultHandler</span>(<span class="params"><span class="keyword">int</span> reqID, ResponseState state, PlatformType type, Hashtable data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state == ResponseState.Success)</span><br><span class="line">        &#123;</span><br><span class="line">            Utility.WriteFile(Application.persistentDataPath,<span class="string">"AuthResult.dat"</span>,data.toJson());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//授权成功后通过GetAuthInfo获取授权信息</span></span><br><span class="line">            shareSDK.GetAuthInfo(type);</span><br><span class="line"></span><br><span class="line">            Utility.WriteFile(Application.persistentDataPath, <span class="string">"AuthInfo.dat"</span>, shareSDK.GetAuthInfo(PlatformType.SinaWeibo).toJson());</span><br><span class="line">           <span class="comment">// Utility.MekeToast("用户"+shareSDK.GetAuthInfo(PlatformType.SinaWeibo)["suerName"]+"登录成功");</span></span><br><span class="line">            UnityEngine.SceneManagement.SceneManager.LoadScene(<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state == ResponseState.Fail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//授权信息失败时清空指定平台的授权信息</span></span><br><span class="line">            shareSDK.CancelAuthorize(type);</span><br><span class="line">           <span class="comment">// Utility.MekeToast("登录失败");</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state == ResponseState.Cancel)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//授权取消是清空指定平台的授权信息</span></span><br><span class="line">            shareSDK.CancelAuthorize(type);</span><br><span class="line">           <span class="comment">// Utility.MekeToast("登录取消");</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取用户信息<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> cn.sharesdk.unity3d;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Info</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Text userName;</span><br><span class="line">    <span class="keyword">public</span> Text userId;</span><br><span class="line">    <span class="keyword">public</span> Image userIcon;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ShareSDK shareSDK;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        shareSDK = ShareSDKManager.instance.shareSDK;</span><br><span class="line">        <span class="comment">//从实现保存的dat文件中读取用户信息</span></span><br><span class="line">        Hashtable hash = Utility.ReadFile(Application.persistentDataPath, <span class="string">"AuthInfo.dat"</span>).hashtableFromJson();</span><br><span class="line">        userName.text = hash[<span class="string">"userName"</span>].ToString();</span><br><span class="line">        userId.text = hash[<span class="string">"userID"</span>].ToString();</span><br><span class="line">        StartCoroutine(LoadUserIcon(hash[<span class="string">"userIcon"</span>].ToString()));</span><br><span class="line"></span><br><span class="line">        shareSDK.showUserHandler = OnGetUserInfoResouleHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">IEnumerator <span class="title">LoadUserIcon</span>(<span class="params"><span class="keyword">string</span> url</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(url);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line">        <span class="keyword">if</span>(www.isDone&amp;&amp; www.error==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Texture2D texture2d = www.texture;</span><br><span class="line">            userIcon.sprite = Sprite.Create(texture2d, <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, texture2d.width, texture2d.height), Vector2.zero);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSingleOutButtonClick</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        shareSDK.CancelAuthorize(PlatformType.SinaWeibo);</span><br><span class="line">        UnityEngine.SceneManagement.SceneManager.LoadScene(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDetailButtonClick</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        shareSDK.GetUserInfo(PlatformType.SinaWeibo);</span><br><span class="line">        UnityEngine.SceneManagement.SceneManager.LoadScene(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGetUserInfoResouleHandler</span>(<span class="params"><span class="keyword">int</span> reqID, ResponseState state, PlatformType type, Hashtable data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state == ResponseState.Success)</span><br><span class="line">        &#123;</span><br><span class="line">            Utility.WriteFile(Application.persistentDataPath, <span class="string">"userInfo.dat"</span>, data.toJson());</span><br><span class="line">            Utility.MekeToast(<span class="string">"位置:"</span> +Utility.UnicodeToString(data[<span class="string">"location"</span>].ToString()));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state == ResponseState.Cancel)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取用户详情操作取消</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state == ResponseState.Fail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取用户详情失败</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>平台分享<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> cn.sharesdk.unity3d;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayManager</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    ShareSDK shareSDK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Text text;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this for initialization</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        shareSDK = ShareSDKManager.instance.shareSDK;</span><br><span class="line">        shareSDK.getFriendsHandler = GetFriends;</span><br><span class="line">        shareSDK.shareHandler = OnShareResuleHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnFriendsButtonClick</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 通过当前登录用户指定平台获取好友列表/一页多少个/第几页</span></span><br><span class="line">        <span class="comment">//此接头弃用,目前只能获取好友总数,后面两个参数失效</span></span><br><span class="line">        shareSDK.GetFriendList(PlatformType.SinaWeibo,<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnShareButtonClick</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        Application.CaptureScreenshot(<span class="string">"Shot.png"</span>);</span><br><span class="line">        ShareContent content = <span class="keyword">new</span> ShareContent();</span><br><span class="line"></span><br><span class="line">        content.SetText(<span class="string">"66666"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分享图片</span></span><br><span class="line">        <span class="comment">//SetImagePath用于本地图片,参数为图片路径</span></span><br><span class="line">        <span class="comment">//SetImageUrl为网络图片,参数为图片网址</span></span><br><span class="line">        <span class="comment">//SetImageArray用于多图片分享,参数为图片网址的string数组.仅支持网络图片,仅支持Android</span></span><br><span class="line">        content.SetImagePath(Application.persistentDataPath+<span class="string">"/Shot.png"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        content.SetTitle(<span class="string">"标题"</span>);<span class="comment">//标题</span></span><br><span class="line">        content.SetTitleUrl(<span class="string">"www.huabandman.top"</span>);<span class="comment">//网址</span></span><br><span class="line">        content.SetSite(<span class="string">"Hus"</span>);<span class="comment">//站点</span></span><br><span class="line">        <span class="comment">//设置分享内容的主要类型</span></span><br><span class="line">        content.SetShareType(ContentType.Image);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//平台特异性分享内容设置</span></span><br><span class="line">        ShareContent sinaWeiBo = <span class="keyword">new</span> ShareContent();</span><br><span class="line">        sinaWeiBo.SetText(<span class="string">"8888"</span>+<span class="string">"\n新浪"</span>);</span><br><span class="line">        <span class="comment">//在指定平台上,使用第二个参数中的内容覆盖主内容里面的值</span></span><br><span class="line">        content.SetShareContentCustomize(PlatformType.SinaWeibo,sinaWeiBo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置不显示的平台(string数组里面填不显示的类型的枚举变量的int值)</span></span><br><span class="line">        <span class="keyword">string</span>[] platfroms = &#123; <span class="string">"5"</span>, <span class="string">"7"</span>, <span class="string">"9"</span> &#125;;</span><br><span class="line">        content.SetHidePlatforms(platfroms);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示分享框</span></span><br><span class="line">       <span class="comment">// PlatformType[] type = &#123; PlatformType.QQ, PlatformType.SinaWeibo, PlatformType.WeChat &#125;;</span></span><br><span class="line">        <span class="comment">//显示分享框,指定显示平台的方法已经弃用,第一个参数传null即可</span></span><br><span class="line">        shareSDK.ShowPlatformList(<span class="literal">null</span>,content,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSingleOutButtonClick</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        shareSDK.CancelAuthorize(PlatformType.SinaWeibo);</span><br><span class="line">        UnityEngine.SceneManagement.SceneManager.LoadScene(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetFriends</span>(<span class="params"><span class="keyword">int</span> reqID, ResponseState state, PlatformType type, Hashtable data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state == ResponseState.Fail)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state == ResponseState.Success)</span><br><span class="line">        &#123;</span><br><span class="line">            Utility.WriteFile(Application.persistentDataPath,<span class="string">"FriendsList.dat"</span>,data.toJson());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state == ResponseState.Cancel)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnShareResuleHandler</span>(<span class="params"><span class="keyword">int</span> reqID, ResponseState state, PlatformType type, Hashtable data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//并非所以平台都会报告正确的状态</span></span><br><span class="line">        <span class="keyword">if</span> (state == ResponseState.Success)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == ResponseState.Cancel)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取用户详情操作取消</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == ResponseState.Fail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取用户详情失败</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>背包系统之显示物品简介</title>
      <link href="/2018/08/03/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%B9%8B%E6%98%BE%E7%A4%BA%E7%89%A9%E5%93%81%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/08/03/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%B9%8B%E6%98%BE%E7%A4%BA%E7%89%A9%E5%93%81%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h4 id="UGUI显示物品简介信息"><a href="#UGUI显示物品简介信息" class="headerlink" title="UGUI显示物品简介信息"></a>UGUI显示物品简介信息</h4><p>游戏中背包系统中常见的功能,当鼠标移动到某个物品上时,就会显示物品的信息简介</p><p><font size="4" color="#E15869">(同常情况下物品的功能不一样,简介也长短不同,所以如果先创建一个Image,再在Image下面创建一个Text组件的话,这样Image不会跟随格式字体长短,多少进行变大变小,会影响有些信息多,或者信息过长的物品的简介的显示)</font></p><ul><li>1.先创建一个Text组件,然后在Text组件上添加Comtent Size Fitter组件,设置Horizontal Fit和Vertical Fit;</li><li>2.然后创建一个背景Image,置于Text组件下,作为Text组件的子物体,设置Image的锚点对其Text锚点;</li><li>3.赋值Text一份,(注意赋值的Text上也要Comtent Size Fitter组件),置于Text组件下作为子物体<br>第一个Text组件负责根据字体大小,文字多少去调整Image的大小,第二个Text组件才是负责显示信息</li><li>4.设置父物体Text组件的中心点,也就是当鼠标移动上去,会在鼠标的哪个地方显示,这个根据自己的需求调整即可;</li><li>5.给父类Text添加一个CanvasGroup组件控制显示隐藏,也可以用其他方法</li></ul><hr><h4 id="简介信息面板的显示的隐藏"><a href="#简介信息面板的显示的隐藏" class="headerlink" title="简介信息面板的显示的隐藏"></a>简介信息面板的显示的隐藏</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//鼠标进入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerEnter</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(transform.childCount&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> toolTipText = transform.GetChild(<span class="number">0</span>).GetComponent&lt;ItemUI&gt;().item.GetToolTipText();</span><br><span class="line">        InventoryManager.instance.ShowToolTip(toolTipText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//鼠标退出</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerExit</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (transform.childCount &gt; <span class="number">0</span>)</span><br><span class="line">        InventoryManager.instance.HidToolTip();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Text toolTopText;</span><br><span class="line">   <span class="keyword">private</span> Text contentText;</span><br><span class="line">   <span class="keyword">private</span> CanvasGroup canvasGroup;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">float</span> targetAlpha = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">float</span> soomthing = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       toolTopText = GetComponent&lt;Text&gt;();</span><br><span class="line">       contentText = transform.Find(<span class="string">"ContentText"</span>).GetComponent&lt;Text&gt;();</span><br><span class="line">       canvasGroup = GetComponent&lt;CanvasGroup&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(canvasGroup.alpha != targetAlpha)</span><br><span class="line">       &#123;</span><br><span class="line">           canvasGroup.alpha = Mathf.Lerp(canvasGroup.alpha, targetAlpha, soomthing * Time.deltaTime);</span><br><span class="line">           <span class="keyword">if</span>(Mathf.Abs(canvasGroup.alpha-targetAlpha)&lt;<span class="number">0.05</span>f)</span><br><span class="line">           &#123;</span><br><span class="line">               canvasGroup.alpha = targetAlpha;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"><span class="keyword">string</span> text</span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       toolTopText.text = text;</span><br><span class="line">       contentText.text = text;</span><br><span class="line">       targetAlpha = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Hid</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       targetAlpha = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><hr><p>简介面板跟随鼠标移动<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给toolTip设置位置信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetLocalPosition</span>(<span class="params">Vector3 pos</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    transform.localPosition = pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果提示面板是在显示状态,就让它跟随鼠标</span></span><br><span class="line">    <span class="keyword">if</span>(toolTipIsShow)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector2 position;</span><br><span class="line">        <span class="comment">//设置输入的点在画布上的位置</span></span><br><span class="line">        RectTransformUtility.ScreenPointToLocalPointInRectangle(canvas.transform <span class="keyword">as</span> RectTransform,Input.mousePosition,<span class="literal">null</span>,<span class="keyword">out</span> position);</span><br><span class="line">        toolTip.SetLocalPosition(position);<span class="comment">//把转化的位置传递给toolTip</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id=""><a href="#" class="headerlink" title=""></a><a href="https://imgchr.com/i/PBMmIx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBMmIx.png" alt="PBMmIx.png"></a></h2><h4 id="富文本显示物品简介面板"><a href="#富文本显示物品简介面板" class="headerlink" title="富文本显示物品简介面板:"></a>富文本显示物品简介面板:</h4><p><font color="#1E90FF" size="4">在父类中写一个获取物品提示信息的虚函数,在由各个类型物品的子类去重写这个函数</font><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 得到提示面板应该显示什么内容</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The tool tip text.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">GetToolTipText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> color = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (quality)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> Quality.Artifact:</span><br><span class="line">            color = <span class="string">"red"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Quality.Common:</span><br><span class="line">            color = <span class="string">"white"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Quality.Epic:</span><br><span class="line">            color = <span class="string">"magenta"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Quality.Legendary:</span><br><span class="line">            color = <span class="string">"oriange"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Quality.Rare:</span><br><span class="line">            color = <span class="string">"navy"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Quality.Uncommon:</span><br><span class="line">            color = <span class="string">"lime"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串格式输出(带富文本类型)</span></span><br><span class="line">    <span class="keyword">string</span> text = <span class="keyword">string</span>.Format(<span class="string">"&lt;color=&#123;4&#125;&gt;&#123;0&#125;&lt;/color&gt;\n&lt;size=17&gt;购买价格:&#123;1&#125;    出售价格:&#123;2&#125;&lt;/size&gt;\n&lt;color=yellow&gt;&#123;3&#125;&lt;/color&gt;"</span>,</span><br><span class="line">                                Name, BuyPrice, SellPrice, Desctiption, color);</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://imgchr.com/i/PBMKJK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBMKJK.png" alt="PBMKJK.png"></a></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
          <category> UGUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>获取App Store引用下载地址</title>
      <link href="/2018/08/03/%E8%8E%B7%E5%8F%96AppStore%E5%BC%95%E7%94%A8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/"/>
      <url>/2018/08/03/%E8%8E%B7%E5%8F%96AppStore%E5%BC%95%E7%94%A8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<font size="5">一般苹果的下载地址都是: <a href="https://itunes.apple.com/cn/app/id1253355672?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/id1253355672?mt=8</a></font><p><strong>如果你的应用上传了AppStore那么就会分配一个id,替换上面的链接的 IDxxxxxxxxx?mt=8<br> 中的 xxxxxxx 就是AppId号</strong>s</p>]]></content>
      
      <categories>
          
          <category> IOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FSM有限状态机</title>
      <link href="/2018/08/03/FSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
      <url>/2018/08/03/FSM%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/</url>
      <content type="html"><![CDATA[<h4 id="FSM有限状态机"><a href="#FSM有限状态机" class="headerlink" title="FSM有限状态机"></a>FSM有限状态机</h4><hr><h5 id="有限状态机基类"><a href="#有限状态机基类" class="headerlink" title="有限状态机基类"></a>有限状态机基类</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 状态机基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">FSMState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> StateID stateId;</span><br><span class="line">    <span class="keyword">public</span> StateID ID&#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> stateId; &#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> FSMSystem fsm;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Dictionary&lt;Transtion, StateID&gt; map = <span class="keyword">new</span> Dictionary&lt;Transtion, StateID&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FSMState</span>(<span class="params">FSMSystem fsm</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fsm = fsm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 添加状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="trans"&gt;</span>状态转换<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>状态id<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddTransition</span>(<span class="params">Transtion trans,StateID id</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(trans == Transtion.NullTransition)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"不允许NullTransition"</span>); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(id == StateID.NullStateID)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"不允许NullId"</span>);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(map.ContainsKey(trans))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"Transition:"</span>+trans+<span class="string">"已经存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.Add(trans,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除转换条件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="trans"&gt;</span>Trans.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeletedTransition</span>(<span class="params">Transtion trans</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(trans == Transtion.NullTransition)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"不允许NullTransition"</span>); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!map.ContainsKey(trans))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"Transition:"</span>+trans+<span class="string">"不存在在当前Map中"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.Remove(trans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根据状态查看触发了那个状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回触发的状态<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="trans"&gt;</span>Trans.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StateID <span class="title">GetOutPutState</span>(<span class="params">Transtion trans</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.ContainsKey(trans))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> map[trans];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> StateID.NullStateID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 进入状态之前要做的事情</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoBeforeEntering</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 离开状态的时候需要做的事情</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoAfterLeving</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 子类必须重写的行为</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Act</span>(<span class="params">GameObject npc</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 判断转换条件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Reason</span>(<span class="params">GameObject npc</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 状态转换条件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Transtion</span><br><span class="line">&#123;</span><br><span class="line">    NullTransition,<span class="comment">//空的转换条件</span></span><br><span class="line">    SeePlayer,</span><br><span class="line">    LostPlayer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 状态ID</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> StateID</span><br><span class="line">&#123;</span><br><span class="line">    NullStateID,</span><br><span class="line">    Patrol,</span><br><span class="line">    Chase</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="有限状态机管理类"><a href="#有限状态机管理类" class="headerlink" title="有限状态机管理类"></a>有限状态机管理类</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 状态机管理类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FSMSystem</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;StateID, FSMState&gt; state = <span class="keyword">new</span> Dictionary&lt;StateID, FSMState&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StateID currentStateId;</span><br><span class="line">    <span class="keyword">private</span> FSMState currentState;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 添加状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="s"&gt;</span>S.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddState</span>(<span class="params">FSMState s</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s== <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"FSMState不能为空"</span>);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(currentState == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            currentState = s;</span><br><span class="line">            currentStateId = s.ID;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(state.ContainsKey(s.ID))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"状态:"</span>+s.ID+<span class="string">"已经存在,不能重复添加"</span>);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        state.Add(s.ID,s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>Identifier.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeteletedState</span>(<span class="params">StateID id</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id == StateID.NullStateID)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"无法删除空状态"</span>);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(state.ContainsKey(id))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"无法删除空的状态"</span>+id);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        state.Remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 状态切换</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="trans"&gt;</span>切换状态的条件.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PerformTransition</span>(<span class="params">Transtion trans</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(trans == Transtion.NullTransition)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"无法执行空的转换条件"</span>);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       StateID id = currentState.GetOutPutState(trans);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(id == StateID.NullStateID)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogWarning(<span class="string">"当前状态"</span>+currentStateId+<span class="string">"无法根据转换条件"</span>+trans+<span class="string">"发生转换"</span>);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(state.ContainsKey(id) == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"在状态机不存在状态"</span>+id+<span class="string">"无法转换"</span>);<span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FSMState fsmState = state[id];</span><br><span class="line">        currentState.DoBeforeEntering();</span><br><span class="line">        currentState = fsmState;</span><br><span class="line">        currentStateId = fsmState.ID;</span><br><span class="line">        currentState.DoBeforeEntering();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 更新状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The update.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="npc"&gt;</span>Npc.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params">GameObject npc</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        currentState.Act(npc);</span><br><span class="line">        currentState.Reason(npc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> FSM有限状态机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Uniyt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人工智能编程</title>
      <link href="/2018/08/03/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/08/03/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="群组行为"><a href="#群组行为" class="headerlink" title="群组行为"></a>群组行为</h4><p> 博客:<a href="http://www.red3d.com/cwr/boids/" target="_blank" rel="noopener">http://www.red3d.com/cwr/boids/</a></p><h5 id="群组的三种行为"><a href="#群组的三种行为" class="headerlink" title="群组的三种行为"></a>群组的三种行为</h5><h6 id="分离"><a href="#分离" class="headerlink" title="分离"></a>分离</h6><p>计算出某些个物体的中心点然后给出相反的方向<br><a href="https://imgchr.com/i/PBMCGT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBMCGT.png" alt="PBMCGT.png"></a></p><h6 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h6><p>计算出物体的平均方向<br><a href="https://imgchr.com/i/PBMPRU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBMPRU.png" alt="PBMPRU.png"></a></p><h6 id="聚集"><a href="#聚集" class="headerlink" title="聚集"></a>聚集</h6><p>计算出物体的中心点,然后向中心店移动<br><a href="https://imgchr.com/i/PBMizF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/08/03/PBMizF.png" alt="PBMizF.png"></a></p><h4 id="感知系统"><a href="#感知系统" class="headerlink" title="感知系统"></a>感知系统</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solider</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//视野距离</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> viewDistance = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//视野角度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> viewAngle = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">private</span> Transform playerTransfrom;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        playerTransfrom = GameObject.Find(<span class="string">"Player"</span>).transform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//判断视野距离(是否在视线范围内)</span></span><br><span class="line"><span class="keyword">if</span>(Vector3.Distance(playerTransfrom.position,transform.position)&lt;= viewDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取player的方位向量</span></span><br><span class="line">            Vector3 playerDir = playerTransfrom.position - transform.position;</span><br><span class="line">           <span class="keyword">float</span> angle = Vector3.Angle(playerDir,transform.forward);</span><br><span class="line">            <span class="comment">//是否在视野角度范围内</span></span><br><span class="line">            <span class="keyword">if</span>(angle&lt;=viewAngle/<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                print(<span class="string">"Look the player"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>渲染与光照</title>
      <link href="/2018/08/03/%E6%B8%B2%E6%9F%93%E4%B8%8E%E5%85%89%E7%85%A7/"/>
      <url>/2018/08/03/%E6%B8%B2%E6%9F%93%E4%B8%8E%E5%85%89%E7%85%A7/</url>
      <content type="html"><![CDATA[<h4 id="渲染与光照"><a href="#渲染与光照" class="headerlink" title="渲染与光照"></a>渲染与光照</h4><hr><ul><li><p>环境光对材质的影响<br>Environment Reflections: Resoulution的位数大小影响材质反射环境的清晰度,位数越高,反射环境越清晰,但是消耗性能越大</p></li><li><p>如果在烘焙灯光时出现的灯光UV不匹配错误时:选中模型/勾上Generate LightMap</p></li><li><p>建议在PlayerSetting中Other Setting/Color Space中选择线性光照,线性光照光感会更好,如果在运行平台不支持的时候选择Gamma</p></li></ul><h5 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h5><ul><li><p>如果场景中物体没有产生阴影的时候:</p><ul><li><p>Project Setting/QualitySetting/Shadows;是不是选择了Display Shadow</p></li><li><p>查看模型MeshRender/Cast shadow是否选择on</p></li><li><p>shader是否是透明材质</p></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>扩展方法</title>
      <link href="/2018/08/03/%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/03/%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h4><hr><ul><li><p>我们在做项目的时候有些时候会遇到这种情况，使用别人封装的方法，但是又觉得方法没有自己所需求的，或者不是自己想要得，还有一种情况就是当你去接收别人的项目的时候，需要做修改而不能变动以前代码的时候，可能就需要用到扩展方法，这样既不会改变别人写的代码，又可以加上自己的修改，并为同一实例调用，是一种好用的方;</p></li><li><p>不过需要注意几点:</p><ul><li><p>类必须是static的,静态类,但是不能继承MonoBehaviour类,静态类不能拓展MonoBehaviour类。</p></li><li><p>静态类中的方法同样需要是static的;</p></li><li><p>拓展方法只能在实例中被调用，而不能在类本身内部使用。</p></li><li><p>传入的参数需要this修饰符,如: public static void SetPosition(this Transfrom trans);</p></li><li><p>如果写的扩展方法在一个命名空间中,在别的类中使用,需要引用命名空间</p></li></ul></li></ul><p>拓展方法的定义代码:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Extends</span> &#123;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//注意命名空间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">extendTransform</span> &#123;　　　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//静态类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetPositionX</span>(<span class="params"><span class="keyword">this</span> Transform trans, <span class="keyword">float</span> x</span>) </span>&#123;　　　　　　　<span class="comment">//静态方法，注意this的位置</span></span><br><span class="line">            trans.position = <span class="keyword">new</span> Vector3(x, trans.position.y, trans.position.z);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HaveZero</span>(<span class="params"><span class="keyword">this</span> Transform trans</span>) </span>&#123;　　　　　　　　　　　　　　　<span class="comment">//可以有返回值</span></span><br><span class="line">            <span class="keyword">return</span> (trans.position==<span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));<span class="number">10</span>         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>调用扩展方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> Extends;　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//引入拓展方法命名空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject obj;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Debug.Log(obj.transform.position);</span><br><span class="line">        obj.transform.SetPositionX(<span class="number">10</span>);　　　　　　　　<span class="comment">//直接调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!--more--><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;  </span><br><span class="line"><span class="keyword">using</span> System.Collections;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Extensions</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetPositionX</span>(<span class="params"><span class="keyword">this</span> Transform t, <span class="keyword">float</span> newX</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        t.position = <span class="keyword">new</span> Vector3(newX, t.position.y, t.position.z);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetPositionY</span>(<span class="params"><span class="keyword">this</span> Transform t, <span class="keyword">float</span> newY</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        t.position = <span class="keyword">new</span> Vector3(t.position.x, newY, t.position.z);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetPositionZ</span>(<span class="params"><span class="keyword">this</span> Transform t, <span class="keyword">float</span> newZ</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        t.position = <span class="keyword">new</span> Vector3(t.position.x, t.position.y, newZ);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetPositionX</span>(<span class="params"><span class="keyword">this</span> Transform t</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> t.position.x;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetPositionY</span>(<span class="params"><span class="keyword">this</span> Transform t</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> t.position.y;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetPositionZ</span>(<span class="params"><span class="keyword">this</span> Transform t</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> t.position.z;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HasRigidbody</span>(<span class="params"><span class="keyword">this</span> GameObject gobj</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (gobj.rigidbody != <span class="literal">null</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HasAnimation</span>(<span class="params"><span class="keyword">this</span> GameObject gobj</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (gobj.animation != <span class="literal">null</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetSpeed</span>(<span class="params"><span class="keyword">this</span> Animation anim, <span class="keyword">float</span> newSpeed</span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        anim[anim.clip.name].speed = newSpeed;   </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用扩展方法<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;  </span><br><span class="line"><span class="keyword">using</span> System.Collections;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">MonoBehaviour</span>   </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>)   </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">float</span> currentX = transform.GetPositionX();  </span><br><span class="line">        transform.SetPositionX(currentX + <span class="number">5</span>f);    </span><br><span class="line">        <span class="keyword">if</span>(gameObject.HasRigidbody())  </span><br><span class="line">        &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(gameObject.HasAnimation())  </span><br><span class="line">        &#123;  </span><br><span class="line">            gameObject.animation.SetSpeed(<span class="number">2</span>f);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unity优化之GC——合理优化Unity的GC</title>
      <link href="/2018/08/03/Unity%E4%BC%98%E5%8C%96%E4%B9%8BGC%E2%80%94%E2%80%94%E5%90%88%E7%90%86%E4%BC%98%E5%8C%96Unity%E7%9A%84GC/"/>
      <url>/2018/08/03/Unity%E4%BC%98%E5%8C%96%E4%B9%8BGC%E2%80%94%E2%80%94%E5%90%88%E7%90%86%E4%BC%98%E5%8C%96Unity%E7%9A%84GC/</url>
      <content type="html"><![CDATA[<h4 id="Unity优化之GC——合理优化Unity的GC"><a href="#Unity优化之GC——合理优化Unity的GC" class="headerlink" title="Unity优化之GC——合理优化Unity的GC"></a>Unity优化之GC——合理优化Unity的GC</h4><p>转载:<a href="http://www.cnblogs.com/zblade/" target="_blank" rel="noopener">http://www.cnblogs.com/zblade/</a></p><hr><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><p>　　在游戏运行的时候，数据主要存储在内存中，当游戏的数据在不需要的时候，存储当前数据的内存就可以被回收以再次使用。内存垃圾是指当前废弃数据所占用的内存，垃圾回收（GC）是指将废弃的内存重新回收再次使用的过程。</p><p>　　Unity中将垃圾回收当作内存管理的一部分，如果游戏中废弃数据占用内存较大，则游戏的性能会受到极大影响，此时垃圾回收会成为游戏性能的一大障碍点。</p><p>　　本文我们主要学习垃圾回收的机制，垃圾回收如何被触发以及如何提GC收效率来提高游戏的性能。</p><h5 id="Unity内存管理机制简介"><a href="#Unity内存管理机制简介" class="headerlink" title="Unity内存管理机制简介"></a>Unity内存管理机制简介</h5><p>　　要想了解垃圾回收如何工作以及何时被触发，我们首先需要了解unity的内存管理机制。Unity主要采用自动内存管理的机制，开发时在代码中不需要详细地告诉unity如何进行内存管理，unity内部自身会进行内存管理。这和使用C++开发需要随时管理内存相比，有一定的优势，当然带来的劣势就是需要随时关注内存的增长，不要让游戏在手机上跑“飞”了。</p><ul><li>unity的自动内存管理可以理解为以下几个部分：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1）unity内部有两个内存管理池：堆内存和堆栈内存。堆栈内存(stack)主要用来存储较小的和短暂的数据，堆内存(heap)主要用来存储较大的和存储时间较长的数据。  </span><br><span class="line"></span><br><span class="line">2）unity中的变量只会在堆栈或者堆内存上进行内存分配，变量要么存储在堆栈内存上，要么处于堆内存上。  </span><br><span class="line"></span><br><span class="line">3）只要变量处于激活状态，则其占用的内存会被标记为使用状态，则该部分的内存处于被分配的状态。  </span><br><span class="line"></span><br><span class="line">4）一旦变量不再激活，则其所占用的内存不再需要，该部分内存可以被回收到内存池中被再次使用，这样的操作就是内存回收。处于堆栈上的内存回收及其快速，处于堆上的内存并不是及时回收的，此时其对应的内存依然会被标记为使用状态。  </span><br><span class="line"></span><br><span class="line">5) 垃圾回收主要是指堆上的内存分配和回收，unity中会定时对堆内存进行GC操作。</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p>在了解了GC的过程后，下面详细了解堆内存和堆栈内存的分配和回收机制的差别。</p><hr><!--more--><h6 id="堆栈内存分配和回收机制"><a href="#堆栈内存分配和回收机制" class="headerlink" title="堆栈内存分配和回收机制"></a>堆栈内存分配和回收机制</h6><p>　　堆栈上的内存分配和回收十分快捷简单，因为堆栈上只会存储短暂的或者较小的变量。内存分配和回收都会以一种顺序和大小可控制的形式进行。</p><h6 id="堆栈的运行方式就像stack-其本质只是一个数据的集合，数据的进出都以一种固定的方式运行。正是这种简洁性和固定性使得堆栈的操作十分快捷。当数据被存储在堆栈上的时候，只需要简单地在其后进行扩展。当数据失效的时候，只需要将其从堆栈上移除。"><a href="#堆栈的运行方式就像stack-其本质只是一个数据的集合，数据的进出都以一种固定的方式运行。正是这种简洁性和固定性使得堆栈的操作十分快捷。当数据被存储在堆栈上的时候，只需要简单地在其后进行扩展。当数据失效的时候，只需要将其从堆栈上移除。" class="headerlink" title="堆栈的运行方式就像stack: 其本质只是一个数据的集合，数据的进出都以一种固定的方式运行。正是这种简洁性和固定性使得堆栈的操作十分快捷。当数据被存储在堆栈上的时候，只需要简单地在其后进行扩展。当数据失效的时候，只需要将其从堆栈上移除。"></a>堆栈的运行方式就像stack: 其本质只是一个数据的集合，数据的进出都以一种固定的方式运行。正是这种简洁性和固定性使得堆栈的操作十分快捷。当数据被存储在堆栈上的时候，只需要简单地在其后进行扩展。当数据失效的时候，只需要将其从堆栈上移除。</h6><h6 id="堆内存分配和回收机制"><a href="#堆内存分配和回收机制" class="headerlink" title="堆内存分配和回收机制"></a>堆内存分配和回收机制</h6><p>　　堆内存上的内存分配和存储相对而言更加复杂，主要是堆内存上可以存储短期较小的数据，也可以存储各种类型和大小的数据。其上的内存分配和回收顺序并不可控，可能会要求分配不同大小的内存单元来存储数据。</p><ul><li>堆上的变量在存储的时候，主要分为以下几步：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）首先，unity检测是否有足够的闲置内存单元用来存储数据，如果有，则分配对应大小的内存单元;  </span><br><span class="line">2）如果没有足够的存储单元，unity会触发垃圾回收来释放不再被使用的堆内存。这步操作是一步缓慢的操作，如果垃圾回收后有足够大小的内存单元，则进行内存分配。  </span><br><span class="line">3）如果垃圾回收后并没有足够的内存单元，则unity会扩展堆内存的大小，这步操作会很缓慢，然后分配对应大小的内存单元给变量。</span><br></pre></td></tr></table></figure></li></ul><p>　　堆内存的分配有可能会变得十分缓慢，特别是在需要垃圾回收和堆内存需要扩展的情况下，通常需要减少这样的操作次数。</p><h6 id="垃圾回收时的操作"><a href="#垃圾回收时的操作" class="headerlink" title="垃圾回收时的操作"></a>垃圾回收时的操作</h6><p>　　当堆内存上一个变量不再处于激活状态的时候，其所占用的内存并不会立刻被回收，不再使用的内存只会在GC的时候才会被回收。</p><ul><li>每次运行GC的时候，主要进行下面的操作：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）GC会检查堆内存上的每个存储变量;  </span><br><span class="line">2）对每个变量会检测其引用是否处于激活状态；  </span><br><span class="line">3）如果变量的引用不再处于激活状态，则会被标记为可回收；  </span><br><span class="line">4）被标记的变量会被移除，其所占有的内存会被回收到堆内存上。</span><br></pre></td></tr></table></figure></li></ul><p>GC操作是一个极其耗费的操作，堆内存上的变量或者引用越多则其运行的操作会更多，耗费的时间越长。</p><h6 id="何时会触发垃圾回收"><a href="#何时会触发垃圾回收" class="headerlink" title="何时会触发垃圾回收"></a>何时会触发垃圾回收</h6><ul><li>主要有三个操作会触发垃圾回收：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1） 在堆内存上进行内存分配操作而内存不够的时候都会触发垃圾回收来利用闲置的内存；</span><br><span class="line">2） GC会自动的触发，不同平台运行频率不一样；</span><br><span class="line">3） GC可以被强制执行。</span><br></pre></td></tr></table></figure></li></ul><p>特别是在堆内存上进行内存分配时内存单元不足够的时候，GC会被频繁触发，这就意味着频繁在堆内存上进行内存分配和回收会触发频繁的GC操作。</p><hr><h5 id="GC操作带来的问题"><a href="#GC操作带来的问题" class="headerlink" title="GC操作带来的问题"></a>GC操作带来的问题</h5><p>在了解GC在unity内存管理中的作用后，我们需要考虑其带来的问题。最明显的问题是GC操作会需要大量的时间来运行，如果堆内存上有大量的变量或者引用需要检查，则检查的操作会十分缓慢，这就会使得游戏运行缓慢。其次GC可能会在关键时候运行，例如在CPU处于游戏的性能运行关键时刻，此时任何一个额外的操作都可能会带来极大的影响，使得游戏帧率下降。</p><p>　　另外一个GC带来的问题是堆内存的碎片划。当一个内存单元从堆内存上分配出来，其大小取决于其存储的变量的大小。当该内存被回收到堆内存上的时候，有可能使得堆内存被分割成碎片化的单元。也就是说堆内存总体可以使用的内存单元较大，但是单独的内存单元较小，在下次内存分配的时候不能找到合适大小的存储单元，这也会触发GC操作或者堆内存扩展操作。</p><p>　　堆内存碎片会造成两个结果，一个是游戏占用的内存会越来越大，一个是GC会更加频繁地被触发。</p><hr><h5 id="分析GC带来的问题"><a href="#分析GC带来的问题" class="headerlink" title="分析GC带来的问题"></a>分析GC带来的问题</h5><p>GC操作带来的问题主要表现为帧率运行低，性能间歇中断或者降低。如果游戏有这样的表现，则首先需要打开unity中的profiler window来确定是否是GC造成。</p><p>　　了解如何运用profiler window，可以参考此处，如果游戏确实是由GC造成的，可以继续阅读下面的内容。</p><p>分析堆内存的分配<br>　　如果GC造成游戏的性能问题，我们需要知道游戏中的哪部分代码会造成GC，内存垃圾在变量不再激活的时候产生，所以首先我们需要知道堆内存上分配的是什么变量。</p><h6 id="分析堆内存的分配"><a href="#分析堆内存的分配" class="headerlink" title="分析堆内存的分配"></a>分析堆内存的分配</h6><p>如果GC造成游戏的性能问题，我们需要知道游戏中的哪部分代码会造成GC，内存垃圾在变量不再激活的时候产生，所以首先我们需要知道堆内存上分配的是什么变量。</p><h6 id="堆内存和堆栈内存分配的变量类型"><a href="#堆内存和堆栈内存分配的变量类型" class="headerlink" title="堆内存和堆栈内存分配的变量类型"></a>堆内存和堆栈内存分配的变量类型</h6><p>　　在Unity中，值类型变量都在堆栈上进行内存分配，其他类型的变量都在堆内存上分配。如果你不知道值类型和引用类型的差别，可以查看此处。</p><p>　　下面的代码可以用来理解值类型的分配和释放,其对应的变量在函数调用完后会立即回收：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExampleFunciton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> localInt = <span class="number">5</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对应的引用类型的参考代码如下，其对应的变量在GC的时候才回收：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExampleFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  List localList = <span class="keyword">new</span> List();      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="利用profiler-window-来检测堆内存分配："><a href="#利用profiler-window-来检测堆内存分配：" class="headerlink" title="利用profiler window 来检测堆内存分配："></a>利用profiler window 来检测堆内存分配：</h6><p>　　我们可以在profier window中检查堆内存的分配操作：在CPU usage分析窗口中，我们可以检测任何一帧cpu的内存分配情况。其中一个选项是GC Alloc，通过分析其来定位是什么函数造成大量的堆内存分配操作。一旦定位该函数，我们就可以分析解决其造成问题的原因从而减少内存垃圾的产生。现在Unity5.5的版本，还提供了deep profiler的方式深度分析GC垃圾的产生。</p><hr><h5 id="降低GC的影响的方法"><a href="#降低GC的影响的方法" class="headerlink" title="降低GC的影响的方法"></a>降低GC的影响的方法</h5><ul><li><p>大体上来说，我们可以通过三种方法来降低GC的影响：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）减少GC的运行次数；</span><br><span class="line"></span><br><span class="line">　2）减少单次GC的运行时间；</span><br><span class="line"></span><br><span class="line">　3）将GC的运行时间延迟，避免在关键时候触发，比如可以在场景加载的时候调用GC</span><br></pre></td></tr></table></figure></li><li><p>似乎看起来很简单，基于此，我们可以采用三种策略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）对游戏进行重构，减少堆内存的分配和引用的分配。更少的变量和引用会减少GC操作中的检测个数从而提高GC的运行效率。</span><br><span class="line"></span><br><span class="line">2）降低堆内存分配和回收的频率，尤其是在关键时刻。也就是说更少的事件触发GC操作，同时也降低堆内存的碎片化。</span><br><span class="line"></span><br><span class="line">3）我们可以试着测量GC和堆内存扩展的时间，使其按照可预测的顺序执行。当然这样操作的难度极大，但是这会大大降低GC的影响。</span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="减少内存垃圾的数量"><a href="#减少内存垃圾的数量" class="headerlink" title="减少内存垃圾的数量"></a>减少内存垃圾的数量</h5><p>　　减少内存垃圾主要可以通过一些方法来减少：</p><p>缓存<br>　　如果在代码中反复调用某些造成堆内存分配的函数但是其返回结果并没有使用，这就会造成不必要的内存垃圾，我们可以缓存这些变量来重复利用，这就是缓存。</p><p>　　 例如下面的代码每次调用的时候就会造成堆内存分配，主要是每次都会分配一个新的数组：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     Renderer[] allRenderers = FindObjectsOfType&lt;Renderer&gt;();</span><br><span class="line">     ExampleFunction(allRenderers);      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对比下面的代码，只会生产一个数组用来缓存数据，实现反复利用而不需要造成更多的内存垃圾：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Renderer[] allRenderers;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   allRenderers = FindObjectsOfType&lt;Renderer&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ExampleFunction(allRenderers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h5 id="不要在频繁调用的函数中反复进行堆内存分配"><a href="#不要在频繁调用的函数中反复进行堆内存分配" class="headerlink" title="不要在频繁调用的函数中反复进行堆内存分配"></a>不要在频繁调用的函数中反复进行堆内存分配</h5><p>　　在MonoBehaviour中，如果我们需要进行堆内存分配，最坏的情况就是在其反复调用的函数中进行堆内存分配，例如Update()和LateUpdate()函数这种每帧都调用的函数，这会造成大量的内存垃圾。我们可以考虑在Start()或者Awake()函数中进行内存分配，这样可以减少内存垃圾。</p><p>　　下面的例子中，update函数会多次触发内存垃圾的产生：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ExampleGarbageGenerationFunction(transform.position.x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过一个简单的改变，我们可以确保每次在x改变的时候才触发函数调用，这样避免每帧都进行堆内存分配：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> previousTransformPositionX;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> transformPositionX = transform.position.x;</span><br><span class="line">    <span class="keyword">if</span>(transfromPositionX != previousTransformPositionX)</span><br><span class="line">    &#123;</span><br><span class="line">        ExampleGarbageGenerationFunction(transformPositionX);    </span><br><span class="line">        previousTransformPositionX = trasnformPositionX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外的一种方法是在update中采用计时器，特别是在运行有规律但是不需要每帧都运行的代码中，例如：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ExampleGarbageGeneratiingFunction()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过添加一个计时器，我们可以确保每隔1s才触发该函数一次：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> timeSinceLastCalled;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> delay = <span class="number">1</span>f;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    timSinceLastCalled += Time.deltaTime;</span><br><span class="line">    <span class="keyword">if</span>(timeSinceLastCalled &gt; delay)</span><br><span class="line">    &#123;</span><br><span class="line">         ExampleGarbageGenerationFunction();</span><br><span class="line">         timeSinceLastCalled = <span class="number">0</span>f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过这样细小的改变，我们可以使得代码运行的更快同时减少内存垃圾的产生。</p><font color="#F001" size="3">　附： 不要忽略这一个方法，在最近的项目性能优化中，我经常采用这样的方法来优化游戏的性能，很多对于固定时间的事件回调函数中，如果每次都分配新的缓存，但是在操作完后并不释放，这样就会造成大量的内存垃圾，对于这样的缓存，最好的办法就是当前周期回调后执行清除或者标志为废弃。</font><hr><h5 id="清除链表"><a href="#清除链表" class="headerlink" title="清除链表"></a>清除链表</h5><p>　　在堆内存上进行链表的分配的时候，如果该链表需要多次反复的分配，我们可以采用链表的clear函数来清空链表从而替代反复多次的创建分配链表。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List myList = <span class="keyword">new</span> List();</span><br><span class="line">    PopulateList(myList);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过改进，我们可以将该链表只在第一次创建或者该链表必须重新设置的时候才进行堆内存分配，从而大大减少内存垃圾的产生：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> List myList = <span class="keyword">new</span> List();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    myList.Clear();</span><br><span class="line">    PopulateList(myList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h5 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h5><p>　　即便我们在代码中尽可能地减少堆内存的分配行为，但是如果游戏有大量的对象需要产生和销毁依然会造成GC。对象池技术可以通过重复使用对象来降低堆内存的分配和回收频率。对象池在游戏中广泛的使用，特别是在游戏中需要频繁的创建和销毁相同的游戏对象的时候，例如枪的子弹这种会频繁生成和销毁的对象。</p><p>　　要详细的讲解对象池已经超出本文的范围，但是该技术值得我们深入的研究This tutorial on object pooling on the Unity Learn site对于对象池有详细深入的讲解。  </p><font color="#f298" size="3">附：对象池技术属于游戏中比较通用的技术，如果有闲余时间，大家可以学习一下这方面的知识。</font><hr><h5 id="造成不必要的堆内存分配的因素"><a href="#造成不必要的堆内存分配的因素" class="headerlink" title="造成不必要的堆内存分配的因素"></a>造成不必要的堆内存分配的因素</h5><p>　　我们已经知道值类型变量在堆栈上分配，其他的变量在堆内存上分配，但是任然有一些情况下的堆内存分配会让我们感到吃惊。下面让我们分析一些常见的不必要的堆内存分配行为并对其进行优化。</p><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串　　"></a>字符串　　</h6><p>　　在c#中，字符串是引用类型变量而不是值类型变量，即使看起来它是存储字符串的值的。这就意味着字符串会造成一定的内存垃圾，由于代码中经常使用字符串，所以我们需要对其格外小心。</p><p>　　c#中的字符串是不可变更的，也就是说其内部的值在创建后是不可被变更的。每次在对字符串进行操作的时候（例如运用字符串的“加”操作），unity会新建一个字符串用来存储新的字符串，使得旧的字符串被废弃，这样就会造成内存垃圾。</p><ul><li>我们可以采用以下的一些方法来最小化字符串的影响：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1）减少不必要的字符串的创建，如果一个字符串被多次利用，我们可以创建并缓存该字符串。</span><br><span class="line"></span><br><span class="line">2）减少不必要的字符串操作，例如如果在Text组件中，有一部分字符串需要经常改变，但是其他部分不会，则我们可以将其分为两个部分的组件，对于不变的部分就设置为类似常量字符串即可，见下面的例子。</span><br><span class="line"></span><br><span class="line">3）如果我们需要实时的创建字符串，我们可以采用StringBuilderClass来代替，StringBuilder专为不需要进行内存分配而设计，从而减少字符串产生的内存垃圾。</span><br><span class="line"></span><br><span class="line">4）移除游戏中的Debug.Log()函数的代码，尽管该函数可能输出为空，对该函数的调用依然会执行，该函数会创建至少一个字符（空字符）的字符串。如果游戏中有大量的该函数的调用，这会造成内存垃圾的增加。</span><br></pre></td></tr></table></figure></li></ul><p>　在下面的代码中，在Update函数中会进行一个string的操作，这样的操作就会造成不必要的内存垃圾：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Text timerText;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> timer;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    timer += Time.deltaTime;</span><br><span class="line">    timerText.text = <span class="string">"Time:"</span>+ timer.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过将字符串进行分隔，我们可以剔除字符串的加操作，从而减少不必要的内存垃圾：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Text timerHeaderText;</span><br><span class="line"><span class="keyword">public</span> Text timerValueText;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> timer;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    timerHeaderText.text = <span class="string">"TIME:"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   timerValueText.text = timer.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="Unity函数调用"><a href="#Unity函数调用" class="headerlink" title="Unity函数调用"></a>Unity函数调用</h6><p>　　在代码编程中，当我们调用不是我们自己编写的代码，无论是Unity自带的还是插件中的，我们都可能会产生内存垃圾。Unity的某些函数调用会产生内存垃圾，我们在使用的时候需要注意它的使用。</p><p>　　这儿没有明确的列表指出哪些函数需要注意，每个函数在不同的情况下有不同的使用，所以最好仔细地分析游戏，定位内存垃圾的产生原因以及如何解决问题。有时候缓存是一种有效的办法，有时候尽量降低函数的调用频率是一种办法，有时候用其他函数来重构代码是一种办法。现在来分析unity中常见的造成堆内存分配的函数调用。</p><p>　　在Unity中如果函数需要返回一个数组，则一个新的数组会被分配出来用作结果返回，这不容易被注意到，特别是如果该函数含有迭代器，下面的代码中对于每个迭代器都会产生一个新的数组：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExampleFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; myMesh.normals.Length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 normal = myMesh.normals[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于这样的问题，我们可以缓存一个数组的引用，这样只需要分配一个数组就可以实现相同的功能，从而减少内存垃圾的产生：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExampleFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector3[] meshNormals = myMesh.normals;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; meshNormals.Length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 normal = meshNormals[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此外另外的一个函数调用GameObject.name 或者 GameObject.tag也会造成预想不到的堆内存分配，这两个函数都会将结果存为新的字符串返回，这就会造成不必要的内存垃圾，对结果进行缓存是一种有效的办法，但是在Unity中都对应的有相关的函数来替代。对于比较gameObject的tag，可以采用GameObject.CompareTag()来替代。</p><p>　　在下面的代码中，调用gameobject.tag就会产生内存垃圾：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> playerTag=<span class="string">"Player"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> isPlayer = other.gameObject.tag == playerTag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>采用GameObject.CompareTag()可以避免内存垃圾的产生：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vate <span class="keyword">string</span> playerTag = <span class="string">"Player"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> isPlayer = other.gameObject.CompareTag(playerTag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不只是GameObject.CompareTag，unity中许多其他的函数也可以避免内存垃圾的生成。比如我们可以用Input.GetTouch()和Input.touchCount()来代替Input.touches，或者用Physics.SphereCastNonAlloc()来代替Physics.SphereCastAll()。</p><h6 id="装箱操作"><a href="#装箱操作" class="headerlink" title="装箱操作"></a>装箱操作</h6><p>　　装箱操作是指一个值类型变量被用作引用类型变量时候的内部变换过程，如果我们向带有对象类型参数的函数传入值类型，这就会触发装箱操作。比如String.Format()函数需要传入字符串和对象类型参数，如果传入字符串和int类型数据，就会触发装箱操作。如下面代码所示：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExampleFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cost = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">string</span> displayString = String.Format(<span class="string">"Price:&#123;0&#125; gold"</span>,cost);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Unity的装箱操作中，对于值类型会在堆内存上分配一个System.Object类型的引用来封装该值类型变量，其对应的缓存就会产生内存垃圾。装箱操作是非常普遍的一种产生内存垃圾的行为，即使代码中没有直接的对变量进行装箱操作，在插件或者其他的函数中也有可能会产生。最好的解决办法是尽可能的避免或者移除造成装箱操作的代码。</p><h6 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h6><p>　　调用 StartCoroutine()会产生少量的内存垃圾，因为unity会生成实体来管理协程。所以在游戏的关键时刻应该限制该函数的调用。基于此，任何在游戏关键时刻调用的协程都需要特别的注意，特别是包含延迟回调的协程。</p><p>　　yield在协程中不会产生堆内存分配，但是如果yield带有参数返回，则会造成不必要的内存垃圾，例如：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>由于需要返回0，引发了装箱操作，所以会产生内存垃圾。这种情况下，为了避免内存垃圾，我们可以这样返回：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>另外一种对协程的错误使用是每次返回的时候都new同一个变量，例如：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!isComplete)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">1</span>f</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以采用缓存来避免这样的内存垃圾产生：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WaitForSeconds delay = <span class="keyword">new</span> WaiForSeconds(<span class="number">1</span>f);</span><br><span class="line"><span class="keyword">while</span>(!isComplete)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> delay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果游戏中的协程产生了内存垃圾，我们可以考虑用其他的方式来替代协程。重构代码对于游戏而言十分复杂，但是对于协程而言我们也可以注意一些常见的操作，比如如果用协程来管理时间，最好在update函数中保持对时间的记录。如果用协程来控制游戏中事件的发生顺序，最好对于不同事件之间有一定的信息通信的方式。对于协程而言没有适合各种情况的方法，只有根据具体的代码来选择最好的解决办法。</p><h6 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h6><p>　　在unity5.5以前的版本中，在foreach的迭代中都会生成内存垃圾，主要来自于其后的装箱操作。每次在foreach迭代的时候，都会在堆内存上生产一个System.Object用来实现迭代循环操作。在unity5.5中解决了这个问题，比如，在unity5.5以前的版本中，用foreach实现循环：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExampleFunction</span>(<span class="params">List listOfInts</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">int</span> currentInt <span class="keyword">in</span> listOfInts)</span><br><span class="line">    &#123;</span><br><span class="line">        DoSomething(currentInt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果游戏工程不能升级到5.5以上，则可以用for或者while循环来解决这个问题，所以可以改为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExampleFunction</span>(<span class="params">List listOfInts</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; listOfInts.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> currentInt = listOfInts[i];</span><br><span class="line">        DoSomething(currentInt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h6><p>　　函数的引用，无论是指向匿名函数还是显式函数，在unity中都是引用类型变量，这都会在堆内存上进行分配。匿名函数的调用完成后都会增加内存的使用和堆内存的分配。具体函数的引用和终止都取决于操作平台和编译器设置，但是如果想减少GC最好减少函数的引用。</p><h6 id="LINQ和常量表达式"><a href="#LINQ和常量表达式" class="headerlink" title="LINQ和常量表达式"></a>LINQ和常量表达式</h6><p>　　由于LINQ和常量表达式以装箱的方式实现，所以在使用的时候最好进行性能测试。</p><hr><h5 id="重构代码来减小GC的影响"><a href="#重构代码来减小GC的影响" class="headerlink" title="重构代码来减小GC的影响"></a>重构代码来减小GC的影响</h5><p>　　即使我们减小了代码在堆内存上的分配操作，代码也会增加GC的工作量。最常见的增加GC工作量的方式是让其检查它不必检查的对象。struct是值类型的变量，但是如果struct中包含有引用类型的变量，那么GC就必须检测整个struct。如果这样的操作很多，那么GC的工作量就大大增加。在下面的例子中struct包含一个string，那么整个struct都必须在GC中被检查：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> ItemData</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> cost;</span><br><span class="line">    <span class="keyword">public</span> Vector3 position;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> ItemData[] itemData;</span><br></pre></td></tr></table></figure></p><p>我们可以将该struct拆分为多个数组的形式，从而减小GC的工作量<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">string</span>[] itemNames;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] itemCosts;</span><br><span class="line"><span class="keyword">private</span> Vector3[] itemPositions;</span><br></pre></td></tr></table></figure></p><p>　 另外一种在代码中增加GC工作量的方式是保存不必要的Object引用，在进行GC操作的时候会对堆内存上的object引用进行检查，越少的引用就意味着越少的检查工作量。在下面的例子中，当前的对话框中包含一个对下一个对话框引用，这就使得GC的时候会去检查下一个对象框：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DialogData</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">private</span> DialogData nextDialog;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> DialogData <span class="title">GetNextDialog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> nextDialog;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过重构代码，我们可以返回下一个对话框实体的标记，而不是对话框实体本身，这样就没有多余的object引用，从而减少GC的工作量：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DialogData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextDialogID;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetNextDialogID</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> nextDialogID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然这个例子本身并不重要，但是如果我们的游戏中包含大量的含有对其他Object引用的object，我们可以考虑通过重构代码来减少GC的工作量。</p><hr><h5 id="定时执行GC操作"><a href="#定时执行GC操作" class="headerlink" title="定时执行GC操作"></a>定时执行GC操作</h5><h6 id="主动调用GC操作"><a href="#主动调用GC操作" class="headerlink" title="主动调用GC操作"></a>主动调用GC操作</h6><p>　　如果我们知道堆内存在被分配后并没有被使用，我们希望可以主动地调用GC操作，或者在GC操作并不影响游戏体验的时候（例如场景切换的时候），我们可以主动的调用GC操作：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.GC.Collect()</span><br></pre></td></tr></table></figure></p><p>通过主动的调用，我们可以主动驱使GC操作来回收堆内存。</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>　　通过本文对于unity中的GC有了一定的了解，对于GC对于游戏性能的影响以及如何解决都有一定的了解。通过定位造成GC问题的代码以及代码重构我们可以更有效的管理游戏的内存。</p>]]></content>
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
